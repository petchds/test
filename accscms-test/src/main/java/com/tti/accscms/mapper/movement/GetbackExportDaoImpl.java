package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.GetbackExportDao;

import com.tti.accscms.domain.movement.GetbackExport;
import com.tti.accscms.domain.movement.GetbackExportExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table getback_export
 */
public class GetbackExportDaoImpl implements GetbackExportDao {

	private static final Logger logger = LoggerFactory.getLogger(GetbackExportDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, GetbackExport getbackExport) throws SQLException {
		
		if (getbackExport.getId() != null) {
			ps.setInt(1, getbackExport.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (getbackExport.getId2() != null) {
			ps.setInt(2, getbackExport.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (getbackExport.getDeclarationNo() != null) {
			ps.setString(3, getbackExport.getDeclarationNo());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getMawb() != null) {
			ps.setString(4, getbackExport.getMawb());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getHawb() != null) {
			ps.setString(5, getbackExport.getHawb());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getFlightNo() != null) {
			ps.setString(6, getbackExport.getFlightNo());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getFlightDate() != null) {
			ps.setTimestamp(7, new java.sql.Timestamp(getbackExport.getFlightDate().getTime()));
		} else {
			ps.setNull(7, java.sql.Types.DATE);
		}

		if (getbackExport.getNumberOfPackage() != null) {
			ps.setInt(8, getbackExport.getNumberOfPackage());
		} else {
			ps.setNull(8, java.sql.Types.INTEGER);
		}

		if (getbackExport.getNumberOfPackageUnit() != null) {
			ps.setString(9, getbackExport.getNumberOfPackageUnit());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getGrossWeight() != null) {
			ps.setDouble(10, getbackExport.getGrossWeight());
		} else {
			ps.setNull(10, java.sql.Types.DOUBLE);
		}

		if (getbackExport.getGrossWeightUnit() != null) {
			ps.setString(11, getbackExport.getGrossWeightUnit());
		} else {
			ps.setNull(11, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getGetbackNumberOfPackage() != null) {
			ps.setInt(12, getbackExport.getGetbackNumberOfPackage());
		} else {
			ps.setNull(12, java.sql.Types.INTEGER);
		}

		if (getbackExport.getGetbackNumberOfPackageUnit() != null) {
			ps.setString(13, getbackExport.getGetbackNumberOfPackageUnit());
		} else {
			ps.setNull(13, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getGetbackGrossWeight() != null) {
			ps.setDouble(14, getbackExport.getGetbackGrossWeight());
		} else {
			ps.setNull(14, java.sql.Types.DOUBLE);
		}

		if (getbackExport.getGetbackGrossWeightUnit() != null) {
			ps.setString(15, getbackExport.getGetbackGrossWeightUnit());
		} else {
			ps.setNull(15, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getNetWeight() != null) {
			ps.setDouble(16, getbackExport.getNetWeight());
		} else {
			ps.setNull(16, java.sql.Types.DOUBLE);
		}

		if (getbackExport.getNetWeightUnit() != null) {
			ps.setString(17, getbackExport.getNetWeightUnit());
		} else {
			ps.setNull(17, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getQuantity() != null) {
			ps.setInt(18, getbackExport.getQuantity());
		} else {
			ps.setNull(18, java.sql.Types.INTEGER);
		}

		if (getbackExport.getQuantityUnit() != null) {
			ps.setString(19, getbackExport.getQuantityUnit());
		} else {
			ps.setNull(19, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getGetbackNetWeight() != null) {
			ps.setDouble(20, getbackExport.getGetbackNetWeight());
		} else {
			ps.setNull(20, java.sql.Types.DOUBLE);
		}

		if (getbackExport.getGetbackNetWeightUnit() != null) {
			ps.setString(21, getbackExport.getGetbackNetWeightUnit());
		} else {
			ps.setNull(21, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getGetbackQuantity() != null) {
			ps.setInt(22, getbackExport.getGetbackQuantity());
		} else {
			ps.setNull(22, java.sql.Types.INTEGER);
		}

		if (getbackExport.getGetbackQuantityUnit() != null) {
			ps.setString(23, getbackExport.getGetbackQuantityUnit());
		} else {
			ps.setNull(23, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getModifiedDateTime() != null) {
			ps.setTimestamp(24, new java.sql.Timestamp(getbackExport.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(24, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (getbackExport.getRequestNo() != null) {
			ps.setString(25, getbackExport.getRequestNo());
		} else {
			ps.setNull(25, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getCreateDateTime() != null) {
			ps.setTimestamp(26, new java.sql.Timestamp(getbackExport.getCreateDateTime().getTime()));
		} else {
			ps.setNull(26, java.sql.Types.TIMESTAMP);
		}

		if (getbackExport.getApproveBy() != null) {
			ps.setString(27, getbackExport.getApproveBy());
		} else {
			ps.setNull(27, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getApproveDateTime() != null) {
			ps.setTimestamp(28, new java.sql.Timestamp(getbackExport.getApproveDateTime().getTime()));
		} else {
			ps.setNull(28, java.sql.Types.TIMESTAMP);
		}

		if (getbackExport.getCustomsOfficerName() != null) {
			ps.setString(29, getbackExport.getCustomsOfficerName());
		} else {
			ps.setNull(29, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getRemark() != null) {
			ps.setString(30, getbackExport.getRemark());
		} else {
			ps.setNull(30, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getShedNo() != null) {
			ps.setString(31, getbackExport.getShedNo());
		} else {
			ps.setNull(31, java.sql.Types.VARCHAR);
		}

		if (getbackExport.getTransactionNo() != null) {
			ps.setString(32, getbackExport.getTransactionNo());
		} else {
			ps.setNull(32, java.sql.Types.VARCHAR);
		}

	}

		
	private static GetbackExport createInstanceFromResultSet(ResultSet rs) throws SQLException {
		GetbackExport getbackExport = new GetbackExport();
		
		Integer col1 = rs.getInt("id");
		getbackExport.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		getbackExport.setId2(rs.wasNull() ? null : col2);

		String col3 = rs.getString("declaration_no");
		getbackExport.setDeclarationNo(rs.wasNull() ? null : col3);

		String col4 = rs.getString("mawb");
		getbackExport.setMawb(rs.wasNull() ? null : col4);

		String col5 = rs.getString("hawb");
		getbackExport.setHawb(rs.wasNull() ? null : col5);

		String col6 = rs.getString("flight_no");
		getbackExport.setFlightNo(rs.wasNull() ? null : col6);

		java.sql.Timestamp col7 = rs.getTimestamp("flight_date");
		getbackExport.setFlightDate(rs.wasNull() ? null : new java.util.Date(col7.getTime()));

		Integer col8 = rs.getInt("number_of_package");
		getbackExport.setNumberOfPackage(rs.wasNull() ? null : col8);

		String col9 = rs.getString("number_of_package_unit");
		getbackExport.setNumberOfPackageUnit(rs.wasNull() ? null : col9);

		Double col10 = rs.getDouble("gross_weight");
		getbackExport.setGrossWeight(rs.wasNull() ? null : col10);

		String col11 = rs.getString("gross_weight_unit");
		getbackExport.setGrossWeightUnit(rs.wasNull() ? null : col11);

		Integer col12 = rs.getInt("getback_number_of_package");
		getbackExport.setGetbackNumberOfPackage(rs.wasNull() ? null : col12);

		String col13 = rs.getString("getback_number_of_package_unit");
		getbackExport.setGetbackNumberOfPackageUnit(rs.wasNull() ? null : col13);

		Double col14 = rs.getDouble("getback_gross_weight");
		getbackExport.setGetbackGrossWeight(rs.wasNull() ? null : col14);

		String col15 = rs.getString("getback_gross_weight_unit");
		getbackExport.setGetbackGrossWeightUnit(rs.wasNull() ? null : col15);

		Double col16 = rs.getDouble("net_weight");
		getbackExport.setNetWeight(rs.wasNull() ? null : col16);

		String col17 = rs.getString("net_weight_unit");
		getbackExport.setNetWeightUnit(rs.wasNull() ? null : col17);

		Integer col18 = rs.getInt("quantity");
		getbackExport.setQuantity(rs.wasNull() ? null : col18);

		String col19 = rs.getString("quantity_unit");
		getbackExport.setQuantityUnit(rs.wasNull() ? null : col19);

		Double col20 = rs.getDouble("getback_net_weight");
		getbackExport.setGetbackNetWeight(rs.wasNull() ? null : col20);

		String col21 = rs.getString("getback_net_weight_unit");
		getbackExport.setGetbackNetWeightUnit(rs.wasNull() ? null : col21);

		Integer col22 = rs.getInt("getback_quantity");
		getbackExport.setGetbackQuantity(rs.wasNull() ? null : col22);

		String col23 = rs.getString("getback_quantity_unit");
		getbackExport.setGetbackQuantityUnit(rs.wasNull() ? null : col23);

		java.sql.Timestamp col24 = rs.getTimestamp("modified_date_time");
		getbackExport.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col24.getTime()));

		String col25 = rs.getString("request_no");
		getbackExport.setRequestNo(rs.wasNull() ? null : col25);

		java.sql.Timestamp col26 = rs.getTimestamp("create_date_time");
		getbackExport.setCreateDateTime(rs.wasNull() ? null : new java.util.Date(col26.getTime()));

		String col27 = rs.getString("approve_by");
		getbackExport.setApproveBy(rs.wasNull() ? null : col27);

		java.sql.Timestamp col28 = rs.getTimestamp("approve_date_time");
		getbackExport.setApproveDateTime(rs.wasNull() ? null : new java.util.Date(col28.getTime()));

		String col29 = rs.getString("customs_officer_name");
		getbackExport.setCustomsOfficerName(rs.wasNull() ? null : col29);

		String col30 = rs.getString("remark");
		getbackExport.setRemark(rs.wasNull() ? null : col30);

		String col31 = rs.getString("shed_no");
		getbackExport.setShedNo(rs.wasNull() ? null : col31);

		String col32 = rs.getString("transaction_no");
		getbackExport.setTransactionNo(rs.wasNull() ? null : col32);


		return getbackExport;
	}  

		
	@Override
	public int insert(GetbackExport getbackExport) throws DaoException {
		if (getbackExport == null) {
			throw new DaoException("Cannot insert getback_export with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into getback_export(`id`,`id2`,`declaration_no`,`mawb`,`hawb`,`flight_no`,`flight_date`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`getback_number_of_package`,`getback_number_of_package_unit`,`getback_gross_weight`,`getback_gross_weight_unit`,`net_weight`,`net_weight_unit`,`quantity`,`quantity_unit`,`getback_net_weight`,`getback_net_weight_unit`,`getback_quantity`,`getback_quantity_unit`,`modified_date_time`,`request_no`,`create_date_time`,`approve_by`,`approve_date_time`,`customs_officer_name`,`remark`,`shed_no`,`transaction_no`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            GetbackExportDaoImpl.setPreparedStatementValues(ps, getbackExport);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT getback_export[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from getback_export");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT getback_export => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public GetbackExport findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`declaration_no`,`mawb`,`hawb`,`flight_no`,`flight_date`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`getback_number_of_package`,`getback_number_of_package_unit`,`getback_gross_weight`,`getback_gross_weight_unit`,`net_weight`,`net_weight_unit`,`quantity`,`quantity_unit`,`getback_net_weight`,`getback_net_weight_unit`,`getback_quantity`,`getback_quantity_unit`,`modified_date_time`,`request_no`,`create_date_time`,`approve_by`,`approve_date_time`,`customs_officer_name`,`remark`,`shed_no`,`transaction_no` from getback_export where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND getback_export[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            GetbackExport instance = null;
            if (rs.next()) {
                instance = GetbackExportDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(GetbackExport getbackExport) throws DaoException {
		if (getbackExport == null) {
			throw new DaoException("Cannot insert getback_export with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update getback_export set `id`=?,`id2`=?,`declaration_no`=?,`mawb`=?,`hawb`=?,`flight_no`=?,`flight_date`=?,`number_of_package`=?,`number_of_package_unit`=?,`gross_weight`=?,`gross_weight_unit`=?,`getback_number_of_package`=?,`getback_number_of_package_unit`=?,`getback_gross_weight`=?,`getback_gross_weight_unit`=?,`net_weight`=?,`net_weight_unit`=?,`quantity`=?,`quantity_unit`=?,`getback_net_weight`=?,`getback_net_weight_unit`=?,`getback_quantity`=?,`getback_quantity_unit`=?,`modified_date_time`=?,`request_no`=?,`create_date_time`=?,`approve_by`=?,`approve_date_time`=?,`customs_officer_name`=?,`remark`=?,`shed_no`=?,`transaction_no`=? where id=?");
            GetbackExportDaoImpl.setPreparedStatementValues(ps, getbackExport);
            ps.setInt(33, getbackExport.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE getback_export[id=" + getbackExport.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from getback_export where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE getback_export[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(GetbackExportExample getbackExportExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (GetbackExportExample.Criteria criteria : getbackExportExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (GetbackExportExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (getbackExportExample.getOrderByClause() != null && !getbackExportExample.getOrderByClause().isEmpty()) {
			clause += " order by " + getbackExportExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByGetbackExportExample(GetbackExportExample getbackExportExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = GetbackExportDaoImpl.buildClause(getbackExportExample);			
            ResultSet rs = stmt.executeQuery("select" + (getbackExportExample.isDistinct() ? " distinct " : " ") + "count(*) from getback_export" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT getback_export[distinct=" + getbackExportExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public GetbackExport findByGetbackExportExample(GetbackExportExample getbackExportExample) throws DaoException {
		List<GetbackExport> res = this.findAllByGetbackExportExample(getbackExportExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<GetbackExport> findAllByGetbackExportExample(GetbackExportExample getbackExportExample) throws DaoException {
    	return this.findAllByGetbackExportExample(getbackExportExample, 0, 2000);
    }
    
    @Override
    public List<GetbackExport> findAllByGetbackExportExample(GetbackExportExample getbackExportExample, int limit) throws DaoException {
    	return this.findAllByGetbackExportExample(getbackExportExample, 0, limit);
    }
    
    @Override
    public List<GetbackExport> findAllByGetbackExportExample(GetbackExportExample getbackExportExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = GetbackExportDaoImpl.buildClause(getbackExportExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND getback_export[distinct=" + getbackExportExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (getbackExportExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`declaration_no`,`mawb`,`hawb`,`flight_no`,`flight_date`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`getback_number_of_package`,`getback_number_of_package_unit`,`getback_gross_weight`,`getback_gross_weight_unit`,`net_weight`,`net_weight_unit`,`quantity`,`quantity_unit`,`getback_net_weight`,`getback_net_weight_unit`,`getback_quantity`,`getback_quantity_unit`,`modified_date_time`,`request_no`,`create_date_time`,`approve_by`,`approve_date_time`,`customs_officer_name`,`remark`,`shed_no`,`transaction_no` from getback_export" + clause);

            List<GetbackExport> list = new ArrayList<GetbackExport>();
            while (rs.next()) {
                list.add(GetbackExportDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
