package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.BlockStatusDao;

import com.tti.accscms.domain.movement.BlockStatus;
import com.tti.accscms.domain.movement.BlockStatusExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table block_status
 */
public class BlockStatusDaoImpl implements BlockStatusDao {

	private static final Logger logger = LoggerFactory.getLogger(BlockStatusDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, BlockStatus blockStatus) throws SQLException {
		
		if (blockStatus.getId() != null) {
			ps.setInt(1, blockStatus.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (blockStatus.getId2() != null) {
			ps.setInt(2, blockStatus.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (blockStatus.getShipmentId() != null) {
			ps.setInt(3, blockStatus.getShipmentId());
		} else {
			ps.setNull(3, java.sql.Types.INTEGER);
		}

		if (blockStatus.getDeclarationNo() != null) {
			ps.setString(4, blockStatus.getDeclarationNo());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (blockStatus.getStatus() != null) {
			ps.setString(5, blockStatus.getStatus());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (blockStatus.getRemark() != null) {
			ps.setString(6, blockStatus.getRemark());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (blockStatus.getBlockDateTime() != null) {
			ps.setTimestamp(7, new java.sql.Timestamp(blockStatus.getBlockDateTime().getTime()));
		} else {
			ps.setNull(7, java.sql.Types.TIMESTAMP);
		}

		if (blockStatus.getUnblockDateTime() != null) {
			ps.setTimestamp(8, new java.sql.Timestamp(blockStatus.getUnblockDateTime().getTime()));
		} else {
			ps.setNull(8, java.sql.Types.TIMESTAMP);
		}

		if (blockStatus.getCompanyCode() != null) {
			ps.setString(9, blockStatus.getCompanyCode());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (blockStatus.getCompanyType() != null) {
			ps.setString(10, blockStatus.getCompanyType());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (blockStatus.getUserBlock() != null) {
			ps.setString(11, blockStatus.getUserBlock());
		} else {
			ps.setNull(11, java.sql.Types.VARCHAR);
		}

		if (blockStatus.getMawb() != null) {
			ps.setString(12, blockStatus.getMawb());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (blockStatus.getHawb() != null) {
			ps.setString(13, blockStatus.getHawb());
		} else {
			ps.setNull(13, java.sql.Types.VARCHAR);
		}

		if (blockStatus.getFlightNo() != null) {
			ps.setString(14, blockStatus.getFlightNo());
		} else {
			ps.setNull(14, java.sql.Types.VARCHAR);
		}

		if (blockStatus.getFlightDate() != null) {
			ps.setTimestamp(15, new java.sql.Timestamp(blockStatus.getFlightDate().getTime()));
		} else {
			ps.setNull(15, java.sql.Types.DATE);
		}

		if (blockStatus.getUserUnblock() != null) {
			ps.setString(16, blockStatus.getUserUnblock());
		} else {
			ps.setNull(16, java.sql.Types.VARCHAR);
		}

		if (blockStatus.getModifiedDateTime() != null) {
			ps.setTimestamp(17, new java.sql.Timestamp(blockStatus.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(17, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (blockStatus.getAutoBlockProfileId() != null) {
			ps.setInt(18, blockStatus.getAutoBlockProfileId());
		} else {
			ps.setNull(18, java.sql.Types.INTEGER);
		}

	}

		
	private static BlockStatus createInstanceFromResultSet(ResultSet rs) throws SQLException {
		BlockStatus blockStatus = new BlockStatus();
		
		Integer col1 = rs.getInt("id");
		blockStatus.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		blockStatus.setId2(rs.wasNull() ? null : col2);

		Integer col3 = rs.getInt("shipment_id");
		blockStatus.setShipmentId(rs.wasNull() ? null : col3);

		String col4 = rs.getString("declaration_no");
		blockStatus.setDeclarationNo(rs.wasNull() ? null : col4);

		String col5 = rs.getString("status");
		blockStatus.setStatus(rs.wasNull() ? null : col5);

		String col6 = rs.getString("remark");
		blockStatus.setRemark(rs.wasNull() ? null : col6);

		java.sql.Timestamp col7 = rs.getTimestamp("block_date_time");
		blockStatus.setBlockDateTime(rs.wasNull() ? null : new java.util.Date(col7.getTime()));

		java.sql.Timestamp col8 = rs.getTimestamp("unblock_date_time");
		blockStatus.setUnblockDateTime(rs.wasNull() ? null : new java.util.Date(col8.getTime()));

		String col9 = rs.getString("company_code");
		blockStatus.setCompanyCode(rs.wasNull() ? null : col9);

		String col10 = rs.getString("company_type");
		blockStatus.setCompanyType(rs.wasNull() ? null : col10);

		String col11 = rs.getString("user_block");
		blockStatus.setUserBlock(rs.wasNull() ? null : col11);

		String col12 = rs.getString("mawb");
		blockStatus.setMawb(rs.wasNull() ? null : col12);

		String col13 = rs.getString("hawb");
		blockStatus.setHawb(rs.wasNull() ? null : col13);

		String col14 = rs.getString("flight_no");
		blockStatus.setFlightNo(rs.wasNull() ? null : col14);

		java.sql.Timestamp col15 = rs.getTimestamp("flight_date");
		blockStatus.setFlightDate(rs.wasNull() ? null : new java.util.Date(col15.getTime()));

		String col16 = rs.getString("user_unblock");
		blockStatus.setUserUnblock(rs.wasNull() ? null : col16);

		java.sql.Timestamp col17 = rs.getTimestamp("modified_date_time");
		blockStatus.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col17.getTime()));

		Integer col18 = rs.getInt("auto_block_profile_id");
		blockStatus.setAutoBlockProfileId(rs.wasNull() ? null : col18);


		return blockStatus;
	}  

		
	@Override
	public int insert(BlockStatus blockStatus) throws DaoException {
		if (blockStatus == null) {
			throw new DaoException("Cannot insert block_status with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into block_status(`id`,`id2`,`shipment_id`,`declaration_no`,`status`,`remark`,`block_date_time`,`unblock_date_time`,`company_code`,`company_type`,`user_block`,`mawb`,`hawb`,`flight_no`,`flight_date`,`user_unblock`,`modified_date_time`,`auto_block_profile_id`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            BlockStatusDaoImpl.setPreparedStatementValues(ps, blockStatus);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT block_status[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from block_status");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT block_status => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public BlockStatus findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`shipment_id`,`declaration_no`,`status`,`remark`,`block_date_time`,`unblock_date_time`,`company_code`,`company_type`,`user_block`,`mawb`,`hawb`,`flight_no`,`flight_date`,`user_unblock`,`modified_date_time`,`auto_block_profile_id` from block_status where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND block_status[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            BlockStatus instance = null;
            if (rs.next()) {
                instance = BlockStatusDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(BlockStatus blockStatus) throws DaoException {
		if (blockStatus == null) {
			throw new DaoException("Cannot insert block_status with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update block_status set `id`=?,`id2`=?,`shipment_id`=?,`declaration_no`=?,`status`=?,`remark`=?,`block_date_time`=?,`unblock_date_time`=?,`company_code`=?,`company_type`=?,`user_block`=?,`mawb`=?,`hawb`=?,`flight_no`=?,`flight_date`=?,`user_unblock`=?,`modified_date_time`=?,`auto_block_profile_id`=? where id=?");
            BlockStatusDaoImpl.setPreparedStatementValues(ps, blockStatus);
            ps.setInt(19, blockStatus.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE block_status[id=" + blockStatus.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from block_status where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE block_status[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(BlockStatusExample blockStatusExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (BlockStatusExample.Criteria criteria : blockStatusExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (BlockStatusExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (blockStatusExample.getOrderByClause() != null && !blockStatusExample.getOrderByClause().isEmpty()) {
			clause += " order by " + blockStatusExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByBlockStatusExample(BlockStatusExample blockStatusExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = BlockStatusDaoImpl.buildClause(blockStatusExample);			
            ResultSet rs = stmt.executeQuery("select" + (blockStatusExample.isDistinct() ? " distinct " : " ") + "count(*) from block_status" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT block_status[distinct=" + blockStatusExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public BlockStatus findByBlockStatusExample(BlockStatusExample blockStatusExample) throws DaoException {
		List<BlockStatus> res = this.findAllByBlockStatusExample(blockStatusExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<BlockStatus> findAllByBlockStatusExample(BlockStatusExample blockStatusExample) throws DaoException {
    	return this.findAllByBlockStatusExample(blockStatusExample, 0, 2000);
    }
    
    @Override
    public List<BlockStatus> findAllByBlockStatusExample(BlockStatusExample blockStatusExample, int limit) throws DaoException {
    	return this.findAllByBlockStatusExample(blockStatusExample, 0, limit);
    }
    
    @Override
    public List<BlockStatus> findAllByBlockStatusExample(BlockStatusExample blockStatusExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = BlockStatusDaoImpl.buildClause(blockStatusExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND block_status[distinct=" + blockStatusExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (blockStatusExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`shipment_id`,`declaration_no`,`status`,`remark`,`block_date_time`,`unblock_date_time`,`company_code`,`company_type`,`user_block`,`mawb`,`hawb`,`flight_no`,`flight_date`,`user_unblock`,`modified_date_time`,`auto_block_profile_id` from block_status" + clause);

            List<BlockStatus> list = new ArrayList<BlockStatus>();
            while (rs.next()) {
                list.add(BlockStatusDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
