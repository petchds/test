package com.tti.accscms.mapper.manifest;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.manifest.AirCargoManifestControlHistoryDao;

import com.tti.accscms.domain.manifest.AirCargoManifestControlHistory;
import com.tti.accscms.domain.manifest.AirCargoManifestControlHistoryExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table aman_control_his
 */
public class AirCargoManifestControlHistoryDaoImpl implements AirCargoManifestControlHistoryDao {

	private static final Logger logger = LoggerFactory.getLogger(AirCargoManifestControlHistoryDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, AirCargoManifestControlHistory airCargoManifestControlHistory) throws SQLException {
		
		if (airCargoManifestControlHistory.getId() != null) {
			ps.setInt(1, airCargoManifestControlHistory.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (airCargoManifestControlHistory.getId2() != null) {
			ps.setInt(2, airCargoManifestControlHistory.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (airCargoManifestControlHistory.getAmanControlId() != null) {
			ps.setInt(3, airCargoManifestControlHistory.getAmanControlId());
		} else {
			ps.setNull(3, java.sql.Types.INTEGER);
		}

		if (airCargoManifestControlHistory.getReferenceNumber() != null) {
			ps.setString(4, airCargoManifestControlHistory.getReferenceNumber());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControlHistory.getReceivedControlNumber() != null) {
			ps.setString(5, airCargoManifestControlHistory.getReceivedControlNumber());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControlHistory.getPortOfLoading() != null) {
			ps.setString(6, airCargoManifestControlHistory.getPortOfLoading());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControlHistory.getPortOfDischarge() != null) {
			ps.setString(7, airCargoManifestControlHistory.getPortOfDischarge());
		} else {
			ps.setNull(7, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControlHistory.getProcessingIndicator() != null) {
			ps.setString(8, airCargoManifestControlHistory.getProcessingIndicator());
		} else {
			ps.setNull(8, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControlHistory.getMessageFunction() != null) {
			ps.setString(9, airCargoManifestControlHistory.getMessageFunction());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControlHistory.getRegistrationId() != null) {
			ps.setString(10, airCargoManifestControlHistory.getRegistrationId());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControlHistory.getModifiedDateTime() != null) {
			ps.setTimestamp(11, new java.sql.Timestamp(airCargoManifestControlHistory.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(11, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (airCargoManifestControlHistory.getType() != null) {
			ps.setInt(12, airCargoManifestControlHistory.getType());
		} else {
			ps.setNull(12, java.sql.Types.INTEGER);
		}

		if (airCargoManifestControlHistory.getFlightNo() != null) {
			ps.setString(13, airCargoManifestControlHistory.getFlightNo());
		} else {
			ps.setNull(13, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControlHistory.getFlightDate() != null) {
			ps.setTimestamp(14, new java.sql.Timestamp(airCargoManifestControlHistory.getFlightDate().getTime()));
		} else {
			ps.setNull(14, java.sql.Types.DATE);
		}

	}

		
	private static AirCargoManifestControlHistory createInstanceFromResultSet(ResultSet rs) throws SQLException {
		AirCargoManifestControlHistory airCargoManifestControlHistory = new AirCargoManifestControlHistory();
		
		Integer col1 = rs.getInt("id");
		airCargoManifestControlHistory.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		airCargoManifestControlHistory.setId2(rs.wasNull() ? null : col2);

		Integer col3 = rs.getInt("aman_control_id");
		airCargoManifestControlHistory.setAmanControlId(rs.wasNull() ? null : col3);

		String col4 = rs.getString("reference_number");
		airCargoManifestControlHistory.setReferenceNumber(rs.wasNull() ? null : col4);

		String col5 = rs.getString("received_control_number");
		airCargoManifestControlHistory.setReceivedControlNumber(rs.wasNull() ? null : col5);

		String col6 = rs.getString("port_of_loading");
		airCargoManifestControlHistory.setPortOfLoading(rs.wasNull() ? null : col6);

		String col7 = rs.getString("port_of_discharge");
		airCargoManifestControlHistory.setPortOfDischarge(rs.wasNull() ? null : col7);

		String col8 = rs.getString("processing_indicator");
		airCargoManifestControlHistory.setProcessingIndicator(rs.wasNull() ? null : col8);

		String col9 = rs.getString("message_function");
		airCargoManifestControlHistory.setMessageFunction(rs.wasNull() ? null : col9);

		String col10 = rs.getString("registration_id");
		airCargoManifestControlHistory.setRegistrationId(rs.wasNull() ? null : col10);

		java.sql.Timestamp col11 = rs.getTimestamp("modified_date_time");
		airCargoManifestControlHistory.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col11.getTime()));

		Integer col12 = rs.getInt("type");
		airCargoManifestControlHistory.setType(rs.wasNull() ? null : col12);

		String col13 = rs.getString("flight_no");
		airCargoManifestControlHistory.setFlightNo(rs.wasNull() ? null : col13);

		java.sql.Timestamp col14 = rs.getTimestamp("flight_date");
		airCargoManifestControlHistory.setFlightDate(rs.wasNull() ? null : new java.util.Date(col14.getTime()));


		return airCargoManifestControlHistory;
	}  

		
	@Override
	public int insert(AirCargoManifestControlHistory airCargoManifestControlHistory) throws DaoException {
		if (airCargoManifestControlHistory == null) {
			throw new DaoException("Cannot insert aman_control_his with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into aman_control_his(`id`,`id2`,`aman_control_id`,`reference_number`,`received_control_number`,`port_of_loading`,`port_of_discharge`,`processing_indicator`,`message_function`,`registration_id`,`modified_date_time`,`type`,`flight_no`,`flight_date`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            AirCargoManifestControlHistoryDaoImpl.setPreparedStatementValues(ps, airCargoManifestControlHistory);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT aman_control_his[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from aman_control_his");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT aman_control_his => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public AirCargoManifestControlHistory findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`aman_control_id`,`reference_number`,`received_control_number`,`port_of_loading`,`port_of_discharge`,`processing_indicator`,`message_function`,`registration_id`,`modified_date_time`,`type`,`flight_no`,`flight_date` from aman_control_his where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND aman_control_his[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            AirCargoManifestControlHistory instance = null;
            if (rs.next()) {
                instance = AirCargoManifestControlHistoryDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(AirCargoManifestControlHistory airCargoManifestControlHistory) throws DaoException {
		if (airCargoManifestControlHistory == null) {
			throw new DaoException("Cannot insert aman_control_his with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update aman_control_his set `id`=?,`id2`=?,`aman_control_id`=?,`reference_number`=?,`received_control_number`=?,`port_of_loading`=?,`port_of_discharge`=?,`processing_indicator`=?,`message_function`=?,`registration_id`=?,`modified_date_time`=?,`type`=?,`flight_no`=?,`flight_date`=? where id=?");
            AirCargoManifestControlHistoryDaoImpl.setPreparedStatementValues(ps, airCargoManifestControlHistory);
            ps.setInt(15, airCargoManifestControlHistory.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE aman_control_his[id=" + airCargoManifestControlHistory.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from aman_control_his where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE aman_control_his[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(AirCargoManifestControlHistoryExample airCargoManifestControlHistoryExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (AirCargoManifestControlHistoryExample.Criteria criteria : airCargoManifestControlHistoryExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (AirCargoManifestControlHistoryExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (airCargoManifestControlHistoryExample.getOrderByClause() != null && !airCargoManifestControlHistoryExample.getOrderByClause().isEmpty()) {
			clause += " order by " + airCargoManifestControlHistoryExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByAirCargoManifestControlHistoryExample(AirCargoManifestControlHistoryExample airCargoManifestControlHistoryExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = AirCargoManifestControlHistoryDaoImpl.buildClause(airCargoManifestControlHistoryExample);			
            ResultSet rs = stmt.executeQuery("select" + (airCargoManifestControlHistoryExample.isDistinct() ? " distinct " : " ") + "count(*) from aman_control_his" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT aman_control_his[distinct=" + airCargoManifestControlHistoryExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public AirCargoManifestControlHistory findByAirCargoManifestControlHistoryExample(AirCargoManifestControlHistoryExample airCargoManifestControlHistoryExample) throws DaoException {
		List<AirCargoManifestControlHistory> res = this.findAllByAirCargoManifestControlHistoryExample(airCargoManifestControlHistoryExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<AirCargoManifestControlHistory> findAllByAirCargoManifestControlHistoryExample(AirCargoManifestControlHistoryExample airCargoManifestControlHistoryExample) throws DaoException {
    	return this.findAllByAirCargoManifestControlHistoryExample(airCargoManifestControlHistoryExample, 0, 2000);
    }
    
    @Override
    public List<AirCargoManifestControlHistory> findAllByAirCargoManifestControlHistoryExample(AirCargoManifestControlHistoryExample airCargoManifestControlHistoryExample, int limit) throws DaoException {
    	return this.findAllByAirCargoManifestControlHistoryExample(airCargoManifestControlHistoryExample, 0, limit);
    }
    
    @Override
    public List<AirCargoManifestControlHistory> findAllByAirCargoManifestControlHistoryExample(AirCargoManifestControlHistoryExample airCargoManifestControlHistoryExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = AirCargoManifestControlHistoryDaoImpl.buildClause(airCargoManifestControlHistoryExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND aman_control_his[distinct=" + airCargoManifestControlHistoryExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (airCargoManifestControlHistoryExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`aman_control_id`,`reference_number`,`received_control_number`,`port_of_loading`,`port_of_discharge`,`processing_indicator`,`message_function`,`registration_id`,`modified_date_time`,`type`,`flight_no`,`flight_date` from aman_control_his" + clause);

            List<AirCargoManifestControlHistory> list = new ArrayList<AirCargoManifestControlHistory>();
            while (rs.next()) {
                list.add(AirCargoManifestControlHistoryDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
