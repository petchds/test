package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.UpdatedManifestStatusDao;

import com.tti.accscms.domain.movement.UpdatedManifestStatus;
import com.tti.accscms.domain.movement.UpdatedManifestStatusExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table di_updated_manifest_status
 */
public class UpdatedManifestStatusDaoImpl implements UpdatedManifestStatusDao {

	private static final Logger logger = LoggerFactory.getLogger(UpdatedManifestStatusDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, UpdatedManifestStatus updatedManifestStatus) throws SQLException {
		
		if (updatedManifestStatus.getId() != null) {
			ps.setLong(1, updatedManifestStatus.getId());
		} else {
			ps.setNull(1, java.sql.Types.BIGINT);
		}

		if (updatedManifestStatus.getId2() != null) {
			ps.setInt(2, updatedManifestStatus.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (updatedManifestStatus.getReceivedControlNumber() != null) {
			ps.setString(3, updatedManifestStatus.getReceivedControlNumber());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (updatedManifestStatus.getMasterAirWaybill() != null) {
			ps.setString(4, updatedManifestStatus.getMasterAirWaybill());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (updatedManifestStatus.getHouseAirWaybill() != null) {
			ps.setString(5, updatedManifestStatus.getHouseAirWaybill());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (updatedManifestStatus.getFlightNo() != null) {
			ps.setString(6, updatedManifestStatus.getFlightNo());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (updatedManifestStatus.getFlightDate() != null) {
			ps.setTimestamp(7, new java.sql.Timestamp(updatedManifestStatus.getFlightDate().getTime()));
		} else {
			ps.setNull(7, java.sql.Types.DATE);
		}

		if (updatedManifestStatus.getStatus() != null) {
			ps.setString(8, updatedManifestStatus.getStatus());
		} else {
			ps.setNull(8, java.sql.Types.VARCHAR);
		}

		if (updatedManifestStatus.getRemark() != null) {
			ps.setString(9, updatedManifestStatus.getRemark());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (updatedManifestStatus.getStatusDateTime() != null) {
			ps.setTimestamp(10, new java.sql.Timestamp(updatedManifestStatus.getStatusDateTime().getTime()));
		} else {
			ps.setNull(10, java.sql.Types.TIMESTAMP);
		}

	}

		
	private static UpdatedManifestStatus createInstanceFromResultSet(ResultSet rs) throws SQLException {
		UpdatedManifestStatus updatedManifestStatus = new UpdatedManifestStatus();
		
		Long col1 = rs.getLong("id");
		updatedManifestStatus.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		updatedManifestStatus.setId2(rs.wasNull() ? null : col2);

		String col3 = rs.getString("received_control_number");
		updatedManifestStatus.setReceivedControlNumber(rs.wasNull() ? null : col3);

		String col4 = rs.getString("master_air_waybill");
		updatedManifestStatus.setMasterAirWaybill(rs.wasNull() ? null : col4);

		String col5 = rs.getString("house_air_waybill");
		updatedManifestStatus.setHouseAirWaybill(rs.wasNull() ? null : col5);

		String col6 = rs.getString("flight_no");
		updatedManifestStatus.setFlightNo(rs.wasNull() ? null : col6);

		java.sql.Timestamp col7 = rs.getTimestamp("flight_date");
		updatedManifestStatus.setFlightDate(rs.wasNull() ? null : new java.util.Date(col7.getTime()));

		String col8 = rs.getString("status");
		updatedManifestStatus.setStatus(rs.wasNull() ? null : col8);

		String col9 = rs.getString("remark");
		updatedManifestStatus.setRemark(rs.wasNull() ? null : col9);

		java.sql.Timestamp col10 = rs.getTimestamp("status_date_time");
		updatedManifestStatus.setStatusDateTime(rs.wasNull() ? null : new java.util.Date(col10.getTime()));


		return updatedManifestStatus;
	}  

		
	@Override
	public long insert(UpdatedManifestStatus updatedManifestStatus) throws DaoException {
		if (updatedManifestStatus == null) {
			throw new DaoException("Cannot insert di_updated_manifest_status with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into di_updated_manifest_status(`id`,`id2`,`received_control_number`,`master_air_waybill`,`house_air_waybill`,`flight_no`,`flight_date`,`status`,`remark`,`status_date_time`) values(?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            UpdatedManifestStatusDaoImpl.setPreparedStatementValues(ps, updatedManifestStatus);
			ps.setNull(1, java.sql.Types.BIGINT);
            ps.execute();
			long id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getLong(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT di_updated_manifest_status[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public long count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from di_updated_manifest_status");
			
			long count = -1;
			if (rs.next()) { 
				count = rs.getLong(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT di_updated_manifest_status => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public UpdatedManifestStatus findById(Long id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`received_control_number`,`master_air_waybill`,`house_air_waybill`,`flight_no`,`flight_date`,`status`,`remark`,`status_date_time` from di_updated_manifest_status where id=?");
            ps.setLong(1, id);
            
            logger.debug("DB:FIND di_updated_manifest_status[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            UpdatedManifestStatus instance = null;
            if (rs.next()) {
                instance = UpdatedManifestStatusDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(UpdatedManifestStatus updatedManifestStatus) throws DaoException {
		if (updatedManifestStatus == null) {
			throw new DaoException("Cannot insert di_updated_manifest_status with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update di_updated_manifest_status set `id`=?,`id2`=?,`received_control_number`=?,`master_air_waybill`=?,`house_air_waybill`=?,`flight_no`=?,`flight_date`=?,`status`=?,`remark`=?,`status_date_time`=? where id=?");
            UpdatedManifestStatusDaoImpl.setPreparedStatementValues(ps, updatedManifestStatus);
            ps.setLong(11, updatedManifestStatus.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE di_updated_manifest_status[id=" + updatedManifestStatus.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Long id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from di_updated_manifest_status where id=?");
            ps.setLong(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE di_updated_manifest_status[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(UpdatedManifestStatusExample updatedManifestStatusExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (UpdatedManifestStatusExample.Criteria criteria : updatedManifestStatusExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (UpdatedManifestStatusExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (updatedManifestStatusExample.getOrderByClause() != null && !updatedManifestStatusExample.getOrderByClause().isEmpty()) {
			clause += " order by " + updatedManifestStatusExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public long countByUpdatedManifestStatusExample(UpdatedManifestStatusExample updatedManifestStatusExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = UpdatedManifestStatusDaoImpl.buildClause(updatedManifestStatusExample);			
            ResultSet rs = stmt.executeQuery("select" + (updatedManifestStatusExample.isDistinct() ? " distinct " : " ") + "count(*) from di_updated_manifest_status" + clause);
            long count = -1;
            if (rs.next()) {
            	count = rs.getLong(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT di_updated_manifest_status[distinct=" + updatedManifestStatusExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public UpdatedManifestStatus findByUpdatedManifestStatusExample(UpdatedManifestStatusExample updatedManifestStatusExample) throws DaoException {
		List<UpdatedManifestStatus> res = this.findAllByUpdatedManifestStatusExample(updatedManifestStatusExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<UpdatedManifestStatus> findAllByUpdatedManifestStatusExample(UpdatedManifestStatusExample updatedManifestStatusExample) throws DaoException {
    	return this.findAllByUpdatedManifestStatusExample(updatedManifestStatusExample, 0, 2000);
    }
    
    @Override
    public List<UpdatedManifestStatus> findAllByUpdatedManifestStatusExample(UpdatedManifestStatusExample updatedManifestStatusExample, int limit) throws DaoException {
    	return this.findAllByUpdatedManifestStatusExample(updatedManifestStatusExample, 0, limit);
    }
    
    @Override
    public List<UpdatedManifestStatus> findAllByUpdatedManifestStatusExample(UpdatedManifestStatusExample updatedManifestStatusExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = UpdatedManifestStatusDaoImpl.buildClause(updatedManifestStatusExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND di_updated_manifest_status[distinct=" + updatedManifestStatusExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (updatedManifestStatusExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`received_control_number`,`master_air_waybill`,`house_air_waybill`,`flight_no`,`flight_date`,`status`,`remark`,`status_date_time` from di_updated_manifest_status" + clause);

            List<UpdatedManifestStatus> list = new ArrayList<UpdatedManifestStatus>();
            while (rs.next()) {
                list.add(UpdatedManifestStatusDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
