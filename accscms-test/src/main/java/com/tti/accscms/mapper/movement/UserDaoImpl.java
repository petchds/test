package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.UserDao;

import com.tti.accscms.domain.movement.User;
import com.tti.accscms.domain.movement.UserExample;
import com.tti.accscms.domain.movement.Role;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table user
 */
public class UserDaoImpl implements UserDao {

	private static final Logger logger = LoggerFactory.getLogger(UserDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, User user) throws SQLException {
		
		if (user.getId() != null) {
			ps.setInt(1, user.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (user.getId2() != null) {
			ps.setInt(2, user.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (user.getUsername() != null) {
			ps.setString(3, user.getUsername());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (user.getPassword() != null) {
			ps.setString(4, user.getPassword());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (user.getEmail() != null) {
			ps.setString(5, user.getEmail());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (user.getActivate() != null) {
			ps.setInt(6, user.getActivate());
		} else {
			ps.setNull(6, java.sql.Types.INTEGER);
		}

		if (user.getAccessId() != null) {
			ps.setInt(7, user.getAccessId());
		} else {
			ps.setNull(7, java.sql.Types.INTEGER);
		}

		if (user.getFirstname() != null) {
			ps.setString(8, user.getFirstname());
		} else {
			ps.setNull(8, java.sql.Types.VARCHAR);
		}

		if (user.getLastname() != null) {
			ps.setString(9, user.getLastname());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (user.getPhoneNo() != null) {
			ps.setString(10, user.getPhoneNo());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (user.getModifiedDate() != null) {
			ps.setTimestamp(11, new java.sql.Timestamp(user.getModifiedDate().getTime()));
		} else {
			ps.setTimestamp(11, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (user.getRole() != null) {
			ps.setString(12, user.getRole());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

	}

		
	private static User createInstanceFromResultSet(ResultSet rs) throws SQLException {
		User user = new User();
		
		Integer col1 = rs.getInt("id");
		user.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		user.setId2(rs.wasNull() ? null : col2);

		String col3 = rs.getString("username");
		user.setUsername(rs.wasNull() ? null : col3);

		String col4 = rs.getString("password");
		user.setPassword(rs.wasNull() ? null : col4);

		String col5 = rs.getString("email");
		user.setEmail(rs.wasNull() ? null : col5);

		Integer col6 = rs.getInt("activate");
		user.setActivate(rs.wasNull() ? null : col6);

		Integer col7 = rs.getInt("access_id");
		user.setAccessId(rs.wasNull() ? null : col7);

		String col8 = rs.getString("firstname");
		user.setFirstname(rs.wasNull() ? null : col8);

		String col9 = rs.getString("lastname");
		user.setLastname(rs.wasNull() ? null : col9);

		String col10 = rs.getString("phone_no");
		user.setPhoneNo(rs.wasNull() ? null : col10);

		java.sql.Timestamp col11 = rs.getTimestamp("modified_date");
		user.setModifiedDate(rs.wasNull() ? null : new java.util.Date(col11.getTime()));

		String col12 = rs.getString("role");
		user.setRole(rs.wasNull() ? null : col12);


		return user;
	}  

		
	@Override
	public int insert(User user) throws DaoException {
		if (user == null) {
			throw new DaoException("Cannot insert user with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into user(`id`,`id2`,`username`,`password`,`email`,`activate`,`access_id`,`firstname`,`lastname`,`phone_no`,`modified_date`,`role`) values(?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            UserDaoImpl.setPreparedStatementValues(ps, user);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT user[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from user");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT user => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public User findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`username`,`password`,`email`,`activate`,`access_id`,`firstname`,`lastname`,`phone_no`,`modified_date`,`role` from user where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND user[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            User instance = null;
            if (rs.next()) {
                instance = UserDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(User user) throws DaoException {
		if (user == null) {
			throw new DaoException("Cannot insert user with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update user set `id`=?,`id2`=?,`username`=?,`password`=?,`email`=?,`activate`=?,`access_id`=?,`firstname`=?,`lastname`=?,`phone_no`=?,`modified_date`=?,`role`=? where id=?");
            UserDaoImpl.setPreparedStatementValues(ps, user);
            ps.setInt(13, user.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE user[id=" + user.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from user where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE user[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
	@Override
	public List<User> findAllByRole(Role role) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = null;
            if (role == null || role.getId() == null) {
            	ps = conn.prepareStatement("select `id`,`id2`,`username`,`password`,`email`,`activate`,`access_id`,`firstname`,`lastname`,`phone_no`,`modified_date`,`role` from user where access_id=null");
            } else {
            	ps = conn.prepareStatement("select `id`,`id2`,`username`,`password`,`email`,`activate`,`access_id`,`firstname`,`lastname`,`phone_no`,`modified_date`,`role` from user where access_id=?");
            	ps.setInt(1, role.getId());
            }
            
            logger.debug("DB:FIND user[access_id=" + (role != null ? role.getId() : "null") + "]");
            
            ResultSet rs = ps.executeQuery();

            List<User> list = new ArrayList<User>();
            while (rs.next()) {
                list.add(UserDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            ps.close();

            return list;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

		
	private static String buildClause(UserExample userExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (UserExample.Criteria criteria : userExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (UserExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (userExample.getOrderByClause() != null && !userExample.getOrderByClause().isEmpty()) {
			clause += " order by " + userExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByUserExample(UserExample userExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = UserDaoImpl.buildClause(userExample);			
            ResultSet rs = stmt.executeQuery("select" + (userExample.isDistinct() ? " distinct " : " ") + "count(*) from user" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT user[distinct=" + userExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public User findByUserExample(UserExample userExample) throws DaoException {
		List<User> res = this.findAllByUserExample(userExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<User> findAllByUserExample(UserExample userExample) throws DaoException {
    	return this.findAllByUserExample(userExample, 0, 2000);
    }
    
    @Override
    public List<User> findAllByUserExample(UserExample userExample, int limit) throws DaoException {
    	return this.findAllByUserExample(userExample, 0, limit);
    }
    
    @Override
    public List<User> findAllByUserExample(UserExample userExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = UserDaoImpl.buildClause(userExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND user[distinct=" + userExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (userExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`username`,`password`,`email`,`activate`,`access_id`,`firstname`,`lastname`,`phone_no`,`modified_date`,`role` from user" + clause);

            List<User> list = new ArrayList<User>();
            while (rs.next()) {
                list.add(UserDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
