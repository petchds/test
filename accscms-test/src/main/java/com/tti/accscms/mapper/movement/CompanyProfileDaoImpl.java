package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.CompanyProfileDao;

import com.tti.accscms.domain.movement.CompanyProfile;
import com.tti.accscms.domain.movement.CompanyProfileExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table company_profile
 */
public class CompanyProfileDaoImpl implements CompanyProfileDao {

	private static final Logger logger = LoggerFactory.getLogger(CompanyProfileDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, CompanyProfile companyProfile) throws SQLException {
		
		if (companyProfile.getId() != null) {
			ps.setInt(1, companyProfile.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (companyProfile.getId2() != null) {
			ps.setInt(2, companyProfile.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (companyProfile.getCompanyType() != null) {
			ps.setString(3, companyProfile.getCompanyType());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getCompanyCode() != null) {
			ps.setString(4, companyProfile.getCompanyCode());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getTaxIncentivesIdOfFactory() != null) {
			ps.setString(5, companyProfile.getTaxIncentivesIdOfFactory());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getCompanyTaxNo() != null) {
			ps.setString(6, companyProfile.getCompanyTaxNo());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getThaiCompanyName() != null) {
			ps.setString(7, companyProfile.getThaiCompanyName());
		} else {
			ps.setNull(7, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getEnglishCompanyName() != null) {
			ps.setString(8, companyProfile.getEnglishCompanyName());
		} else {
			ps.setNull(8, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getAddress() != null) {
			ps.setString(9, companyProfile.getAddress());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getDistrict() != null) {
			ps.setString(10, companyProfile.getDistrict());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getSubProvince() != null) {
			ps.setString(11, companyProfile.getSubProvince());
		} else {
			ps.setNull(11, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getProvince() != null) {
			ps.setString(12, companyProfile.getProvince());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getPostcode() != null) {
			ps.setString(13, companyProfile.getPostcode());
		} else {
			ps.setNull(13, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getFaxNo() != null) {
			ps.setString(14, companyProfile.getFaxNo());
		} else {
			ps.setNull(14, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getPhoneNo() != null) {
			ps.setString(15, companyProfile.getPhoneNo());
		} else {
			ps.setNull(15, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getCompanyBranchOfFactory() != null) {
			ps.setString(16, companyProfile.getCompanyBranchOfFactory());
		} else {
			ps.setNull(16, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getWarehouseNo() != null) {
			ps.setString(17, companyProfile.getWarehouseNo());
		} else {
			ps.setNull(17, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getRoomNo() != null) {
			ps.setString(18, companyProfile.getRoomNo());
		} else {
			ps.setNull(18, java.sql.Types.VARCHAR);
		}

		if (companyProfile.getModifiedDate() != null) {
			ps.setTimestamp(19, new java.sql.Timestamp(companyProfile.getModifiedDate().getTime()));
		} else {
			ps.setTimestamp(19, new java.sql.Timestamp(System.currentTimeMillis()));
		}

	}

		
	private static CompanyProfile createInstanceFromResultSet(ResultSet rs) throws SQLException {
		CompanyProfile companyProfile = new CompanyProfile();
		
		Integer col1 = rs.getInt("id");
		companyProfile.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		companyProfile.setId2(rs.wasNull() ? null : col2);

		String col3 = rs.getString("company_type");
		companyProfile.setCompanyType(rs.wasNull() ? null : col3);

		String col4 = rs.getString("company_code");
		companyProfile.setCompanyCode(rs.wasNull() ? null : col4);

		String col5 = rs.getString("tax_incentives_id_of_factory");
		companyProfile.setTaxIncentivesIdOfFactory(rs.wasNull() ? null : col5);

		String col6 = rs.getString("company_tax_no");
		companyProfile.setCompanyTaxNo(rs.wasNull() ? null : col6);

		String col7 = rs.getString("thai_company_name");
		companyProfile.setThaiCompanyName(rs.wasNull() ? null : col7);

		String col8 = rs.getString("english_company_name");
		companyProfile.setEnglishCompanyName(rs.wasNull() ? null : col8);

		String col9 = rs.getString("address");
		companyProfile.setAddress(rs.wasNull() ? null : col9);

		String col10 = rs.getString("district");
		companyProfile.setDistrict(rs.wasNull() ? null : col10);

		String col11 = rs.getString("sub_province");
		companyProfile.setSubProvince(rs.wasNull() ? null : col11);

		String col12 = rs.getString("province");
		companyProfile.setProvince(rs.wasNull() ? null : col12);

		String col13 = rs.getString("postcode");
		companyProfile.setPostcode(rs.wasNull() ? null : col13);

		String col14 = rs.getString("fax_no");
		companyProfile.setFaxNo(rs.wasNull() ? null : col14);

		String col15 = rs.getString("phone_no");
		companyProfile.setPhoneNo(rs.wasNull() ? null : col15);

		String col16 = rs.getString("company_branch_of_factory");
		companyProfile.setCompanyBranchOfFactory(rs.wasNull() ? null : col16);

		String col17 = rs.getString("warehouse_no");
		companyProfile.setWarehouseNo(rs.wasNull() ? null : col17);

		String col18 = rs.getString("room_no");
		companyProfile.setRoomNo(rs.wasNull() ? null : col18);

		java.sql.Timestamp col19 = rs.getTimestamp("modified_date");
		companyProfile.setModifiedDate(rs.wasNull() ? null : new java.util.Date(col19.getTime()));


		return companyProfile;
	}  

		
	@Override
	public int insert(CompanyProfile companyProfile) throws DaoException {
		if (companyProfile == null) {
			throw new DaoException("Cannot insert company_profile with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into company_profile(`id`,`id2`,`company_type`,`company_code`,`tax_incentives_id_of_factory`,`company_tax_no`,`thai_company_name`,`english_company_name`,`address`,`district`,`sub_province`,`province`,`postcode`,`fax_no`,`phone_no`,`company_branch_of_factory`,`warehouse_no`,`room_no`,`modified_date`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            CompanyProfileDaoImpl.setPreparedStatementValues(ps, companyProfile);
            ps.execute();
			ps.close();

			logger.info("DB:INSERT company_profile[id=" + companyProfile.getId() + "]");

			return companyProfile.getId();
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from company_profile");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT company_profile => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public CompanyProfile findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`company_type`,`company_code`,`tax_incentives_id_of_factory`,`company_tax_no`,`thai_company_name`,`english_company_name`,`address`,`district`,`sub_province`,`province`,`postcode`,`fax_no`,`phone_no`,`company_branch_of_factory`,`warehouse_no`,`room_no`,`modified_date` from company_profile where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND company_profile[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            CompanyProfile instance = null;
            if (rs.next()) {
                instance = CompanyProfileDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(CompanyProfile companyProfile) throws DaoException {
		if (companyProfile == null) {
			throw new DaoException("Cannot insert company_profile with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update company_profile set `id`=?,`id2`=?,`company_type`=?,`company_code`=?,`tax_incentives_id_of_factory`=?,`company_tax_no`=?,`thai_company_name`=?,`english_company_name`=?,`address`=?,`district`=?,`sub_province`=?,`province`=?,`postcode`=?,`fax_no`=?,`phone_no`=?,`company_branch_of_factory`=?,`warehouse_no`=?,`room_no`=?,`modified_date`=? where id=?");
            CompanyProfileDaoImpl.setPreparedStatementValues(ps, companyProfile);
            ps.setInt(20, companyProfile.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE company_profile[id=" + companyProfile.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from company_profile where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE company_profile[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(CompanyProfileExample companyProfileExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (CompanyProfileExample.Criteria criteria : companyProfileExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (CompanyProfileExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (companyProfileExample.getOrderByClause() != null && !companyProfileExample.getOrderByClause().isEmpty()) {
			clause += " order by " + companyProfileExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByCompanyProfileExample(CompanyProfileExample companyProfileExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = CompanyProfileDaoImpl.buildClause(companyProfileExample);			
            ResultSet rs = stmt.executeQuery("select" + (companyProfileExample.isDistinct() ? " distinct " : " ") + "count(*) from company_profile" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT company_profile[distinct=" + companyProfileExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public CompanyProfile findByCompanyProfileExample(CompanyProfileExample companyProfileExample) throws DaoException {
		List<CompanyProfile> res = this.findAllByCompanyProfileExample(companyProfileExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<CompanyProfile> findAllByCompanyProfileExample(CompanyProfileExample companyProfileExample) throws DaoException {
    	return this.findAllByCompanyProfileExample(companyProfileExample, 0, 2000);
    }
    
    @Override
    public List<CompanyProfile> findAllByCompanyProfileExample(CompanyProfileExample companyProfileExample, int limit) throws DaoException {
    	return this.findAllByCompanyProfileExample(companyProfileExample, 0, limit);
    }
    
    @Override
    public List<CompanyProfile> findAllByCompanyProfileExample(CompanyProfileExample companyProfileExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = CompanyProfileDaoImpl.buildClause(companyProfileExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND company_profile[distinct=" + companyProfileExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (companyProfileExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`company_type`,`company_code`,`tax_incentives_id_of_factory`,`company_tax_no`,`thai_company_name`,`english_company_name`,`address`,`district`,`sub_province`,`province`,`postcode`,`fax_no`,`phone_no`,`company_branch_of_factory`,`warehouse_no`,`room_no`,`modified_date` from company_profile" + clause);

            List<CompanyProfile> list = new ArrayList<CompanyProfile>();
            while (rs.next()) {
                list.add(CompanyProfileDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
