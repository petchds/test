package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.ShipmentSearchCondition1Dao;

import com.tti.accscms.domain.movement.ShipmentSearchCondition1;
import com.tti.accscms.domain.movement.ShipmentSearchCondition1Example;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table shipment_search_condition_1
 */
public class ShipmentSearchCondition1DaoImpl implements ShipmentSearchCondition1Dao {

	private static final Logger logger = LoggerFactory.getLogger(ShipmentSearchCondition1DaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, ShipmentSearchCondition1 shipmentSearchCondition1) throws SQLException {
		
		if (shipmentSearchCondition1.getId() != null) {
			ps.setInt(1, shipmentSearchCondition1.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (shipmentSearchCondition1.getStatus() != null) {
			ps.setString(2, shipmentSearchCondition1.getStatus());
		} else {
			ps.setNull(2, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition1.getFlightNo() != null) {
			ps.setString(3, shipmentSearchCondition1.getFlightNo());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition1.getFlightDate() != null) {
			ps.setTimestamp(4, new java.sql.Timestamp(shipmentSearchCondition1.getFlightDate().getTime()));
		} else {
			ps.setNull(4, java.sql.Types.DATE);
		}

		if (shipmentSearchCondition1.getMawb() != null) {
			ps.setString(5, shipmentSearchCondition1.getMawb());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition1.getHawb() != null) {
			ps.setString(6, shipmentSearchCondition1.getHawb());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition1.getShedNo() != null) {
			ps.setInt(7, shipmentSearchCondition1.getShedNo());
		} else {
			ps.setNull(7, java.sql.Types.INTEGER);
		}

		if (shipmentSearchCondition1.getGoodsDescription() != null) {
			ps.setString(8, shipmentSearchCondition1.getGoodsDescription());
		} else {
			ps.setNull(8, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition1.getTotalGrossWeight() != null) {
			ps.setDouble(9, shipmentSearchCondition1.getTotalGrossWeight());
		} else {
			ps.setNull(9, java.sql.Types.DOUBLE);
		}

		if (shipmentSearchCondition1.getTotalGrossWeightUnit() != null) {
			ps.setString(10, shipmentSearchCondition1.getTotalGrossWeightUnit());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition1.getTotalNumberOfPackage() != null) {
			ps.setInt(11, shipmentSearchCondition1.getTotalNumberOfPackage());
		} else {
			ps.setNull(11, java.sql.Types.INTEGER);
		}

		if (shipmentSearchCondition1.getTotalNumberOfPackageUnit() != null) {
			ps.setString(12, shipmentSearchCondition1.getTotalNumberOfPackageUnit());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

	}

		
	private static ShipmentSearchCondition1 createInstanceFromResultSet(ResultSet rs) throws SQLException {
		ShipmentSearchCondition1 shipmentSearchCondition1 = new ShipmentSearchCondition1();
		
		Integer col1 = rs.getInt("id");
		shipmentSearchCondition1.setId(rs.wasNull() ? null : col1);

		String col2 = rs.getString("status");
		shipmentSearchCondition1.setStatus(rs.wasNull() ? null : col2);

		String col3 = rs.getString("flight_no");
		shipmentSearchCondition1.setFlightNo(rs.wasNull() ? null : col3);

		java.sql.Timestamp col4 = rs.getTimestamp("flight_date");
		shipmentSearchCondition1.setFlightDate(rs.wasNull() ? null : new java.util.Date(col4.getTime()));

		String col5 = rs.getString("mawb");
		shipmentSearchCondition1.setMawb(rs.wasNull() ? null : col5);

		String col6 = rs.getString("hawb");
		shipmentSearchCondition1.setHawb(rs.wasNull() ? null : col6);

		Integer col7 = rs.getInt("shed_no");
		shipmentSearchCondition1.setShedNo(rs.wasNull() ? null : col7);

		String col8 = rs.getString("goods_description");
		shipmentSearchCondition1.setGoodsDescription(rs.wasNull() ? null : col8);

		Double col9 = rs.getDouble("total_gross_weight");
		shipmentSearchCondition1.setTotalGrossWeight(rs.wasNull() ? null : col9);

		String col10 = rs.getString("total_gross_weight_unit");
		shipmentSearchCondition1.setTotalGrossWeightUnit(rs.wasNull() ? null : col10);

		Integer col11 = rs.getInt("total_number_of_package");
		shipmentSearchCondition1.setTotalNumberOfPackage(rs.wasNull() ? null : col11);

		String col12 = rs.getString("total_number_of_package_unit");
		shipmentSearchCondition1.setTotalNumberOfPackageUnit(rs.wasNull() ? null : col12);


		return shipmentSearchCondition1;
	}  

		
	@Override
	public int insert(ShipmentSearchCondition1 shipmentSearchCondition1) throws DaoException {
		if (shipmentSearchCondition1 == null) {
			throw new DaoException("Cannot insert shipment_search_condition_1 with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into shipment_search_condition_1(`id`,`status`,`flight_no`,`flight_date`,`mawb`,`hawb`,`shed_no`,`goods_description`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`) values(?,?,?,?,?,?,?,?,?,?,?,?)");
            ShipmentSearchCondition1DaoImpl.setPreparedStatementValues(ps, shipmentSearchCondition1);
            ps.execute();
			ps.close();

			logger.info("DB:INSERT shipment_search_condition_1[id=" + shipmentSearchCondition1.getId() + "]");

			return shipmentSearchCondition1.getId();
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from shipment_search_condition_1");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT shipment_search_condition_1 => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public ShipmentSearchCondition1 findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`status`,`flight_no`,`flight_date`,`mawb`,`hawb`,`shed_no`,`goods_description`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit` from shipment_search_condition_1 where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND shipment_search_condition_1[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            ShipmentSearchCondition1 instance = null;
            if (rs.next()) {
                instance = ShipmentSearchCondition1DaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(ShipmentSearchCondition1 shipmentSearchCondition1) throws DaoException {
		if (shipmentSearchCondition1 == null) {
			throw new DaoException("Cannot insert shipment_search_condition_1 with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update shipment_search_condition_1 set `id`=?,`status`=?,`flight_no`=?,`flight_date`=?,`mawb`=?,`hawb`=?,`shed_no`=?,`goods_description`=?,`total_gross_weight`=?,`total_gross_weight_unit`=?,`total_number_of_package`=?,`total_number_of_package_unit`=? where id=?");
            ShipmentSearchCondition1DaoImpl.setPreparedStatementValues(ps, shipmentSearchCondition1);
            ps.setInt(13, shipmentSearchCondition1.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE shipment_search_condition_1[id=" + shipmentSearchCondition1.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from shipment_search_condition_1 where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE shipment_search_condition_1[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(ShipmentSearchCondition1Example shipmentSearchCondition1Example) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (ShipmentSearchCondition1Example.Criteria criteria : shipmentSearchCondition1Example.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (ShipmentSearchCondition1Example.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (shipmentSearchCondition1Example.getOrderByClause() != null && !shipmentSearchCondition1Example.getOrderByClause().isEmpty()) {
			clause += " order by " + shipmentSearchCondition1Example.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByShipmentSearchCondition1Example(ShipmentSearchCondition1Example shipmentSearchCondition1Example) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = ShipmentSearchCondition1DaoImpl.buildClause(shipmentSearchCondition1Example);			
            ResultSet rs = stmt.executeQuery("select" + (shipmentSearchCondition1Example.isDistinct() ? " distinct " : " ") + "count(*) from shipment_search_condition_1" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT shipment_search_condition_1[distinct=" + shipmentSearchCondition1Example.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public ShipmentSearchCondition1 findByShipmentSearchCondition1Example(ShipmentSearchCondition1Example shipmentSearchCondition1Example) throws DaoException {
		List<ShipmentSearchCondition1> res = this.findAllByShipmentSearchCondition1Example(shipmentSearchCondition1Example, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<ShipmentSearchCondition1> findAllByShipmentSearchCondition1Example(ShipmentSearchCondition1Example shipmentSearchCondition1Example) throws DaoException {
    	return this.findAllByShipmentSearchCondition1Example(shipmentSearchCondition1Example, 0, 2000);
    }
    
    @Override
    public List<ShipmentSearchCondition1> findAllByShipmentSearchCondition1Example(ShipmentSearchCondition1Example shipmentSearchCondition1Example, int limit) throws DaoException {
    	return this.findAllByShipmentSearchCondition1Example(shipmentSearchCondition1Example, 0, limit);
    }
    
    @Override
    public List<ShipmentSearchCondition1> findAllByShipmentSearchCondition1Example(ShipmentSearchCondition1Example shipmentSearchCondition1Example, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = ShipmentSearchCondition1DaoImpl.buildClause(shipmentSearchCondition1Example) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND shipment_search_condition_1[distinct=" + shipmentSearchCondition1Example.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (shipmentSearchCondition1Example.isDistinct() ? " distinct " : " ") + "`id`,`status`,`flight_no`,`flight_date`,`mawb`,`hawb`,`shed_no`,`goods_description`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit` from shipment_search_condition_1" + clause);

            List<ShipmentSearchCondition1> list = new ArrayList<ShipmentSearchCondition1>();
            while (rs.next()) {
                list.add(ShipmentSearchCondition1DaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
