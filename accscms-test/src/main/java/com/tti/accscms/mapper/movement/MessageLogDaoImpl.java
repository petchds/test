package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.MessageLogDao;

import com.tti.accscms.domain.movement.MessageLog;
import com.tti.accscms.domain.movement.MessageLogExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table message_log
 */
public class MessageLogDaoImpl implements MessageLogDao {

	private static final Logger logger = LoggerFactory.getLogger(MessageLogDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, MessageLog messageLog) throws SQLException {
		
		if (messageLog.getId() != null) {
			ps.setLong(1, messageLog.getId());
		} else {
			ps.setNull(1, java.sql.Types.BIGINT);
		}

		if (messageLog.getId2() != null) {
			ps.setInt(2, messageLog.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (messageLog.getSender() != null) {
			ps.setString(3, messageLog.getSender());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (messageLog.getReceiver() != null) {
			ps.setString(4, messageLog.getReceiver());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (messageLog.getStatus() != null) {
			ps.setString(5, messageLog.getStatus());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (messageLog.getMessageName() != null) {
			ps.setString(6, messageLog.getMessageName());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (messageLog.getSendDatetime() != null) {
			ps.setTimestamp(7, new java.sql.Timestamp(messageLog.getSendDatetime().getTime()));
		} else {
			ps.setNull(7, java.sql.Types.TIMESTAMP);
		}

		if (messageLog.getRecieveDatetime() != null) {
			ps.setTimestamp(8, new java.sql.Timestamp(messageLog.getRecieveDatetime().getTime()));
		} else {
			ps.setNull(8, java.sql.Types.TIMESTAMP);
		}

		if (messageLog.getReferenceNo() != null) {
			ps.setString(9, messageLog.getReferenceNo());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (messageLog.getRequestNo() != null) {
			ps.setString(10, messageLog.getRequestNo());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (messageLog.getDeclarationNo() != null) {
			ps.setString(11, messageLog.getDeclarationNo());
		} else {
			ps.setNull(11, java.sql.Types.VARCHAR);
		}

		if (messageLog.getMawb() != null) {
			ps.setString(12, messageLog.getMawb());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (messageLog.getHawb() != null) {
			ps.setString(13, messageLog.getHawb());
		} else {
			ps.setNull(13, java.sql.Types.VARCHAR);
		}

		if (messageLog.getSendDataPath() != null) {
			ps.setString(14, messageLog.getSendDataPath());
		} else {
			ps.setNull(14, java.sql.Types.VARCHAR);
		}

		if (messageLog.getReceiveDataPath() != null) {
			ps.setString(15, messageLog.getReceiveDataPath());
		} else {
			ps.setNull(15, java.sql.Types.VARCHAR);
		}

	}

		
	private static MessageLog createInstanceFromResultSet(ResultSet rs) throws SQLException {
		MessageLog messageLog = new MessageLog();
		
		Long col1 = rs.getLong("id");
		messageLog.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		messageLog.setId2(rs.wasNull() ? null : col2);

		String col3 = rs.getString("sender");
		messageLog.setSender(rs.wasNull() ? null : col3);

		String col4 = rs.getString("receiver");
		messageLog.setReceiver(rs.wasNull() ? null : col4);

		String col5 = rs.getString("status");
		messageLog.setStatus(rs.wasNull() ? null : col5);

		String col6 = rs.getString("message_name");
		messageLog.setMessageName(rs.wasNull() ? null : col6);

		java.sql.Timestamp col7 = rs.getTimestamp("send_datetime");
		messageLog.setSendDatetime(rs.wasNull() ? null : new java.util.Date(col7.getTime()));

		java.sql.Timestamp col8 = rs.getTimestamp("recieve_datetime");
		messageLog.setRecieveDatetime(rs.wasNull() ? null : new java.util.Date(col8.getTime()));

		String col9 = rs.getString("reference_no");
		messageLog.setReferenceNo(rs.wasNull() ? null : col9);

		String col10 = rs.getString("request_no");
		messageLog.setRequestNo(rs.wasNull() ? null : col10);

		String col11 = rs.getString("declaration_no");
		messageLog.setDeclarationNo(rs.wasNull() ? null : col11);

		String col12 = rs.getString("mawb");
		messageLog.setMawb(rs.wasNull() ? null : col12);

		String col13 = rs.getString("hawb");
		messageLog.setHawb(rs.wasNull() ? null : col13);

		String col14 = rs.getString("send_data_path");
		messageLog.setSendDataPath(rs.wasNull() ? null : col14);

		String col15 = rs.getString("receive_data_path");
		messageLog.setReceiveDataPath(rs.wasNull() ? null : col15);


		return messageLog;
	}  

		
	@Override
	public long insert(MessageLog messageLog) throws DaoException {
		if (messageLog == null) {
			throw new DaoException("Cannot insert message_log with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into message_log(`id`,`id2`,`sender`,`receiver`,`status`,`message_name`,`send_datetime`,`recieve_datetime`,`reference_no`,`request_no`,`declaration_no`,`mawb`,`hawb`,`send_data_path`,`receive_data_path`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            MessageLogDaoImpl.setPreparedStatementValues(ps, messageLog);
			ps.setNull(1, java.sql.Types.BIGINT);
            ps.execute();
			long id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getLong(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT message_log[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public long count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from message_log");
			
			long count = -1;
			if (rs.next()) { 
				count = rs.getLong(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT message_log => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public MessageLog findById(Long id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`sender`,`receiver`,`status`,`message_name`,`send_datetime`,`recieve_datetime`,`reference_no`,`request_no`,`declaration_no`,`mawb`,`hawb`,`send_data_path`,`receive_data_path` from message_log where id=?");
            ps.setLong(1, id);
            
            logger.debug("DB:FIND message_log[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            MessageLog instance = null;
            if (rs.next()) {
                instance = MessageLogDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(MessageLog messageLog) throws DaoException {
		if (messageLog == null) {
			throw new DaoException("Cannot insert message_log with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update message_log set `id`=?,`id2`=?,`sender`=?,`receiver`=?,`status`=?,`message_name`=?,`send_datetime`=?,`recieve_datetime`=?,`reference_no`=?,`request_no`=?,`declaration_no`=?,`mawb`=?,`hawb`=?,`send_data_path`=?,`receive_data_path`=? where id=?");
            MessageLogDaoImpl.setPreparedStatementValues(ps, messageLog);
            ps.setLong(16, messageLog.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE message_log[id=" + messageLog.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Long id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from message_log where id=?");
            ps.setLong(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE message_log[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(MessageLogExample messageLogExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (MessageLogExample.Criteria criteria : messageLogExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (MessageLogExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (messageLogExample.getOrderByClause() != null && !messageLogExample.getOrderByClause().isEmpty()) {
			clause += " order by " + messageLogExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public long countByMessageLogExample(MessageLogExample messageLogExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = MessageLogDaoImpl.buildClause(messageLogExample);			
            ResultSet rs = stmt.executeQuery("select" + (messageLogExample.isDistinct() ? " distinct " : " ") + "count(*) from message_log" + clause);
            long count = -1;
            if (rs.next()) {
            	count = rs.getLong(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT message_log[distinct=" + messageLogExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public MessageLog findByMessageLogExample(MessageLogExample messageLogExample) throws DaoException {
		List<MessageLog> res = this.findAllByMessageLogExample(messageLogExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<MessageLog> findAllByMessageLogExample(MessageLogExample messageLogExample) throws DaoException {
    	return this.findAllByMessageLogExample(messageLogExample, 0, 2000);
    }
    
    @Override
    public List<MessageLog> findAllByMessageLogExample(MessageLogExample messageLogExample, int limit) throws DaoException {
    	return this.findAllByMessageLogExample(messageLogExample, 0, limit);
    }
    
    @Override
    public List<MessageLog> findAllByMessageLogExample(MessageLogExample messageLogExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = MessageLogDaoImpl.buildClause(messageLogExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND message_log[distinct=" + messageLogExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (messageLogExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`sender`,`receiver`,`status`,`message_name`,`send_datetime`,`recieve_datetime`,`reference_no`,`request_no`,`declaration_no`,`mawb`,`hawb`,`send_data_path`,`receive_data_path` from message_log" + clause);

            List<MessageLog> list = new ArrayList<MessageLog>();
            while (rs.next()) {
                list.add(MessageLogDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
