package com.tti.accscms.mapper.manifest;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.manifest.VesselScheduleDetailDao;

import com.tti.accscms.domain.manifest.VesselScheduleDetail;
import com.tti.accscms.domain.manifest.VesselScheduleDetailExample;
import com.tti.accscms.domain.manifest.VesselScheduleControl;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table vsed_detail
 */
public class VesselScheduleDetailDaoImpl implements VesselScheduleDetailDao {

	private static final Logger logger = LoggerFactory.getLogger(VesselScheduleDetailDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, VesselScheduleDetail vesselScheduleDetail) throws SQLException {
		
		if (vesselScheduleDetail.getId() != null) {
			ps.setInt(1, vesselScheduleDetail.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (vesselScheduleDetail.getId2() != null) {
			ps.setInt(2, vesselScheduleDetail.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (vesselScheduleDetail.getVsedControlId() != null) {
			ps.setInt(3, vesselScheduleDetail.getVsedControlId());
		} else {
			ps.setNull(3, java.sql.Types.INTEGER);
		}

		if (vesselScheduleDetail.getReceivedControlNumber() != null) {
			ps.setString(4, vesselScheduleDetail.getReceivedControlNumber());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (vesselScheduleDetail.getPortOfDischarge() != null) {
			ps.setString(5, vesselScheduleDetail.getPortOfDischarge());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (vesselScheduleDetail.getFlightNo() != null) {
			ps.setString(6, vesselScheduleDetail.getFlightNo());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (vesselScheduleDetail.getFlightDate() != null) {
			ps.setTimestamp(7, new java.sql.Timestamp(vesselScheduleDetail.getFlightDate().getTime()));
		} else {
			ps.setNull(7, java.sql.Types.DATE);
		}

		if (vesselScheduleDetail.getFlightTime() != null) {
			ps.setTimestamp(8, new java.sql.Timestamp(vesselScheduleDetail.getFlightTime().getTime()));
		} else {
			ps.setNull(8, java.sql.Types.TIME);
		}

		if (vesselScheduleDetail.getEstimateToBerthDate() != null) {
			ps.setTimestamp(9, new java.sql.Timestamp(vesselScheduleDetail.getEstimateToBerthDate().getTime()));
		} else {
			ps.setNull(9, java.sql.Types.DATE);
		}

		if (vesselScheduleDetail.getEstimateToBerthTime() != null) {
			ps.setTimestamp(10, new java.sql.Timestamp(vesselScheduleDetail.getEstimateToBerthTime().getTime()));
		} else {
			ps.setNull(10, java.sql.Types.TIME);
		}

		if (vesselScheduleDetail.getBerth() != null) {
			ps.setString(11, vesselScheduleDetail.getBerth());
		} else {
			ps.setNull(11, java.sql.Types.VARCHAR);
		}

		if (vesselScheduleDetail.getLastPortOfCall() != null) {
			ps.setString(12, vesselScheduleDetail.getLastPortOfCall());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (vesselScheduleDetail.getNumberOfMawb() != null) {
			ps.setInt(13, vesselScheduleDetail.getNumberOfMawb());
		} else {
			ps.setNull(13, java.sql.Types.INTEGER);
		}

		if (vesselScheduleDetail.getNumberOfHawb() != null) {
			ps.setInt(14, vesselScheduleDetail.getNumberOfHawb());
		} else {
			ps.setNull(14, java.sql.Types.INTEGER);
		}

		if (vesselScheduleDetail.getNumberOfContainer() != null) {
			ps.setInt(15, vesselScheduleDetail.getNumberOfContainer());
		} else {
			ps.setNull(15, java.sql.Types.INTEGER);
		}

		if (vesselScheduleDetail.getTotalGrossWeight() != null) {
			ps.setDouble(16, vesselScheduleDetail.getTotalGrossWeight());
		} else {
			ps.setNull(16, java.sql.Types.DOUBLE);
		}

		if (vesselScheduleDetail.getTotalGrossWeightUnit() != null) {
			ps.setString(17, vesselScheduleDetail.getTotalGrossWeightUnit());
		} else {
			ps.setNull(17, java.sql.Types.VARCHAR);
		}

		if (vesselScheduleDetail.getMessageFunction() != null) {
			ps.setString(18, vesselScheduleDetail.getMessageFunction());
		} else {
			ps.setNull(18, java.sql.Types.VARCHAR);
		}

		if (vesselScheduleDetail.getLastEntry() != null) {
			ps.setString(19, vesselScheduleDetail.getLastEntry());
		} else {
			ps.setNull(19, java.sql.Types.VARCHAR);
		}

		if (vesselScheduleDetail.getModifiedDateTime() != null) {
			ps.setTimestamp(20, new java.sql.Timestamp(vesselScheduleDetail.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(20, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (vesselScheduleDetail.getTerminalOperator() != null) {
			ps.setString(21, vesselScheduleDetail.getTerminalOperator());
		} else {
			ps.setNull(21, java.sql.Types.VARCHAR);
		}

		if (vesselScheduleDetail.getType() != null) {
			ps.setInt(22, vesselScheduleDetail.getType());
		} else {
			ps.setNull(22, java.sql.Types.INTEGER);
		}

		if (vesselScheduleDetail.getCloseFlight() != null) {
			ps.setByte(23, vesselScheduleDetail.getCloseFlight());
		} else {
			ps.setNull(23, java.sql.Types.TINYINT);
		}

	}

		
	private static VesselScheduleDetail createInstanceFromResultSet(ResultSet rs) throws SQLException {
		VesselScheduleDetail vesselScheduleDetail = new VesselScheduleDetail();
		
		Integer col1 = rs.getInt("id");
		vesselScheduleDetail.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		vesselScheduleDetail.setId2(rs.wasNull() ? null : col2);

		Integer col3 = rs.getInt("vsed_control_id");
		vesselScheduleDetail.setVsedControlId(rs.wasNull() ? null : col3);

		String col4 = rs.getString("received_control_number");
		vesselScheduleDetail.setReceivedControlNumber(rs.wasNull() ? null : col4);

		String col5 = rs.getString("port_of_discharge");
		vesselScheduleDetail.setPortOfDischarge(rs.wasNull() ? null : col5);

		String col6 = rs.getString("flight_no");
		vesselScheduleDetail.setFlightNo(rs.wasNull() ? null : col6);

		java.sql.Timestamp col7 = rs.getTimestamp("flight_date");
		vesselScheduleDetail.setFlightDate(rs.wasNull() ? null : new java.util.Date(col7.getTime()));

		java.sql.Timestamp col8 = rs.getTimestamp("flight_time");
		vesselScheduleDetail.setFlightTime(rs.wasNull() ? null : new java.util.Date(col8.getTime()));

		java.sql.Timestamp col9 = rs.getTimestamp("estimate_to_berth_date");
		vesselScheduleDetail.setEstimateToBerthDate(rs.wasNull() ? null : new java.util.Date(col9.getTime()));

		java.sql.Timestamp col10 = rs.getTimestamp("estimate_to_berth_time");
		vesselScheduleDetail.setEstimateToBerthTime(rs.wasNull() ? null : new java.util.Date(col10.getTime()));

		String col11 = rs.getString("berth");
		vesselScheduleDetail.setBerth(rs.wasNull() ? null : col11);

		String col12 = rs.getString("last_port_of_call");
		vesselScheduleDetail.setLastPortOfCall(rs.wasNull() ? null : col12);

		Integer col13 = rs.getInt("number_of_mawb");
		vesselScheduleDetail.setNumberOfMawb(rs.wasNull() ? null : col13);

		Integer col14 = rs.getInt("number_of_hawb");
		vesselScheduleDetail.setNumberOfHawb(rs.wasNull() ? null : col14);

		Integer col15 = rs.getInt("number_of_container");
		vesselScheduleDetail.setNumberOfContainer(rs.wasNull() ? null : col15);

		Double col16 = rs.getDouble("total_gross_weight");
		vesselScheduleDetail.setTotalGrossWeight(rs.wasNull() ? null : col16);

		String col17 = rs.getString("total_gross_weight_unit");
		vesselScheduleDetail.setTotalGrossWeightUnit(rs.wasNull() ? null : col17);

		String col18 = rs.getString("message_function");
		vesselScheduleDetail.setMessageFunction(rs.wasNull() ? null : col18);

		String col19 = rs.getString("last_entry");
		vesselScheduleDetail.setLastEntry(rs.wasNull() ? null : col19);

		java.sql.Timestamp col20 = rs.getTimestamp("modified_date_time");
		vesselScheduleDetail.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col20.getTime()));

		String col21 = rs.getString("terminal_operator");
		vesselScheduleDetail.setTerminalOperator(rs.wasNull() ? null : col21);

		Integer col22 = rs.getInt("type");
		vesselScheduleDetail.setType(rs.wasNull() ? null : col22);

		Byte col23 = rs.getByte("close_flight");
		vesselScheduleDetail.setCloseFlight(rs.wasNull() ? null : col23);


		return vesselScheduleDetail;
	}  

		
	@Override
	public int insert(VesselScheduleDetail vesselScheduleDetail) throws DaoException {
		if (vesselScheduleDetail == null) {
			throw new DaoException("Cannot insert vsed_detail with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into vsed_detail(`id`,`id2`,`vsed_control_id`,`received_control_number`,`port_of_discharge`,`flight_no`,`flight_date`,`flight_time`,`estimate_to_berth_date`,`estimate_to_berth_time`,`berth`,`last_port_of_call`,`number_of_mawb`,`number_of_hawb`,`number_of_container`,`total_gross_weight`,`total_gross_weight_unit`,`message_function`,`last_entry`,`modified_date_time`,`terminal_operator`,`type`,`close_flight`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            VesselScheduleDetailDaoImpl.setPreparedStatementValues(ps, vesselScheduleDetail);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT vsed_detail[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from vsed_detail");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT vsed_detail => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public VesselScheduleDetail findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`vsed_control_id`,`received_control_number`,`port_of_discharge`,`flight_no`,`flight_date`,`flight_time`,`estimate_to_berth_date`,`estimate_to_berth_time`,`berth`,`last_port_of_call`,`number_of_mawb`,`number_of_hawb`,`number_of_container`,`total_gross_weight`,`total_gross_weight_unit`,`message_function`,`last_entry`,`modified_date_time`,`terminal_operator`,`type`,`close_flight` from vsed_detail where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND vsed_detail[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            VesselScheduleDetail instance = null;
            if (rs.next()) {
                instance = VesselScheduleDetailDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(VesselScheduleDetail vesselScheduleDetail) throws DaoException {
		if (vesselScheduleDetail == null) {
			throw new DaoException("Cannot insert vsed_detail with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update vsed_detail set `id`=?,`id2`=?,`vsed_control_id`=?,`received_control_number`=?,`port_of_discharge`=?,`flight_no`=?,`flight_date`=?,`flight_time`=?,`estimate_to_berth_date`=?,`estimate_to_berth_time`=?,`berth`=?,`last_port_of_call`=?,`number_of_mawb`=?,`number_of_hawb`=?,`number_of_container`=?,`total_gross_weight`=?,`total_gross_weight_unit`=?,`message_function`=?,`last_entry`=?,`modified_date_time`=?,`terminal_operator`=?,`type`=?,`close_flight`=? where id=?");
            VesselScheduleDetailDaoImpl.setPreparedStatementValues(ps, vesselScheduleDetail);
            ps.setInt(24, vesselScheduleDetail.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE vsed_detail[id=" + vesselScheduleDetail.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from vsed_detail where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE vsed_detail[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
	@Override
	public List<VesselScheduleDetail> findAllByVesselScheduleControl(VesselScheduleControl vesselScheduleControl) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = null;
            if (vesselScheduleControl == null || vesselScheduleControl.getId() == null) {
            	ps = conn.prepareStatement("select `id`,`id2`,`vsed_control_id`,`received_control_number`,`port_of_discharge`,`flight_no`,`flight_date`,`flight_time`,`estimate_to_berth_date`,`estimate_to_berth_time`,`berth`,`last_port_of_call`,`number_of_mawb`,`number_of_hawb`,`number_of_container`,`total_gross_weight`,`total_gross_weight_unit`,`message_function`,`last_entry`,`modified_date_time`,`terminal_operator`,`type`,`close_flight` from vsed_detail where vsed_control_id=null");
            } else {
            	ps = conn.prepareStatement("select `id`,`id2`,`vsed_control_id`,`received_control_number`,`port_of_discharge`,`flight_no`,`flight_date`,`flight_time`,`estimate_to_berth_date`,`estimate_to_berth_time`,`berth`,`last_port_of_call`,`number_of_mawb`,`number_of_hawb`,`number_of_container`,`total_gross_weight`,`total_gross_weight_unit`,`message_function`,`last_entry`,`modified_date_time`,`terminal_operator`,`type`,`close_flight` from vsed_detail where vsed_control_id=?");
            	ps.setInt(1, vesselScheduleControl.getId());
            }
            
            logger.debug("DB:FIND vsed_detail[vsed_control_id=" + (vesselScheduleControl != null ? vesselScheduleControl.getId() : "null") + "]");
            
            ResultSet rs = ps.executeQuery();

            List<VesselScheduleDetail> list = new ArrayList<VesselScheduleDetail>();
            while (rs.next()) {
                list.add(VesselScheduleDetailDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            ps.close();

            return list;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

		
	private static String buildClause(VesselScheduleDetailExample vesselScheduleDetailExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (VesselScheduleDetailExample.Criteria criteria : vesselScheduleDetailExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (VesselScheduleDetailExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (vesselScheduleDetailExample.getOrderByClause() != null && !vesselScheduleDetailExample.getOrderByClause().isEmpty()) {
			clause += " order by " + vesselScheduleDetailExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByVesselScheduleDetailExample(VesselScheduleDetailExample vesselScheduleDetailExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = VesselScheduleDetailDaoImpl.buildClause(vesselScheduleDetailExample);			
            ResultSet rs = stmt.executeQuery("select" + (vesselScheduleDetailExample.isDistinct() ? " distinct " : " ") + "count(*) from vsed_detail" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT vsed_detail[distinct=" + vesselScheduleDetailExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public VesselScheduleDetail findByVesselScheduleDetailExample(VesselScheduleDetailExample vesselScheduleDetailExample) throws DaoException {
		List<VesselScheduleDetail> res = this.findAllByVesselScheduleDetailExample(vesselScheduleDetailExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<VesselScheduleDetail> findAllByVesselScheduleDetailExample(VesselScheduleDetailExample vesselScheduleDetailExample) throws DaoException {
    	return this.findAllByVesselScheduleDetailExample(vesselScheduleDetailExample, 0, 2000);
    }
    
    @Override
    public List<VesselScheduleDetail> findAllByVesselScheduleDetailExample(VesselScheduleDetailExample vesselScheduleDetailExample, int limit) throws DaoException {
    	return this.findAllByVesselScheduleDetailExample(vesselScheduleDetailExample, 0, limit);
    }
    
    @Override
    public List<VesselScheduleDetail> findAllByVesselScheduleDetailExample(VesselScheduleDetailExample vesselScheduleDetailExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = VesselScheduleDetailDaoImpl.buildClause(vesselScheduleDetailExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND vsed_detail[distinct=" + vesselScheduleDetailExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (vesselScheduleDetailExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`vsed_control_id`,`received_control_number`,`port_of_discharge`,`flight_no`,`flight_date`,`flight_time`,`estimate_to_berth_date`,`estimate_to_berth_time`,`berth`,`last_port_of_call`,`number_of_mawb`,`number_of_hawb`,`number_of_container`,`total_gross_weight`,`total_gross_weight_unit`,`message_function`,`last_entry`,`modified_date_time`,`terminal_operator`,`type`,`close_flight` from vsed_detail" + clause);

            List<VesselScheduleDetail> list = new ArrayList<VesselScheduleDetail>();
            while (rs.next()) {
                list.add(VesselScheduleDetailDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
