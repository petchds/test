package com.tti.accscms.mapper.manifest;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.manifest.AirWaybillDetailDao;

import com.tti.accscms.domain.manifest.AirWaybillDetail;
import com.tti.accscms.domain.manifest.AirWaybillDetailExample;
import com.tti.accscms.domain.manifest.AirWaybillControl;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table abil_detail
 */
public class AirWaybillDetailDaoImpl implements AirWaybillDetailDao {

	private static final Logger logger = LoggerFactory.getLogger(AirWaybillDetailDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, AirWaybillDetail airWaybillDetail) throws SQLException {
		
		if (airWaybillDetail.getId() != null) {
			ps.setInt(1, airWaybillDetail.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (airWaybillDetail.getId2() != null) {
			ps.setInt(2, airWaybillDetail.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (airWaybillDetail.getAbilControlId() != null) {
			ps.setInt(3, airWaybillDetail.getAbilControlId());
		} else {
			ps.setNull(3, java.sql.Types.INTEGER);
		}

		if (airWaybillDetail.getHawb() != null) {
			ps.setString(4, airWaybillDetail.getHawb());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getReceivedControlNumber() != null) {
			ps.setString(5, airWaybillDetail.getReceivedControlNumber());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getMawb() != null) {
			ps.setString(6, airWaybillDetail.getMawb());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getFlightNo() != null) {
			ps.setString(7, airWaybillDetail.getFlightNo());
		} else {
			ps.setNull(7, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getFlightDate() != null) {
			ps.setTimestamp(8, new java.sql.Timestamp(airWaybillDetail.getFlightDate().getTime()));
		} else {
			ps.setNull(8, java.sql.Types.DATE);
		}

		if (airWaybillDetail.geteFreightCode() != null) {
			ps.setString(9, airWaybillDetail.geteFreightCode());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsignorName() != null) {
			ps.setString(10, airWaybillDetail.getConsignorName());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsignorStreetAndNumber() != null) {
			ps.setString(11, airWaybillDetail.getConsignorStreetAndNumber());
		} else {
			ps.setNull(11, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsignorDistrict() != null) {
			ps.setString(12, airWaybillDetail.getConsignorDistrict());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsignorSubProvince() != null) {
			ps.setString(13, airWaybillDetail.getConsignorSubProvince());
		} else {
			ps.setNull(13, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsignorProvince() != null) {
			ps.setString(14, airWaybillDetail.getConsignorProvince());
		} else {
			ps.setNull(14, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsignorPostcode() != null) {
			ps.setString(15, airWaybillDetail.getConsignorPostcode());
		} else {
			ps.setNull(15, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsignorPhoneNumber() != null) {
			ps.setString(16, airWaybillDetail.getConsignorPhoneNumber());
		} else {
			ps.setNull(16, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsignorCountryCode() != null) {
			ps.setString(17, airWaybillDetail.getConsignorCountryCode());
		} else {
			ps.setNull(17, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsigneeOrNotifyParty() != null) {
			ps.setString(18, airWaybillDetail.getConsigneeOrNotifyParty());
		} else {
			ps.setNull(18, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsigneeName() != null) {
			ps.setString(19, airWaybillDetail.getConsigneeName());
		} else {
			ps.setNull(19, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsigneeStreetAndNumber() != null) {
			ps.setString(20, airWaybillDetail.getConsigneeStreetAndNumber());
		} else {
			ps.setNull(20, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsigneeDistrict() != null) {
			ps.setString(21, airWaybillDetail.getConsigneeDistrict());
		} else {
			ps.setNull(21, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsigneeSubProvince() != null) {
			ps.setString(22, airWaybillDetail.getConsigneeSubProvince());
		} else {
			ps.setNull(22, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsigneeProvince() != null) {
			ps.setString(23, airWaybillDetail.getConsigneeProvince());
		} else {
			ps.setNull(23, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsigneePostcode() != null) {
			ps.setString(24, airWaybillDetail.getConsigneePostcode());
		} else {
			ps.setNull(24, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsigneePhoneNumber() != null) {
			ps.setString(25, airWaybillDetail.getConsigneePhoneNumber());
		} else {
			ps.setNull(25, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getConsigneeCountryCode() != null) {
			ps.setString(26, airWaybillDetail.getConsigneeCountryCode());
		} else {
			ps.setNull(26, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getNotifyPartyName() != null) {
			ps.setString(27, airWaybillDetail.getNotifyPartyName());
		} else {
			ps.setNull(27, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getNotifyPartyStreetAndNumber() != null) {
			ps.setString(28, airWaybillDetail.getNotifyPartyStreetAndNumber());
		} else {
			ps.setNull(28, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getNotifyPartyDistrict() != null) {
			ps.setString(29, airWaybillDetail.getNotifyPartyDistrict());
		} else {
			ps.setNull(29, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getNotifyPartySubProvince() != null) {
			ps.setString(30, airWaybillDetail.getNotifyPartySubProvince());
		} else {
			ps.setNull(30, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getNotifyPartyProvince() != null) {
			ps.setString(31, airWaybillDetail.getNotifyPartyProvince());
		} else {
			ps.setNull(31, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getNotifyPartyPostcode() != null) {
			ps.setString(32, airWaybillDetail.getNotifyPartyPostcode());
		} else {
			ps.setNull(32, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getNotifyPartyPhoneNumber() != null) {
			ps.setString(33, airWaybillDetail.getNotifyPartyPhoneNumber());
		} else {
			ps.setNull(33, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getNotifyPartyCountryCode() != null) {
			ps.setString(34, airWaybillDetail.getNotifyPartyCountryCode());
		} else {
			ps.setNull(34, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTransshipmentApplicantTaxNumber() != null) {
			ps.setString(35, airWaybillDetail.getTransshipmentApplicantTaxNumber());
		} else {
			ps.setNull(35, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTransshipmentApplicantBranch() != null) {
			ps.setInt(36, airWaybillDetail.getTransshipmentApplicantBranch());
		} else {
			ps.setNull(36, java.sql.Types.INTEGER);
		}

		if (airWaybillDetail.getTransshipmentApplicantEnglishName() != null) {
			ps.setString(37, airWaybillDetail.getTransshipmentApplicantEnglishName());
		} else {
			ps.setNull(37, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTransshipmentApplicantStreetAndNumber() != null) {
			ps.setString(38, airWaybillDetail.getTransshipmentApplicantStreetAndNumber());
		} else {
			ps.setNull(38, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTransshipmentApplicantDistrict() != null) {
			ps.setString(39, airWaybillDetail.getTransshipmentApplicantDistrict());
		} else {
			ps.setNull(39, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTransshipmentApplicantSubProvince() != null) {
			ps.setString(40, airWaybillDetail.getTransshipmentApplicantSubProvince());
		} else {
			ps.setNull(40, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTransshipmentApplicantProvince() != null) {
			ps.setString(41, airWaybillDetail.getTransshipmentApplicantProvince());
		} else {
			ps.setNull(41, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTransshipmentApplicantPostcode() != null) {
			ps.setString(42, airWaybillDetail.getTransshipmentApplicantPostcode());
		} else {
			ps.setNull(42, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTransshipmentApplicantPhoneNumber() != null) {
			ps.setString(43, airWaybillDetail.getTransshipmentApplicantPhoneNumber());
		} else {
			ps.setNull(43, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTransshipmentApplicantCountryCode() != null) {
			ps.setString(44, airWaybillDetail.getTransshipmentApplicantCountryCode());
		} else {
			ps.setNull(44, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTotalGrossWeight() != null) {
			ps.setDouble(45, airWaybillDetail.getTotalGrossWeight());
		} else {
			ps.setNull(45, java.sql.Types.DOUBLE);
		}

		if (airWaybillDetail.getTotalGrossWeightUnit() != null) {
			ps.setString(46, airWaybillDetail.getTotalGrossWeightUnit());
		} else {
			ps.setNull(46, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getTotalNumberOfPackage() != null) {
			ps.setInt(47, airWaybillDetail.getTotalNumberOfPackage());
		} else {
			ps.setNull(47, java.sql.Types.INTEGER);
		}

		if (airWaybillDetail.getTotalNumberOfPackageUnit() != null) {
			ps.setString(48, airWaybillDetail.getTotalNumberOfPackageUnit());
		} else {
			ps.setNull(48, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getFobValueForeign() != null) {
			ps.setDouble(49, airWaybillDetail.getFobValueForeign());
		} else {
			ps.setNull(49, java.sql.Types.DOUBLE);
		}

		if (airWaybillDetail.getFobCurrencyCode() != null) {
			ps.setString(50, airWaybillDetail.getFobCurrencyCode());
		} else {
			ps.setNull(50, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getFreightAmountForeign() != null) {
			ps.setDouble(51, airWaybillDetail.getFreightAmountForeign());
		} else {
			ps.setNull(51, java.sql.Types.DOUBLE);
		}

		if (airWaybillDetail.getFreightCurrencyCode() != null) {
			ps.setString(52, airWaybillDetail.getFreightCurrencyCode());
		} else {
			ps.setNull(52, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getInsuranceAmountForeign() != null) {
			ps.setDouble(53, airWaybillDetail.getInsuranceAmountForeign());
		} else {
			ps.setNull(53, java.sql.Types.DOUBLE);
		}

		if (airWaybillDetail.getInsuranceCurrencyCode() != null) {
			ps.setString(54, airWaybillDetail.getInsuranceCurrencyCode());
		} else {
			ps.setNull(54, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getMarkAndLabels() != null) {
			ps.setString(55, airWaybillDetail.getMarkAndLabels());
		} else {
			ps.setNull(55, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getGoodsDescription() != null) {
			ps.setString(56, airWaybillDetail.getGoodsDescription());
		} else {
			ps.setNull(56, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getDeclarationNo() != null) {
			ps.setString(57, airWaybillDetail.getDeclarationNo());
		} else {
			ps.setNull(57, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getLastEntry() != null) {
			ps.setString(58, airWaybillDetail.getLastEntry());
		} else {
			ps.setNull(58, java.sql.Types.VARCHAR);
		}

		if (airWaybillDetail.getBalanced() != null) {
			ps.setByte(59, airWaybillDetail.getBalanced());
		} else {
			ps.setNull(59, java.sql.Types.TINYINT);
		}

		if (airWaybillDetail.getBalancedDateTime() != null) {
			ps.setTimestamp(60, new java.sql.Timestamp(airWaybillDetail.getBalancedDateTime().getTime()));
		} else {
			ps.setNull(60, java.sql.Types.TIMESTAMP);
		}

		if (airWaybillDetail.getModifiedDateTime() != null) {
			ps.setTimestamp(61, new java.sql.Timestamp(airWaybillDetail.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(61, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (airWaybillDetail.getShedNo() != null) {
			ps.setInt(62, airWaybillDetail.getShedNo());
		} else {
			ps.setNull(62, java.sql.Types.INTEGER);
		}

		if (airWaybillDetail.getType() != null) {
			ps.setInt(63, airWaybillDetail.getType());
		} else {
			ps.setNull(63, java.sql.Types.INTEGER);
		}

		if (airWaybillDetail.getCloseFlight() != null) {
			ps.setBoolean(64, airWaybillDetail.getCloseFlight());
		} else {
			ps.setNull(64, java.sql.Types.TINYINT);
		}

	}

		
	private static AirWaybillDetail createInstanceFromResultSet(ResultSet rs) throws SQLException {
		AirWaybillDetail airWaybillDetail = new AirWaybillDetail();
		
		Integer col1 = rs.getInt("id");
		airWaybillDetail.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		airWaybillDetail.setId2(rs.wasNull() ? null : col2);

		Integer col3 = rs.getInt("abil_control_id");
		airWaybillDetail.setAbilControlId(rs.wasNull() ? null : col3);

		String col4 = rs.getString("hawb");
		airWaybillDetail.setHawb(rs.wasNull() ? null : col4);

		String col5 = rs.getString("received_control_number");
		airWaybillDetail.setReceivedControlNumber(rs.wasNull() ? null : col5);

		String col6 = rs.getString("mawb");
		airWaybillDetail.setMawb(rs.wasNull() ? null : col6);

		String col7 = rs.getString("flight_no");
		airWaybillDetail.setFlightNo(rs.wasNull() ? null : col7);

		java.sql.Timestamp col8 = rs.getTimestamp("flight_date");
		airWaybillDetail.setFlightDate(rs.wasNull() ? null : new java.util.Date(col8.getTime()));

		String col9 = rs.getString("e_freight_code");
		airWaybillDetail.seteFreightCode(rs.wasNull() ? null : col9);

		String col10 = rs.getString("consignor_name");
		airWaybillDetail.setConsignorName(rs.wasNull() ? null : col10);

		String col11 = rs.getString("consignor_street_and_number");
		airWaybillDetail.setConsignorStreetAndNumber(rs.wasNull() ? null : col11);

		String col12 = rs.getString("consignor_district");
		airWaybillDetail.setConsignorDistrict(rs.wasNull() ? null : col12);

		String col13 = rs.getString("consignor_sub_province");
		airWaybillDetail.setConsignorSubProvince(rs.wasNull() ? null : col13);

		String col14 = rs.getString("consignor_province");
		airWaybillDetail.setConsignorProvince(rs.wasNull() ? null : col14);

		String col15 = rs.getString("consignor_postcode");
		airWaybillDetail.setConsignorPostcode(rs.wasNull() ? null : col15);

		String col16 = rs.getString("consignor_phone_number");
		airWaybillDetail.setConsignorPhoneNumber(rs.wasNull() ? null : col16);

		String col17 = rs.getString("consignor_country_code");
		airWaybillDetail.setConsignorCountryCode(rs.wasNull() ? null : col17);

		String col18 = rs.getString("consignee_or_notify_party");
		airWaybillDetail.setConsigneeOrNotifyParty(rs.wasNull() ? null : col18);

		String col19 = rs.getString("consignee_name");
		airWaybillDetail.setConsigneeName(rs.wasNull() ? null : col19);

		String col20 = rs.getString("consignee_street_and_number");
		airWaybillDetail.setConsigneeStreetAndNumber(rs.wasNull() ? null : col20);

		String col21 = rs.getString("consignee_district");
		airWaybillDetail.setConsigneeDistrict(rs.wasNull() ? null : col21);

		String col22 = rs.getString("consignee_sub_province");
		airWaybillDetail.setConsigneeSubProvince(rs.wasNull() ? null : col22);

		String col23 = rs.getString("consignee_province");
		airWaybillDetail.setConsigneeProvince(rs.wasNull() ? null : col23);

		String col24 = rs.getString("consignee_postcode");
		airWaybillDetail.setConsigneePostcode(rs.wasNull() ? null : col24);

		String col25 = rs.getString("consignee_phone_number");
		airWaybillDetail.setConsigneePhoneNumber(rs.wasNull() ? null : col25);

		String col26 = rs.getString("consignee_country_code");
		airWaybillDetail.setConsigneeCountryCode(rs.wasNull() ? null : col26);

		String col27 = rs.getString("notify_party_name");
		airWaybillDetail.setNotifyPartyName(rs.wasNull() ? null : col27);

		String col28 = rs.getString("notify_party_street_and_number");
		airWaybillDetail.setNotifyPartyStreetAndNumber(rs.wasNull() ? null : col28);

		String col29 = rs.getString("notify_party_district");
		airWaybillDetail.setNotifyPartyDistrict(rs.wasNull() ? null : col29);

		String col30 = rs.getString("notify_party_sub_province");
		airWaybillDetail.setNotifyPartySubProvince(rs.wasNull() ? null : col30);

		String col31 = rs.getString("notify_party_province");
		airWaybillDetail.setNotifyPartyProvince(rs.wasNull() ? null : col31);

		String col32 = rs.getString("notify_party_postcode");
		airWaybillDetail.setNotifyPartyPostcode(rs.wasNull() ? null : col32);

		String col33 = rs.getString("notify_party_phone_number");
		airWaybillDetail.setNotifyPartyPhoneNumber(rs.wasNull() ? null : col33);

		String col34 = rs.getString("notify_party_country_code");
		airWaybillDetail.setNotifyPartyCountryCode(rs.wasNull() ? null : col34);

		String col35 = rs.getString("transshipment_applicant_tax_number");
		airWaybillDetail.setTransshipmentApplicantTaxNumber(rs.wasNull() ? null : col35);

		Integer col36 = rs.getInt("transshipment_applicant_branch");
		airWaybillDetail.setTransshipmentApplicantBranch(rs.wasNull() ? null : col36);

		String col37 = rs.getString("transshipment_applicant_english_name");
		airWaybillDetail.setTransshipmentApplicantEnglishName(rs.wasNull() ? null : col37);

		String col38 = rs.getString("transshipment_applicant_street_and_number");
		airWaybillDetail.setTransshipmentApplicantStreetAndNumber(rs.wasNull() ? null : col38);

		String col39 = rs.getString("transshipment_applicant_district");
		airWaybillDetail.setTransshipmentApplicantDistrict(rs.wasNull() ? null : col39);

		String col40 = rs.getString("transshipment_applicant_sub_province");
		airWaybillDetail.setTransshipmentApplicantSubProvince(rs.wasNull() ? null : col40);

		String col41 = rs.getString("transshipment_applicant_province");
		airWaybillDetail.setTransshipmentApplicantProvince(rs.wasNull() ? null : col41);

		String col42 = rs.getString("transshipment_applicant_postcode");
		airWaybillDetail.setTransshipmentApplicantPostcode(rs.wasNull() ? null : col42);

		String col43 = rs.getString("transshipment_applicant_phone_number");
		airWaybillDetail.setTransshipmentApplicantPhoneNumber(rs.wasNull() ? null : col43);

		String col44 = rs.getString("transshipment_applicant_country_code");
		airWaybillDetail.setTransshipmentApplicantCountryCode(rs.wasNull() ? null : col44);

		Double col45 = rs.getDouble("total_gross_weight");
		airWaybillDetail.setTotalGrossWeight(rs.wasNull() ? null : col45);

		String col46 = rs.getString("total_gross_weight_unit");
		airWaybillDetail.setTotalGrossWeightUnit(rs.wasNull() ? null : col46);

		Integer col47 = rs.getInt("total_number_of_package");
		airWaybillDetail.setTotalNumberOfPackage(rs.wasNull() ? null : col47);

		String col48 = rs.getString("total_number_of_package_unit");
		airWaybillDetail.setTotalNumberOfPackageUnit(rs.wasNull() ? null : col48);

		Double col49 = rs.getDouble("fob_value_foreign");
		airWaybillDetail.setFobValueForeign(rs.wasNull() ? null : col49);

		String col50 = rs.getString("fob_currency_code");
		airWaybillDetail.setFobCurrencyCode(rs.wasNull() ? null : col50);

		Double col51 = rs.getDouble("freight_amount_foreign");
		airWaybillDetail.setFreightAmountForeign(rs.wasNull() ? null : col51);

		String col52 = rs.getString("freight_currency_code");
		airWaybillDetail.setFreightCurrencyCode(rs.wasNull() ? null : col52);

		Double col53 = rs.getDouble("insurance_amount_foreign");
		airWaybillDetail.setInsuranceAmountForeign(rs.wasNull() ? null : col53);

		String col54 = rs.getString("insurance_currency_code");
		airWaybillDetail.setInsuranceCurrencyCode(rs.wasNull() ? null : col54);

		String col55 = rs.getString("mark_and_labels");
		airWaybillDetail.setMarkAndLabels(rs.wasNull() ? null : col55);

		String col56 = rs.getString("goods_description");
		airWaybillDetail.setGoodsDescription(rs.wasNull() ? null : col56);

		String col57 = rs.getString("declaration_no");
		airWaybillDetail.setDeclarationNo(rs.wasNull() ? null : col57);

		String col58 = rs.getString("last_entry");
		airWaybillDetail.setLastEntry(rs.wasNull() ? null : col58);

		Byte col59 = rs.getByte("balanced");
		airWaybillDetail.setBalanced(rs.wasNull() ? null : col59);

		java.sql.Timestamp col60 = rs.getTimestamp("balanced_date_time");
		airWaybillDetail.setBalancedDateTime(rs.wasNull() ? null : new java.util.Date(col60.getTime()));

		java.sql.Timestamp col61 = rs.getTimestamp("modified_date_time");
		airWaybillDetail.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col61.getTime()));

		Integer col62 = rs.getInt("shed_no");
		airWaybillDetail.setShedNo(rs.wasNull() ? null : col62);

		Integer col63 = rs.getInt("type");
		airWaybillDetail.setType(rs.wasNull() ? null : col63);

		Boolean col64 = rs.getBoolean("close_flight");
		airWaybillDetail.setCloseFlight(rs.wasNull() ? null : col64);


		return airWaybillDetail;
	}  

		
	@Override
	public int insert(AirWaybillDetail airWaybillDetail) throws DaoException {
		if (airWaybillDetail == null) {
			throw new DaoException("Cannot insert abil_detail with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into abil_detail(`id`,`id2`,`abil_control_id`,`hawb`,`received_control_number`,`mawb`,`flight_no`,`flight_date`,`e_freight_code`,`consignor_name`,`consignor_street_and_number`,`consignor_district`,`consignor_sub_province`,`consignor_province`,`consignor_postcode`,`consignor_phone_number`,`consignor_country_code`,`consignee_or_notify_party`,`consignee_name`,`consignee_street_and_number`,`consignee_district`,`consignee_sub_province`,`consignee_province`,`consignee_postcode`,`consignee_phone_number`,`consignee_country_code`,`notify_party_name`,`notify_party_street_and_number`,`notify_party_district`,`notify_party_sub_province`,`notify_party_province`,`notify_party_postcode`,`notify_party_phone_number`,`notify_party_country_code`,`transshipment_applicant_tax_number`,`transshipment_applicant_branch`,`transshipment_applicant_english_name`,`transshipment_applicant_street_and_number`,`transshipment_applicant_district`,`transshipment_applicant_sub_province`,`transshipment_applicant_province`,`transshipment_applicant_postcode`,`transshipment_applicant_phone_number`,`transshipment_applicant_country_code`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`,`fob_value_foreign`,`fob_currency_code`,`freight_amount_foreign`,`freight_currency_code`,`insurance_amount_foreign`,`insurance_currency_code`,`mark_and_labels`,`goods_description`,`declaration_no`,`last_entry`,`balanced`,`balanced_date_time`,`modified_date_time`,`shed_no`,`type`,`close_flight`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            AirWaybillDetailDaoImpl.setPreparedStatementValues(ps, airWaybillDetail);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT abil_detail[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from abil_detail");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT abil_detail => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public AirWaybillDetail findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`abil_control_id`,`hawb`,`received_control_number`,`mawb`,`flight_no`,`flight_date`,`e_freight_code`,`consignor_name`,`consignor_street_and_number`,`consignor_district`,`consignor_sub_province`,`consignor_province`,`consignor_postcode`,`consignor_phone_number`,`consignor_country_code`,`consignee_or_notify_party`,`consignee_name`,`consignee_street_and_number`,`consignee_district`,`consignee_sub_province`,`consignee_province`,`consignee_postcode`,`consignee_phone_number`,`consignee_country_code`,`notify_party_name`,`notify_party_street_and_number`,`notify_party_district`,`notify_party_sub_province`,`notify_party_province`,`notify_party_postcode`,`notify_party_phone_number`,`notify_party_country_code`,`transshipment_applicant_tax_number`,`transshipment_applicant_branch`,`transshipment_applicant_english_name`,`transshipment_applicant_street_and_number`,`transshipment_applicant_district`,`transshipment_applicant_sub_province`,`transshipment_applicant_province`,`transshipment_applicant_postcode`,`transshipment_applicant_phone_number`,`transshipment_applicant_country_code`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`,`fob_value_foreign`,`fob_currency_code`,`freight_amount_foreign`,`freight_currency_code`,`insurance_amount_foreign`,`insurance_currency_code`,`mark_and_labels`,`goods_description`,`declaration_no`,`last_entry`,`balanced`,`balanced_date_time`,`modified_date_time`,`shed_no`,`type`,`close_flight` from abil_detail where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND abil_detail[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            AirWaybillDetail instance = null;
            if (rs.next()) {
                instance = AirWaybillDetailDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(AirWaybillDetail airWaybillDetail) throws DaoException {
		if (airWaybillDetail == null) {
			throw new DaoException("Cannot insert abil_detail with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update abil_detail set `id`=?,`id2`=?,`abil_control_id`=?,`hawb`=?,`received_control_number`=?,`mawb`=?,`flight_no`=?,`flight_date`=?,`e_freight_code`=?,`consignor_name`=?,`consignor_street_and_number`=?,`consignor_district`=?,`consignor_sub_province`=?,`consignor_province`=?,`consignor_postcode`=?,`consignor_phone_number`=?,`consignor_country_code`=?,`consignee_or_notify_party`=?,`consignee_name`=?,`consignee_street_and_number`=?,`consignee_district`=?,`consignee_sub_province`=?,`consignee_province`=?,`consignee_postcode`=?,`consignee_phone_number`=?,`consignee_country_code`=?,`notify_party_name`=?,`notify_party_street_and_number`=?,`notify_party_district`=?,`notify_party_sub_province`=?,`notify_party_province`=?,`notify_party_postcode`=?,`notify_party_phone_number`=?,`notify_party_country_code`=?,`transshipment_applicant_tax_number`=?,`transshipment_applicant_branch`=?,`transshipment_applicant_english_name`=?,`transshipment_applicant_street_and_number`=?,`transshipment_applicant_district`=?,`transshipment_applicant_sub_province`=?,`transshipment_applicant_province`=?,`transshipment_applicant_postcode`=?,`transshipment_applicant_phone_number`=?,`transshipment_applicant_country_code`=?,`total_gross_weight`=?,`total_gross_weight_unit`=?,`total_number_of_package`=?,`total_number_of_package_unit`=?,`fob_value_foreign`=?,`fob_currency_code`=?,`freight_amount_foreign`=?,`freight_currency_code`=?,`insurance_amount_foreign`=?,`insurance_currency_code`=?,`mark_and_labels`=?,`goods_description`=?,`declaration_no`=?,`last_entry`=?,`balanced`=?,`balanced_date_time`=?,`modified_date_time`=?,`shed_no`=?,`type`=?,`close_flight`=? where id=?");
            AirWaybillDetailDaoImpl.setPreparedStatementValues(ps, airWaybillDetail);
            ps.setInt(65, airWaybillDetail.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE abil_detail[id=" + airWaybillDetail.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from abil_detail where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE abil_detail[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
	@Override
	public List<AirWaybillDetail> findAllByAirWaybillControl(AirWaybillControl airWaybillControl) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = null;
            if (airWaybillControl == null || airWaybillControl.getId() == null) {
            	ps = conn.prepareStatement("select `id`,`id2`,`abil_control_id`,`hawb`,`received_control_number`,`mawb`,`flight_no`,`flight_date`,`e_freight_code`,`consignor_name`,`consignor_street_and_number`,`consignor_district`,`consignor_sub_province`,`consignor_province`,`consignor_postcode`,`consignor_phone_number`,`consignor_country_code`,`consignee_or_notify_party`,`consignee_name`,`consignee_street_and_number`,`consignee_district`,`consignee_sub_province`,`consignee_province`,`consignee_postcode`,`consignee_phone_number`,`consignee_country_code`,`notify_party_name`,`notify_party_street_and_number`,`notify_party_district`,`notify_party_sub_province`,`notify_party_province`,`notify_party_postcode`,`notify_party_phone_number`,`notify_party_country_code`,`transshipment_applicant_tax_number`,`transshipment_applicant_branch`,`transshipment_applicant_english_name`,`transshipment_applicant_street_and_number`,`transshipment_applicant_district`,`transshipment_applicant_sub_province`,`transshipment_applicant_province`,`transshipment_applicant_postcode`,`transshipment_applicant_phone_number`,`transshipment_applicant_country_code`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`,`fob_value_foreign`,`fob_currency_code`,`freight_amount_foreign`,`freight_currency_code`,`insurance_amount_foreign`,`insurance_currency_code`,`mark_and_labels`,`goods_description`,`declaration_no`,`last_entry`,`balanced`,`balanced_date_time`,`modified_date_time`,`shed_no`,`type`,`close_flight` from abil_detail where abil_control_id=null");
            } else {
            	ps = conn.prepareStatement("select `id`,`id2`,`abil_control_id`,`hawb`,`received_control_number`,`mawb`,`flight_no`,`flight_date`,`e_freight_code`,`consignor_name`,`consignor_street_and_number`,`consignor_district`,`consignor_sub_province`,`consignor_province`,`consignor_postcode`,`consignor_phone_number`,`consignor_country_code`,`consignee_or_notify_party`,`consignee_name`,`consignee_street_and_number`,`consignee_district`,`consignee_sub_province`,`consignee_province`,`consignee_postcode`,`consignee_phone_number`,`consignee_country_code`,`notify_party_name`,`notify_party_street_and_number`,`notify_party_district`,`notify_party_sub_province`,`notify_party_province`,`notify_party_postcode`,`notify_party_phone_number`,`notify_party_country_code`,`transshipment_applicant_tax_number`,`transshipment_applicant_branch`,`transshipment_applicant_english_name`,`transshipment_applicant_street_and_number`,`transshipment_applicant_district`,`transshipment_applicant_sub_province`,`transshipment_applicant_province`,`transshipment_applicant_postcode`,`transshipment_applicant_phone_number`,`transshipment_applicant_country_code`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`,`fob_value_foreign`,`fob_currency_code`,`freight_amount_foreign`,`freight_currency_code`,`insurance_amount_foreign`,`insurance_currency_code`,`mark_and_labels`,`goods_description`,`declaration_no`,`last_entry`,`balanced`,`balanced_date_time`,`modified_date_time`,`shed_no`,`type`,`close_flight` from abil_detail where abil_control_id=?");
            	ps.setInt(1, airWaybillControl.getId());
            }
            
            logger.debug("DB:FIND abil_detail[abil_control_id=" + (airWaybillControl != null ? airWaybillControl.getId() : "null") + "]");
            
            ResultSet rs = ps.executeQuery();

            List<AirWaybillDetail> list = new ArrayList<AirWaybillDetail>();
            while (rs.next()) {
                list.add(AirWaybillDetailDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            ps.close();

            return list;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

		
	private static String buildClause(AirWaybillDetailExample airWaybillDetailExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (AirWaybillDetailExample.Criteria criteria : airWaybillDetailExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (AirWaybillDetailExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (airWaybillDetailExample.getOrderByClause() != null && !airWaybillDetailExample.getOrderByClause().isEmpty()) {
			clause += " order by " + airWaybillDetailExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByAirWaybillDetailExample(AirWaybillDetailExample airWaybillDetailExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = AirWaybillDetailDaoImpl.buildClause(airWaybillDetailExample);			
            ResultSet rs = stmt.executeQuery("select" + (airWaybillDetailExample.isDistinct() ? " distinct " : " ") + "count(*) from abil_detail" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT abil_detail[distinct=" + airWaybillDetailExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public AirWaybillDetail findByAirWaybillDetailExample(AirWaybillDetailExample airWaybillDetailExample) throws DaoException {
		List<AirWaybillDetail> res = this.findAllByAirWaybillDetailExample(airWaybillDetailExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<AirWaybillDetail> findAllByAirWaybillDetailExample(AirWaybillDetailExample airWaybillDetailExample) throws DaoException {
    	return this.findAllByAirWaybillDetailExample(airWaybillDetailExample, 0, 2000);
    }
    
    @Override
    public List<AirWaybillDetail> findAllByAirWaybillDetailExample(AirWaybillDetailExample airWaybillDetailExample, int limit) throws DaoException {
    	return this.findAllByAirWaybillDetailExample(airWaybillDetailExample, 0, limit);
    }
    
    @Override
    public List<AirWaybillDetail> findAllByAirWaybillDetailExample(AirWaybillDetailExample airWaybillDetailExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = AirWaybillDetailDaoImpl.buildClause(airWaybillDetailExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND abil_detail[distinct=" + airWaybillDetailExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (airWaybillDetailExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`abil_control_id`,`hawb`,`received_control_number`,`mawb`,`flight_no`,`flight_date`,`e_freight_code`,`consignor_name`,`consignor_street_and_number`,`consignor_district`,`consignor_sub_province`,`consignor_province`,`consignor_postcode`,`consignor_phone_number`,`consignor_country_code`,`consignee_or_notify_party`,`consignee_name`,`consignee_street_and_number`,`consignee_district`,`consignee_sub_province`,`consignee_province`,`consignee_postcode`,`consignee_phone_number`,`consignee_country_code`,`notify_party_name`,`notify_party_street_and_number`,`notify_party_district`,`notify_party_sub_province`,`notify_party_province`,`notify_party_postcode`,`notify_party_phone_number`,`notify_party_country_code`,`transshipment_applicant_tax_number`,`transshipment_applicant_branch`,`transshipment_applicant_english_name`,`transshipment_applicant_street_and_number`,`transshipment_applicant_district`,`transshipment_applicant_sub_province`,`transshipment_applicant_province`,`transshipment_applicant_postcode`,`transshipment_applicant_phone_number`,`transshipment_applicant_country_code`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`,`fob_value_foreign`,`fob_currency_code`,`freight_amount_foreign`,`freight_currency_code`,`insurance_amount_foreign`,`insurance_currency_code`,`mark_and_labels`,`goods_description`,`declaration_no`,`last_entry`,`balanced`,`balanced_date_time`,`modified_date_time`,`shed_no`,`type`,`close_flight` from abil_detail" + clause);

            List<AirWaybillDetail> list = new ArrayList<AirWaybillDetail>();
            while (rs.next()) {
                list.add(AirWaybillDetailDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
