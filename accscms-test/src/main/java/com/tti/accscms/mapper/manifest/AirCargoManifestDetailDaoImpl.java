package com.tti.accscms.mapper.manifest;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.manifest.AirCargoManifestDetailDao;

import com.tti.accscms.domain.manifest.AirCargoManifestDetail;
import com.tti.accscms.domain.manifest.AirCargoManifestDetailExample;
import com.tti.accscms.domain.manifest.AirCargoManifestControl;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table aman_detail
 */
public class AirCargoManifestDetailDaoImpl implements AirCargoManifestDetailDao {

	private static final Logger logger = LoggerFactory.getLogger(AirCargoManifestDetailDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, AirCargoManifestDetail airCargoManifestDetail) throws SQLException {
		
		if (airCargoManifestDetail.getId() != null) {
			ps.setInt(1, airCargoManifestDetail.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (airCargoManifestDetail.getId2() != null) {
			ps.setInt(2, airCargoManifestDetail.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (airCargoManifestDetail.getAmanControlId() != null) {
			ps.setInt(3, airCargoManifestDetail.getAmanControlId());
		} else {
			ps.setNull(3, java.sql.Types.INTEGER);
		}

		if (airCargoManifestDetail.getReceivedControlNumber() != null) {
			ps.setString(4, airCargoManifestDetail.getReceivedControlNumber());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestDetail.getMawb() != null) {
			ps.setString(5, airCargoManifestDetail.getMawb());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestDetail.getAircraftAgentTaxNumber() != null) {
			ps.setString(6, airCargoManifestDetail.getAircraftAgentTaxNumber());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestDetail.getAircraftAgentBranch() != null) {
			ps.setInt(7, airCargoManifestDetail.getAircraftAgentBranch());
		} else {
			ps.setNull(7, java.sql.Types.INTEGER);
		}

		if (airCargoManifestDetail.getNumberOfHawb() != null) {
			ps.setInt(8, airCargoManifestDetail.getNumberOfHawb());
		} else {
			ps.setNull(8, java.sql.Types.INTEGER);
		}

		if (airCargoManifestDetail.getTotalGrossWeight() != null) {
			ps.setDouble(9, airCargoManifestDetail.getTotalGrossWeight());
		} else {
			ps.setNull(9, java.sql.Types.DOUBLE);
		}

		if (airCargoManifestDetail.getTotalGrossWeightUnit() != null) {
			ps.setString(10, airCargoManifestDetail.getTotalGrossWeightUnit());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestDetail.getTotalNumberOfPackage() != null) {
			ps.setInt(11, airCargoManifestDetail.getTotalNumberOfPackage());
		} else {
			ps.setNull(11, java.sql.Types.INTEGER);
		}

		if (airCargoManifestDetail.getTotalNumberOfPackageUnit() != null) {
			ps.setString(12, airCargoManifestDetail.getTotalNumberOfPackageUnit());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestDetail.getLastEntry() != null) {
			ps.setString(13, airCargoManifestDetail.getLastEntry());
		} else {
			ps.setNull(13, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestDetail.getModifiedDateTime() != null) {
			ps.setTimestamp(14, new java.sql.Timestamp(airCargoManifestDetail.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(14, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (airCargoManifestDetail.getTerminalOperator() != null) {
			ps.setString(15, airCargoManifestDetail.getTerminalOperator());
		} else {
			ps.setNull(15, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestDetail.getType() != null) {
			ps.setInt(16, airCargoManifestDetail.getType());
		} else {
			ps.setNull(16, java.sql.Types.INTEGER);
		}

	}

		
	private static AirCargoManifestDetail createInstanceFromResultSet(ResultSet rs) throws SQLException {
		AirCargoManifestDetail airCargoManifestDetail = new AirCargoManifestDetail();
		
		Integer col1 = rs.getInt("id");
		airCargoManifestDetail.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		airCargoManifestDetail.setId2(rs.wasNull() ? null : col2);

		Integer col3 = rs.getInt("aman_control_id");
		airCargoManifestDetail.setAmanControlId(rs.wasNull() ? null : col3);

		String col4 = rs.getString("received_control_number");
		airCargoManifestDetail.setReceivedControlNumber(rs.wasNull() ? null : col4);

		String col5 = rs.getString("mawb");
		airCargoManifestDetail.setMawb(rs.wasNull() ? null : col5);

		String col6 = rs.getString("aircraft_agent_tax_number");
		airCargoManifestDetail.setAircraftAgentTaxNumber(rs.wasNull() ? null : col6);

		Integer col7 = rs.getInt("aircraft_agent_branch");
		airCargoManifestDetail.setAircraftAgentBranch(rs.wasNull() ? null : col7);

		Integer col8 = rs.getInt("number_of_hawb");
		airCargoManifestDetail.setNumberOfHawb(rs.wasNull() ? null : col8);

		Double col9 = rs.getDouble("total_gross_weight");
		airCargoManifestDetail.setTotalGrossWeight(rs.wasNull() ? null : col9);

		String col10 = rs.getString("total_gross_weight_unit");
		airCargoManifestDetail.setTotalGrossWeightUnit(rs.wasNull() ? null : col10);

		Integer col11 = rs.getInt("total_number_of_package");
		airCargoManifestDetail.setTotalNumberOfPackage(rs.wasNull() ? null : col11);

		String col12 = rs.getString("total_number_of_package_unit");
		airCargoManifestDetail.setTotalNumberOfPackageUnit(rs.wasNull() ? null : col12);

		String col13 = rs.getString("last_entry");
		airCargoManifestDetail.setLastEntry(rs.wasNull() ? null : col13);

		java.sql.Timestamp col14 = rs.getTimestamp("modified_date_time");
		airCargoManifestDetail.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col14.getTime()));

		String col15 = rs.getString("terminal_operator");
		airCargoManifestDetail.setTerminalOperator(rs.wasNull() ? null : col15);

		Integer col16 = rs.getInt("type");
		airCargoManifestDetail.setType(rs.wasNull() ? null : col16);


		return airCargoManifestDetail;
	}  

		
	@Override
	public int insert(AirCargoManifestDetail airCargoManifestDetail) throws DaoException {
		if (airCargoManifestDetail == null) {
			throw new DaoException("Cannot insert aman_detail with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into aman_detail(`id`,`id2`,`aman_control_id`,`received_control_number`,`mawb`,`aircraft_agent_tax_number`,`aircraft_agent_branch`,`number_of_hawb`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`,`last_entry`,`modified_date_time`,`terminal_operator`,`type`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            AirCargoManifestDetailDaoImpl.setPreparedStatementValues(ps, airCargoManifestDetail);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT aman_detail[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from aman_detail");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT aman_detail => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public AirCargoManifestDetail findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`aman_control_id`,`received_control_number`,`mawb`,`aircraft_agent_tax_number`,`aircraft_agent_branch`,`number_of_hawb`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`,`last_entry`,`modified_date_time`,`terminal_operator`,`type` from aman_detail where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND aman_detail[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            AirCargoManifestDetail instance = null;
            if (rs.next()) {
                instance = AirCargoManifestDetailDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(AirCargoManifestDetail airCargoManifestDetail) throws DaoException {
		if (airCargoManifestDetail == null) {
			throw new DaoException("Cannot insert aman_detail with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update aman_detail set `id`=?,`id2`=?,`aman_control_id`=?,`received_control_number`=?,`mawb`=?,`aircraft_agent_tax_number`=?,`aircraft_agent_branch`=?,`number_of_hawb`=?,`total_gross_weight`=?,`total_gross_weight_unit`=?,`total_number_of_package`=?,`total_number_of_package_unit`=?,`last_entry`=?,`modified_date_time`=?,`terminal_operator`=?,`type`=? where id=?");
            AirCargoManifestDetailDaoImpl.setPreparedStatementValues(ps, airCargoManifestDetail);
            ps.setInt(17, airCargoManifestDetail.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE aman_detail[id=" + airCargoManifestDetail.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from aman_detail where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE aman_detail[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
	@Override
	public List<AirCargoManifestDetail> findAllByAirCargoManifestControl(AirCargoManifestControl airCargoManifestControl) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = null;
            if (airCargoManifestControl == null || airCargoManifestControl.getId() == null) {
            	ps = conn.prepareStatement("select `id`,`id2`,`aman_control_id`,`received_control_number`,`mawb`,`aircraft_agent_tax_number`,`aircraft_agent_branch`,`number_of_hawb`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`,`last_entry`,`modified_date_time`,`terminal_operator`,`type` from aman_detail where aman_control_id=null");
            } else {
            	ps = conn.prepareStatement("select `id`,`id2`,`aman_control_id`,`received_control_number`,`mawb`,`aircraft_agent_tax_number`,`aircraft_agent_branch`,`number_of_hawb`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`,`last_entry`,`modified_date_time`,`terminal_operator`,`type` from aman_detail where aman_control_id=?");
            	ps.setInt(1, airCargoManifestControl.getId());
            }
            
            logger.debug("DB:FIND aman_detail[aman_control_id=" + (airCargoManifestControl != null ? airCargoManifestControl.getId() : "null") + "]");
            
            ResultSet rs = ps.executeQuery();

            List<AirCargoManifestDetail> list = new ArrayList<AirCargoManifestDetail>();
            while (rs.next()) {
                list.add(AirCargoManifestDetailDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            ps.close();

            return list;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

		
	private static String buildClause(AirCargoManifestDetailExample airCargoManifestDetailExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (AirCargoManifestDetailExample.Criteria criteria : airCargoManifestDetailExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (AirCargoManifestDetailExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (airCargoManifestDetailExample.getOrderByClause() != null && !airCargoManifestDetailExample.getOrderByClause().isEmpty()) {
			clause += " order by " + airCargoManifestDetailExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByAirCargoManifestDetailExample(AirCargoManifestDetailExample airCargoManifestDetailExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = AirCargoManifestDetailDaoImpl.buildClause(airCargoManifestDetailExample);			
            ResultSet rs = stmt.executeQuery("select" + (airCargoManifestDetailExample.isDistinct() ? " distinct " : " ") + "count(*) from aman_detail" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT aman_detail[distinct=" + airCargoManifestDetailExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public AirCargoManifestDetail findByAirCargoManifestDetailExample(AirCargoManifestDetailExample airCargoManifestDetailExample) throws DaoException {
		List<AirCargoManifestDetail> res = this.findAllByAirCargoManifestDetailExample(airCargoManifestDetailExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<AirCargoManifestDetail> findAllByAirCargoManifestDetailExample(AirCargoManifestDetailExample airCargoManifestDetailExample) throws DaoException {
    	return this.findAllByAirCargoManifestDetailExample(airCargoManifestDetailExample, 0, 2000);
    }
    
    @Override
    public List<AirCargoManifestDetail> findAllByAirCargoManifestDetailExample(AirCargoManifestDetailExample airCargoManifestDetailExample, int limit) throws DaoException {
    	return this.findAllByAirCargoManifestDetailExample(airCargoManifestDetailExample, 0, limit);
    }
    
    @Override
    public List<AirCargoManifestDetail> findAllByAirCargoManifestDetailExample(AirCargoManifestDetailExample airCargoManifestDetailExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = AirCargoManifestDetailDaoImpl.buildClause(airCargoManifestDetailExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND aman_detail[distinct=" + airCargoManifestDetailExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (airCargoManifestDetailExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`aman_control_id`,`received_control_number`,`mawb`,`aircraft_agent_tax_number`,`aircraft_agent_branch`,`number_of_hawb`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`,`last_entry`,`modified_date_time`,`terminal_operator`,`type` from aman_detail" + clause);

            List<AirCargoManifestDetail> list = new ArrayList<AirCargoManifestDetail>();
            while (rs.next()) {
                list.add(AirCargoManifestDetailDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
