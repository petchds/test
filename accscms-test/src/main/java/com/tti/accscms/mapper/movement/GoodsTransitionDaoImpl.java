package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.GoodsTransitionDao;

import com.tti.accscms.domain.movement.GoodsTransition;
import com.tti.accscms.domain.movement.GoodsTransitionExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table goods_transition
 */
public class GoodsTransitionDaoImpl implements GoodsTransitionDao {

	private static final Logger logger = LoggerFactory.getLogger(GoodsTransitionDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, GoodsTransition goodsTransition) throws SQLException {
		
		if (goodsTransition.getId() != null) {
			ps.setInt(1, goodsTransition.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getId2() != null) {
			ps.setInt(2, goodsTransition.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getDeclarationNo() != null) {
			ps.setString(3, goodsTransition.getDeclarationNo());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getCompanyTaxNo() != null) {
			ps.setString(4, goodsTransition.getCompanyTaxNo());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getCompanyBranch() != null) {
			ps.setInt(5, goodsTransition.getCompanyBranch());
		} else {
			ps.setNull(5, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getNumberOfPackage() != null) {
			ps.setInt(6, goodsTransition.getNumberOfPackage());
		} else {
			ps.setNull(6, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getNumberOfPackageUnit() != null) {
			ps.setString(7, goodsTransition.getNumberOfPackageUnit());
		} else {
			ps.setNull(7, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getGrossWeight() != null) {
			ps.setDouble(8, goodsTransition.getGrossWeight());
		} else {
			ps.setNull(8, java.sql.Types.DOUBLE);
		}

		if (goodsTransition.getGrossWeightUnit() != null) {
			ps.setString(9, goodsTransition.getGrossWeightUnit());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getLastEntry() != null) {
			ps.setString(10, goodsTransition.getLastEntry());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getModifiedDateTime() != null) {
			ps.setTimestamp(11, new java.sql.Timestamp(goodsTransition.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(11, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (goodsTransition.getMawb() != null) {
			ps.setString(12, goodsTransition.getMawb());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getHawb() != null) {
			ps.setString(13, goodsTransition.getHawb());
		} else {
			ps.setNull(13, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getGoodsDescription() != null) {
			ps.setString(14, goodsTransition.getGoodsDescription());
		} else {
			ps.setNull(14, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getStatus0309() != null) {
			ps.setString(15, goodsTransition.getStatus0309());
		} else {
			ps.setNull(15, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getStatus0309DateTime() != null) {
			ps.setTimestamp(16, new java.sql.Timestamp(goodsTransition.getStatus0309DateTime().getTime()));
		} else {
			ps.setNull(16, java.sql.Types.TIMESTAMP);
		}

		if (goodsTransition.getStatus0309By() != null) {
			ps.setString(17, goodsTransition.getStatus0309By());
		} else {
			ps.setNull(17, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getRemark0309() != null) {
			ps.setString(18, goodsTransition.getRemark0309());
		} else {
			ps.setNull(18, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getBalanced() != null) {
			ps.setInt(19, goodsTransition.getBalanced());
		} else {
			ps.setNull(19, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getBalancedDateTime() != null) {
			ps.setTimestamp(20, new java.sql.Timestamp(goodsTransition.getBalancedDateTime().getTime()));
		} else {
			ps.setNull(20, java.sql.Types.TIMESTAMP);
		}

		if (goodsTransition.getBalancedType() != null) {
			ps.setString(21, goodsTransition.getBalancedType());
		} else {
			ps.setNull(21, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getShipperName() != null) {
			ps.setString(22, goodsTransition.getShipperName());
		} else {
			ps.setNull(22, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getRemainNumberOfPackage() != null) {
			ps.setInt(23, goodsTransition.getRemainNumberOfPackage());
		} else {
			ps.setNull(23, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getRemainNumberOfPackageUnit() != null) {
			ps.setString(24, goodsTransition.getRemainNumberOfPackageUnit());
		} else {
			ps.setNull(24, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getRemainGrossWeight() != null) {
			ps.setDouble(25, goodsTransition.getRemainGrossWeight());
		} else {
			ps.setNull(25, java.sql.Types.DOUBLE);
		}

		if (goodsTransition.getRemainGrossWeightUnit() != null) {
			ps.setString(26, goodsTransition.getRemainGrossWeightUnit());
		} else {
			ps.setNull(26, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getReferenceNumber() != null) {
			ps.setString(27, goodsTransition.getReferenceNumber());
		} else {
			ps.setNull(27, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getCompanyName() != null) {
			ps.setString(28, goodsTransition.getCompanyName());
		} else {
			ps.setNull(28, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getStreetAndNumber() != null) {
			ps.setString(29, goodsTransition.getStreetAndNumber());
		} else {
			ps.setNull(29, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getPostcode() != null) {
			ps.setString(30, goodsTransition.getPostcode());
		} else {
			ps.setNull(30, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getCarLicense() != null) {
			ps.setString(31, goodsTransition.getCarLicense());
		} else {
			ps.setNull(31, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getContainerNumber() != null) {
			ps.setString(32, goodsTransition.getContainerNumber());
		} else {
			ps.setNull(32, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getContainerType() != null) {
			ps.setInt(33, goodsTransition.getContainerType());
		} else {
			ps.setNull(33, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getContainerCode() != null) {
			ps.setString(34, goodsTransition.getContainerCode());
		} else {
			ps.setNull(34, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getFlightNo() != null) {
			ps.setString(35, goodsTransition.getFlightNo());
		} else {
			ps.setNull(35, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getFlightDate() != null) {
			ps.setTimestamp(36, new java.sql.Timestamp(goodsTransition.getFlightDate().getTime()));
		} else {
			ps.setNull(36, java.sql.Types.DATE);
		}

		if (goodsTransition.getReleasePort() != null) {
			ps.setInt(37, goodsTransition.getReleasePort());
		} else {
			ps.setNull(37, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getLoadPort() != null) {
			ps.setInt(38, goodsTransition.getLoadPort());
		} else {
			ps.setNull(38, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getPackingPort() != null) {
			ps.setInt(39, goodsTransition.getPackingPort());
		} else {
			ps.setNull(39, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getDischargePort() != null) {
			ps.setString(40, goodsTransition.getDischargePort());
		} else {
			ps.setNull(40, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.geteSeal() != null) {
			ps.setString(41, goodsTransition.geteSeal());
		} else {
			ps.setNull(41, java.sql.Types.VARCHAR);
		}

		if (goodsTransition.getDetailLine() != null) {
			ps.setInt(42, goodsTransition.getDetailLine());
		} else {
			ps.setNull(42, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getIsEditManual() != null) {
			ps.setInt(43, goodsTransition.getIsEditManual());
		} else {
			ps.setNull(43, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getIsManual() != null) {
			ps.setInt(44, goodsTransition.getIsManual());
		} else {
			ps.setNull(44, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getGroupDeclaration() != null) {
			ps.setInt(45, goodsTransition.getGroupDeclaration());
		} else {
			ps.setNull(45, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getIsFromCustoms() != null) {
			ps.setInt(46, goodsTransition.getIsFromCustoms());
		} else {
			ps.setNull(46, java.sql.Types.INTEGER);
		}

		if (goodsTransition.getReceiveDateTime() != null) {
			ps.setTimestamp(47, new java.sql.Timestamp(goodsTransition.getReceiveDateTime().getTime()));
		} else {
			ps.setNull(47, java.sql.Types.TIMESTAMP);
		}

	}

		
	private static GoodsTransition createInstanceFromResultSet(ResultSet rs) throws SQLException {
		GoodsTransition goodsTransition = new GoodsTransition();
		
		Integer col1 = rs.getInt("id");
		goodsTransition.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		goodsTransition.setId2(rs.wasNull() ? null : col2);

		String col3 = rs.getString("declaration_no");
		goodsTransition.setDeclarationNo(rs.wasNull() ? null : col3);

		String col4 = rs.getString("company_tax_no");
		goodsTransition.setCompanyTaxNo(rs.wasNull() ? null : col4);

		Integer col5 = rs.getInt("company_branch");
		goodsTransition.setCompanyBranch(rs.wasNull() ? null : col5);

		Integer col6 = rs.getInt("number_of_package");
		goodsTransition.setNumberOfPackage(rs.wasNull() ? null : col6);

		String col7 = rs.getString("number_of_package_unit");
		goodsTransition.setNumberOfPackageUnit(rs.wasNull() ? null : col7);

		Double col8 = rs.getDouble("gross_weight");
		goodsTransition.setGrossWeight(rs.wasNull() ? null : col8);

		String col9 = rs.getString("gross_weight_unit");
		goodsTransition.setGrossWeightUnit(rs.wasNull() ? null : col9);

		String col10 = rs.getString("last_entry");
		goodsTransition.setLastEntry(rs.wasNull() ? null : col10);

		java.sql.Timestamp col11 = rs.getTimestamp("modified_date_time");
		goodsTransition.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col11.getTime()));

		String col12 = rs.getString("mawb");
		goodsTransition.setMawb(rs.wasNull() ? null : col12);

		String col13 = rs.getString("hawb");
		goodsTransition.setHawb(rs.wasNull() ? null : col13);

		String col14 = rs.getString("goods_description");
		goodsTransition.setGoodsDescription(rs.wasNull() ? null : col14);

		String col15 = rs.getString("status_0309");
		goodsTransition.setStatus0309(rs.wasNull() ? null : col15);

		java.sql.Timestamp col16 = rs.getTimestamp("status_0309_date_time");
		goodsTransition.setStatus0309DateTime(rs.wasNull() ? null : new java.util.Date(col16.getTime()));

		String col17 = rs.getString("status_0309_by");
		goodsTransition.setStatus0309By(rs.wasNull() ? null : col17);

		String col18 = rs.getString("remark_0309");
		goodsTransition.setRemark0309(rs.wasNull() ? null : col18);

		Integer col19 = rs.getInt("balanced");
		goodsTransition.setBalanced(rs.wasNull() ? null : col19);

		java.sql.Timestamp col20 = rs.getTimestamp("balanced_date_time");
		goodsTransition.setBalancedDateTime(rs.wasNull() ? null : new java.util.Date(col20.getTime()));

		String col21 = rs.getString("balanced_type");
		goodsTransition.setBalancedType(rs.wasNull() ? null : col21);

		String col22 = rs.getString("shipper_name");
		goodsTransition.setShipperName(rs.wasNull() ? null : col22);

		Integer col23 = rs.getInt("remain_number_of_package");
		goodsTransition.setRemainNumberOfPackage(rs.wasNull() ? null : col23);

		String col24 = rs.getString("remain_number_of_package_unit");
		goodsTransition.setRemainNumberOfPackageUnit(rs.wasNull() ? null : col24);

		Double col25 = rs.getDouble("remain_gross_weight");
		goodsTransition.setRemainGrossWeight(rs.wasNull() ? null : col25);

		String col26 = rs.getString("remain_gross_weight_unit");
		goodsTransition.setRemainGrossWeightUnit(rs.wasNull() ? null : col26);

		String col27 = rs.getString("reference_number");
		goodsTransition.setReferenceNumber(rs.wasNull() ? null : col27);

		String col28 = rs.getString("company_name");
		goodsTransition.setCompanyName(rs.wasNull() ? null : col28);

		String col29 = rs.getString("street_and_number");
		goodsTransition.setStreetAndNumber(rs.wasNull() ? null : col29);

		String col30 = rs.getString("postcode");
		goodsTransition.setPostcode(rs.wasNull() ? null : col30);

		String col31 = rs.getString("car_license");
		goodsTransition.setCarLicense(rs.wasNull() ? null : col31);

		String col32 = rs.getString("container_number");
		goodsTransition.setContainerNumber(rs.wasNull() ? null : col32);

		Integer col33 = rs.getInt("container_type");
		goodsTransition.setContainerType(rs.wasNull() ? null : col33);

		String col34 = rs.getString("container_code");
		goodsTransition.setContainerCode(rs.wasNull() ? null : col34);

		String col35 = rs.getString("flight_no");
		goodsTransition.setFlightNo(rs.wasNull() ? null : col35);

		java.sql.Timestamp col36 = rs.getTimestamp("flight_date");
		goodsTransition.setFlightDate(rs.wasNull() ? null : new java.util.Date(col36.getTime()));

		Integer col37 = rs.getInt("release_port");
		goodsTransition.setReleasePort(rs.wasNull() ? null : col37);

		Integer col38 = rs.getInt("load_port");
		goodsTransition.setLoadPort(rs.wasNull() ? null : col38);

		Integer col39 = rs.getInt("packing_port");
		goodsTransition.setPackingPort(rs.wasNull() ? null : col39);

		String col40 = rs.getString("discharge_port");
		goodsTransition.setDischargePort(rs.wasNull() ? null : col40);

		String col41 = rs.getString("e_seal");
		goodsTransition.seteSeal(rs.wasNull() ? null : col41);

		Integer col42 = rs.getInt("detail_line");
		goodsTransition.setDetailLine(rs.wasNull() ? null : col42);

		Integer col43 = rs.getInt("is_edit_manual");
		goodsTransition.setIsEditManual(rs.wasNull() ? null : col43);

		Integer col44 = rs.getInt("is_manual");
		goodsTransition.setIsManual(rs.wasNull() ? null : col44);

		Integer col45 = rs.getInt("group_declaration");
		goodsTransition.setGroupDeclaration(rs.wasNull() ? null : col45);

		Integer col46 = rs.getInt("is_from_customs");
		goodsTransition.setIsFromCustoms(rs.wasNull() ? null : col46);

		java.sql.Timestamp col47 = rs.getTimestamp("receive_date_time");
		goodsTransition.setReceiveDateTime(rs.wasNull() ? null : new java.util.Date(col47.getTime()));


		return goodsTransition;
	}  

		
	@Override
	public int insert(GoodsTransition goodsTransition) throws DaoException {
		if (goodsTransition == null) {
			throw new DaoException("Cannot insert goods_transition with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into goods_transition(`id`,`id2`,`declaration_no`,`company_tax_no`,`company_branch`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`last_entry`,`modified_date_time`,`mawb`,`hawb`,`goods_description`,`status_0309`,`status_0309_date_time`,`status_0309_by`,`remark_0309`,`balanced`,`balanced_date_time`,`balanced_type`,`shipper_name`,`remain_number_of_package`,`remain_number_of_package_unit`,`remain_gross_weight`,`remain_gross_weight_unit`,`reference_number`,`company_name`,`street_and_number`,`postcode`,`car_license`,`container_number`,`container_type`,`container_code`,`flight_no`,`flight_date`,`release_port`,`load_port`,`packing_port`,`discharge_port`,`e_seal`,`detail_line`,`is_edit_manual`,`is_manual`,`group_declaration`,`is_from_customs`,`receive_date_time`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            GoodsTransitionDaoImpl.setPreparedStatementValues(ps, goodsTransition);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT goods_transition[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from goods_transition");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT goods_transition => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public GoodsTransition findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`declaration_no`,`company_tax_no`,`company_branch`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`last_entry`,`modified_date_time`,`mawb`,`hawb`,`goods_description`,`status_0309`,`status_0309_date_time`,`status_0309_by`,`remark_0309`,`balanced`,`balanced_date_time`,`balanced_type`,`shipper_name`,`remain_number_of_package`,`remain_number_of_package_unit`,`remain_gross_weight`,`remain_gross_weight_unit`,`reference_number`,`company_name`,`street_and_number`,`postcode`,`car_license`,`container_number`,`container_type`,`container_code`,`flight_no`,`flight_date`,`release_port`,`load_port`,`packing_port`,`discharge_port`,`e_seal`,`detail_line`,`is_edit_manual`,`is_manual`,`group_declaration`,`is_from_customs`,`receive_date_time` from goods_transition where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND goods_transition[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            GoodsTransition instance = null;
            if (rs.next()) {
                instance = GoodsTransitionDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(GoodsTransition goodsTransition) throws DaoException {
		if (goodsTransition == null) {
			throw new DaoException("Cannot insert goods_transition with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update goods_transition set `id`=?,`id2`=?,`declaration_no`=?,`company_tax_no`=?,`company_branch`=?,`number_of_package`=?,`number_of_package_unit`=?,`gross_weight`=?,`gross_weight_unit`=?,`last_entry`=?,`modified_date_time`=?,`mawb`=?,`hawb`=?,`goods_description`=?,`status_0309`=?,`status_0309_date_time`=?,`status_0309_by`=?,`remark_0309`=?,`balanced`=?,`balanced_date_time`=?,`balanced_type`=?,`shipper_name`=?,`remain_number_of_package`=?,`remain_number_of_package_unit`=?,`remain_gross_weight`=?,`remain_gross_weight_unit`=?,`reference_number`=?,`company_name`=?,`street_and_number`=?,`postcode`=?,`car_license`=?,`container_number`=?,`container_type`=?,`container_code`=?,`flight_no`=?,`flight_date`=?,`release_port`=?,`load_port`=?,`packing_port`=?,`discharge_port`=?,`e_seal`=?,`detail_line`=?,`is_edit_manual`=?,`is_manual`=?,`group_declaration`=?,`is_from_customs`=?,`receive_date_time`=? where id=?");
            GoodsTransitionDaoImpl.setPreparedStatementValues(ps, goodsTransition);
            ps.setInt(48, goodsTransition.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE goods_transition[id=" + goodsTransition.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from goods_transition where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE goods_transition[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(GoodsTransitionExample goodsTransitionExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (GoodsTransitionExample.Criteria criteria : goodsTransitionExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (GoodsTransitionExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (goodsTransitionExample.getOrderByClause() != null && !goodsTransitionExample.getOrderByClause().isEmpty()) {
			clause += " order by " + goodsTransitionExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByGoodsTransitionExample(GoodsTransitionExample goodsTransitionExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = GoodsTransitionDaoImpl.buildClause(goodsTransitionExample);			
            ResultSet rs = stmt.executeQuery("select" + (goodsTransitionExample.isDistinct() ? " distinct " : " ") + "count(*) from goods_transition" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT goods_transition[distinct=" + goodsTransitionExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public GoodsTransition findByGoodsTransitionExample(GoodsTransitionExample goodsTransitionExample) throws DaoException {
		List<GoodsTransition> res = this.findAllByGoodsTransitionExample(goodsTransitionExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<GoodsTransition> findAllByGoodsTransitionExample(GoodsTransitionExample goodsTransitionExample) throws DaoException {
    	return this.findAllByGoodsTransitionExample(goodsTransitionExample, 0, 2000);
    }
    
    @Override
    public List<GoodsTransition> findAllByGoodsTransitionExample(GoodsTransitionExample goodsTransitionExample, int limit) throws DaoException {
    	return this.findAllByGoodsTransitionExample(goodsTransitionExample, 0, limit);
    }
    
    @Override
    public List<GoodsTransition> findAllByGoodsTransitionExample(GoodsTransitionExample goodsTransitionExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = GoodsTransitionDaoImpl.buildClause(goodsTransitionExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND goods_transition[distinct=" + goodsTransitionExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (goodsTransitionExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`declaration_no`,`company_tax_no`,`company_branch`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`last_entry`,`modified_date_time`,`mawb`,`hawb`,`goods_description`,`status_0309`,`status_0309_date_time`,`status_0309_by`,`remark_0309`,`balanced`,`balanced_date_time`,`balanced_type`,`shipper_name`,`remain_number_of_package`,`remain_number_of_package_unit`,`remain_gross_weight`,`remain_gross_weight_unit`,`reference_number`,`company_name`,`street_and_number`,`postcode`,`car_license`,`container_number`,`container_type`,`container_code`,`flight_no`,`flight_date`,`release_port`,`load_port`,`packing_port`,`discharge_port`,`e_seal`,`detail_line`,`is_edit_manual`,`is_manual`,`group_declaration`,`is_from_customs`,`receive_date_time` from goods_transition" + clause);

            List<GoodsTransition> list = new ArrayList<GoodsTransition>();
            while (rs.next()) {
                list.add(GoodsTransitionDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
