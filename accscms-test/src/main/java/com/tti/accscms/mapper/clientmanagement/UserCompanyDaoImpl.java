package com.tti.accscms.mapper.clientmanagement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.clientmanagement.UserCompanyDao;

import com.tti.accscms.domain.clientmanagement.UserCompany;
import com.tti.accscms.domain.clientmanagement.UserCompanyExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table user_company
 */
public class UserCompanyDaoImpl implements UserCompanyDao {

	private static final Logger logger = LoggerFactory.getLogger(UserCompanyDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, UserCompany userCompany) throws SQLException {
		
		if (userCompany.getId() != null) {
			ps.setInt(1, userCompany.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (userCompany.getId2() != null) {
			ps.setInt(2, userCompany.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (userCompany.getUsername() != null) {
			ps.setString(3, userCompany.getUsername());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (userCompany.getPassword() != null) {
			ps.setString(4, userCompany.getPassword());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (userCompany.getEmail() != null) {
			ps.setString(5, userCompany.getEmail());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (userCompany.getActivated() != null) {
			ps.setInt(6, userCompany.getActivated());
		} else {
			ps.setNull(6, java.sql.Types.INTEGER);
		}

		if (userCompany.getFirstname() != null) {
			ps.setString(7, userCompany.getFirstname());
		} else {
			ps.setNull(7, java.sql.Types.VARCHAR);
		}

		if (userCompany.getLastname() != null) {
			ps.setString(8, userCompany.getLastname());
		} else {
			ps.setNull(8, java.sql.Types.VARCHAR);
		}

		if (userCompany.getPhoneNo() != null) {
			ps.setString(9, userCompany.getPhoneNo());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (userCompany.getModifiedDate() != null) {
			ps.setTimestamp(10, new java.sql.Timestamp(userCompany.getModifiedDate().getTime()));
		} else {
			ps.setTimestamp(10, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (userCompany.getCompanyType() != null) {
			ps.setString(11, userCompany.getCompanyType());
		} else {
			ps.setNull(11, java.sql.Types.VARCHAR);
		}

		if (userCompany.getCompanyCode() != null) {
			ps.setString(12, userCompany.getCompanyCode());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (userCompany.getMinistry() != null) {
			ps.setString(13, userCompany.getMinistry());
		} else {
			ps.setNull(13, java.sql.Types.VARCHAR);
		}

		if (userCompany.getBuildingFz() != null) {
			ps.setString(14, userCompany.getBuildingFz());
		} else {
			ps.setNull(14, java.sql.Types.VARCHAR);
		}

		if (userCompany.getTaxIncentivesIdOfFactory() != null) {
			ps.setString(15, userCompany.getTaxIncentivesIdOfFactory());
		} else {
			ps.setNull(15, java.sql.Types.VARCHAR);
		}

		if (userCompany.getCompanyTaxNo() != null) {
			ps.setString(16, userCompany.getCompanyTaxNo());
		} else {
			ps.setNull(16, java.sql.Types.VARCHAR);
		}

		if (userCompany.getThaiCompanyName() != null) {
			ps.setString(17, userCompany.getThaiCompanyName());
		} else {
			ps.setNull(17, java.sql.Types.VARCHAR);
		}

		if (userCompany.getEnglishCompanyName() != null) {
			ps.setString(18, userCompany.getEnglishCompanyName());
		} else {
			ps.setNull(18, java.sql.Types.VARCHAR);
		}

		if (userCompany.getAddress() != null) {
			ps.setString(19, userCompany.getAddress());
		} else {
			ps.setNull(19, java.sql.Types.VARCHAR);
		}

		if (userCompany.getDistrict() != null) {
			ps.setString(20, userCompany.getDistrict());
		} else {
			ps.setNull(20, java.sql.Types.VARCHAR);
		}

		if (userCompany.getSubProvince() != null) {
			ps.setString(21, userCompany.getSubProvince());
		} else {
			ps.setNull(21, java.sql.Types.VARCHAR);
		}

		if (userCompany.getProvince() != null) {
			ps.setString(22, userCompany.getProvince());
		} else {
			ps.setNull(22, java.sql.Types.VARCHAR);
		}

		if (userCompany.getPostcode() != null) {
			ps.setString(23, userCompany.getPostcode());
		} else {
			ps.setNull(23, java.sql.Types.VARCHAR);
		}

		if (userCompany.getFaxNo() != null) {
			ps.setString(24, userCompany.getFaxNo());
		} else {
			ps.setNull(24, java.sql.Types.VARCHAR);
		}

		if (userCompany.getWarehouseNo() != null) {
			ps.setString(25, userCompany.getWarehouseNo());
		} else {
			ps.setNull(25, java.sql.Types.VARCHAR);
		}

		if (userCompany.getRoomNo() != null) {
			ps.setString(26, userCompany.getRoomNo());
		} else {
			ps.setNull(26, java.sql.Types.VARCHAR);
		}

		if (userCompany.getCompanyPhoneNo() != null) {
			ps.setString(27, userCompany.getCompanyPhoneNo());
		} else {
			ps.setNull(27, java.sql.Types.VARCHAR);
		}

		if (userCompany.getSecretKey() != null) {
			ps.setString(28, userCompany.getSecretKey());
		} else {
			ps.setNull(28, java.sql.Types.VARCHAR);
		}

		if (userCompany.getCompanyBranchOfFactory() != null) {
			ps.setString(29, userCompany.getCompanyBranchOfFactory());
		} else {
			ps.setNull(29, java.sql.Types.VARCHAR);
		}

		if (userCompany.getWsdl() != null) {
			ps.setString(30, userCompany.getWsdl());
		} else {
			ps.setNull(30, java.sql.Types.VARCHAR);
		}

		if (userCompany.getDbName() != null) {
			ps.setString(31, userCompany.getDbName());
		} else {
			ps.setNull(31, java.sql.Types.VARCHAR);
		}

		if (userCompany.getDbHost() != null) {
			ps.setString(32, userCompany.getDbHost());
		} else {
			ps.setNull(32, java.sql.Types.VARCHAR);
		}

	}

		
	private static UserCompany createInstanceFromResultSet(ResultSet rs) throws SQLException {
		UserCompany userCompany = new UserCompany();
		
		Integer col1 = rs.getInt("id");
		userCompany.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		userCompany.setId2(rs.wasNull() ? null : col2);

		String col3 = rs.getString("username");
		userCompany.setUsername(rs.wasNull() ? null : col3);

		String col4 = rs.getString("password");
		userCompany.setPassword(rs.wasNull() ? null : col4);

		String col5 = rs.getString("email");
		userCompany.setEmail(rs.wasNull() ? null : col5);

		Integer col6 = rs.getInt("activated");
		userCompany.setActivated(rs.wasNull() ? null : col6);

		String col7 = rs.getString("firstname");
		userCompany.setFirstname(rs.wasNull() ? null : col7);

		String col8 = rs.getString("lastname");
		userCompany.setLastname(rs.wasNull() ? null : col8);

		String col9 = rs.getString("phone_no");
		userCompany.setPhoneNo(rs.wasNull() ? null : col9);

		java.sql.Timestamp col10 = rs.getTimestamp("modified_date");
		userCompany.setModifiedDate(rs.wasNull() ? null : new java.util.Date(col10.getTime()));

		String col11 = rs.getString("company_type");
		userCompany.setCompanyType(rs.wasNull() ? null : col11);

		String col12 = rs.getString("company_code");
		userCompany.setCompanyCode(rs.wasNull() ? null : col12);

		String col13 = rs.getString("ministry");
		userCompany.setMinistry(rs.wasNull() ? null : col13);

		String col14 = rs.getString("building_fz");
		userCompany.setBuildingFz(rs.wasNull() ? null : col14);

		String col15 = rs.getString("tax_incentives_id_of_factory");
		userCompany.setTaxIncentivesIdOfFactory(rs.wasNull() ? null : col15);

		String col16 = rs.getString("company_tax_no");
		userCompany.setCompanyTaxNo(rs.wasNull() ? null : col16);

		String col17 = rs.getString("thai_company_name");
		userCompany.setThaiCompanyName(rs.wasNull() ? null : col17);

		String col18 = rs.getString("english_company_name");
		userCompany.setEnglishCompanyName(rs.wasNull() ? null : col18);

		String col19 = rs.getString("address");
		userCompany.setAddress(rs.wasNull() ? null : col19);

		String col20 = rs.getString("district");
		userCompany.setDistrict(rs.wasNull() ? null : col20);

		String col21 = rs.getString("sub_province");
		userCompany.setSubProvince(rs.wasNull() ? null : col21);

		String col22 = rs.getString("province");
		userCompany.setProvince(rs.wasNull() ? null : col22);

		String col23 = rs.getString("postcode");
		userCompany.setPostcode(rs.wasNull() ? null : col23);

		String col24 = rs.getString("fax_no");
		userCompany.setFaxNo(rs.wasNull() ? null : col24);

		String col25 = rs.getString("warehouse_no");
		userCompany.setWarehouseNo(rs.wasNull() ? null : col25);

		String col26 = rs.getString("room_no");
		userCompany.setRoomNo(rs.wasNull() ? null : col26);

		String col27 = rs.getString("company_phone_no");
		userCompany.setCompanyPhoneNo(rs.wasNull() ? null : col27);

		String col28 = rs.getString("secret_key");
		userCompany.setSecretKey(rs.wasNull() ? null : col28);

		String col29 = rs.getString("company_branch_of_factory");
		userCompany.setCompanyBranchOfFactory(rs.wasNull() ? null : col29);

		String col30 = rs.getString("wsdl");
		userCompany.setWsdl(rs.wasNull() ? null : col30);

		String col31 = rs.getString("db_name");
		userCompany.setDbName(rs.wasNull() ? null : col31);

		String col32 = rs.getString("db_host");
		userCompany.setDbHost(rs.wasNull() ? null : col32);


		return userCompany;
	}  

		
	@Override
	public int insert(UserCompany userCompany) throws DaoException {
		if (userCompany == null) {
			throw new DaoException("Cannot insert user_company with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into user_company(`id`,`id2`,`username`,`password`,`email`,`activated`,`firstname`,`lastname`,`phone_no`,`modified_date`,`company_type`,`company_code`,`ministry`,`building_fz`,`tax_incentives_id_of_factory`,`company_tax_no`,`thai_company_name`,`english_company_name`,`address`,`district`,`sub_province`,`province`,`postcode`,`fax_no`,`warehouse_no`,`room_no`,`company_phone_no`,`secret_key`,`company_branch_of_factory`,`wsdl`,`db_name`,`db_host`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            UserCompanyDaoImpl.setPreparedStatementValues(ps, userCompany);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT user_company[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from user_company");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT user_company => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public UserCompany findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`username`,`password`,`email`,`activated`,`firstname`,`lastname`,`phone_no`,`modified_date`,`company_type`,`company_code`,`ministry`,`building_fz`,`tax_incentives_id_of_factory`,`company_tax_no`,`thai_company_name`,`english_company_name`,`address`,`district`,`sub_province`,`province`,`postcode`,`fax_no`,`warehouse_no`,`room_no`,`company_phone_no`,`secret_key`,`company_branch_of_factory`,`wsdl`,`db_name`,`db_host` from user_company where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND user_company[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            UserCompany instance = null;
            if (rs.next()) {
                instance = UserCompanyDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(UserCompany userCompany) throws DaoException {
		if (userCompany == null) {
			throw new DaoException("Cannot insert user_company with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update user_company set `id`=?,`id2`=?,`username`=?,`password`=?,`email`=?,`activated`=?,`firstname`=?,`lastname`=?,`phone_no`=?,`modified_date`=?,`company_type`=?,`company_code`=?,`ministry`=?,`building_fz`=?,`tax_incentives_id_of_factory`=?,`company_tax_no`=?,`thai_company_name`=?,`english_company_name`=?,`address`=?,`district`=?,`sub_province`=?,`province`=?,`postcode`=?,`fax_no`=?,`warehouse_no`=?,`room_no`=?,`company_phone_no`=?,`secret_key`=?,`company_branch_of_factory`=?,`wsdl`=?,`db_name`=?,`db_host`=? where id=?");
            UserCompanyDaoImpl.setPreparedStatementValues(ps, userCompany);
            ps.setInt(33, userCompany.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE user_company[id=" + userCompany.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from user_company where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE user_company[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(UserCompanyExample userCompanyExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (UserCompanyExample.Criteria criteria : userCompanyExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (UserCompanyExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (userCompanyExample.getOrderByClause() != null && !userCompanyExample.getOrderByClause().isEmpty()) {
			clause += " order by " + userCompanyExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByUserCompanyExample(UserCompanyExample userCompanyExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = UserCompanyDaoImpl.buildClause(userCompanyExample);			
            ResultSet rs = stmt.executeQuery("select" + (userCompanyExample.isDistinct() ? " distinct " : " ") + "count(*) from user_company" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT user_company[distinct=" + userCompanyExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public UserCompany findByUserCompanyExample(UserCompanyExample userCompanyExample) throws DaoException {
		List<UserCompany> res = this.findAllByUserCompanyExample(userCompanyExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<UserCompany> findAllByUserCompanyExample(UserCompanyExample userCompanyExample) throws DaoException {
    	return this.findAllByUserCompanyExample(userCompanyExample, 0, 2000);
    }
    
    @Override
    public List<UserCompany> findAllByUserCompanyExample(UserCompanyExample userCompanyExample, int limit) throws DaoException {
    	return this.findAllByUserCompanyExample(userCompanyExample, 0, limit);
    }
    
    @Override
    public List<UserCompany> findAllByUserCompanyExample(UserCompanyExample userCompanyExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = UserCompanyDaoImpl.buildClause(userCompanyExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND user_company[distinct=" + userCompanyExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (userCompanyExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`username`,`password`,`email`,`activated`,`firstname`,`lastname`,`phone_no`,`modified_date`,`company_type`,`company_code`,`ministry`,`building_fz`,`tax_incentives_id_of_factory`,`company_tax_no`,`thai_company_name`,`english_company_name`,`address`,`district`,`sub_province`,`province`,`postcode`,`fax_no`,`warehouse_no`,`room_no`,`company_phone_no`,`secret_key`,`company_branch_of_factory`,`wsdl`,`db_name`,`db_host` from user_company" + clause);

            List<UserCompany> list = new ArrayList<UserCompany>();
            while (rs.next()) {
                list.add(UserCompanyDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
