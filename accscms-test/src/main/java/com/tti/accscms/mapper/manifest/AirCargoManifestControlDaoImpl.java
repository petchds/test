package com.tti.accscms.mapper.manifest;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.manifest.AirCargoManifestControlDao;

import com.tti.accscms.domain.manifest.AirCargoManifestControl;
import com.tti.accscms.domain.manifest.AirCargoManifestControlExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table aman_control
 */
public class AirCargoManifestControlDaoImpl implements AirCargoManifestControlDao {

	private static final Logger logger = LoggerFactory.getLogger(AirCargoManifestControlDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, AirCargoManifestControl airCargoManifestControl) throws SQLException {
		
		if (airCargoManifestControl.getId() != null) {
			ps.setInt(1, airCargoManifestControl.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (airCargoManifestControl.getId2() != null) {
			ps.setInt(2, airCargoManifestControl.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (airCargoManifestControl.getReferenceNumber() != null) {
			ps.setString(3, airCargoManifestControl.getReferenceNumber());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControl.getReceivedControlNumber() != null) {
			ps.setString(4, airCargoManifestControl.getReceivedControlNumber());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControl.getPortOfLoading() != null) {
			ps.setString(5, airCargoManifestControl.getPortOfLoading());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControl.getPortOfDischarge() != null) {
			ps.setString(6, airCargoManifestControl.getPortOfDischarge());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControl.getProcessingIndicator() != null) {
			ps.setString(7, airCargoManifestControl.getProcessingIndicator());
		} else {
			ps.setNull(7, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControl.getMessageFunction() != null) {
			ps.setString(8, airCargoManifestControl.getMessageFunction());
		} else {
			ps.setNull(8, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControl.getRegistrationId() != null) {
			ps.setString(9, airCargoManifestControl.getRegistrationId());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControl.getModifiedDateTime() != null) {
			ps.setTimestamp(10, new java.sql.Timestamp(airCargoManifestControl.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(10, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (airCargoManifestControl.getType() != null) {
			ps.setInt(11, airCargoManifestControl.getType());
		} else {
			ps.setNull(11, java.sql.Types.INTEGER);
		}

		if (airCargoManifestControl.getFlightNo() != null) {
			ps.setString(12, airCargoManifestControl.getFlightNo());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (airCargoManifestControl.getFlightDate() != null) {
			ps.setTimestamp(13, new java.sql.Timestamp(airCargoManifestControl.getFlightDate().getTime()));
		} else {
			ps.setNull(13, java.sql.Types.DATE);
		}

	}

		
	private static AirCargoManifestControl createInstanceFromResultSet(ResultSet rs) throws SQLException {
		AirCargoManifestControl airCargoManifestControl = new AirCargoManifestControl();
		
		Integer col1 = rs.getInt("id");
		airCargoManifestControl.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		airCargoManifestControl.setId2(rs.wasNull() ? null : col2);

		String col3 = rs.getString("reference_number");
		airCargoManifestControl.setReferenceNumber(rs.wasNull() ? null : col3);

		String col4 = rs.getString("received_control_number");
		airCargoManifestControl.setReceivedControlNumber(rs.wasNull() ? null : col4);

		String col5 = rs.getString("port_of_loading");
		airCargoManifestControl.setPortOfLoading(rs.wasNull() ? null : col5);

		String col6 = rs.getString("port_of_discharge");
		airCargoManifestControl.setPortOfDischarge(rs.wasNull() ? null : col6);

		String col7 = rs.getString("processing_indicator");
		airCargoManifestControl.setProcessingIndicator(rs.wasNull() ? null : col7);

		String col8 = rs.getString("message_function");
		airCargoManifestControl.setMessageFunction(rs.wasNull() ? null : col8);

		String col9 = rs.getString("registration_id");
		airCargoManifestControl.setRegistrationId(rs.wasNull() ? null : col9);

		java.sql.Timestamp col10 = rs.getTimestamp("modified_date_time");
		airCargoManifestControl.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col10.getTime()));

		Integer col11 = rs.getInt("type");
		airCargoManifestControl.setType(rs.wasNull() ? null : col11);

		String col12 = rs.getString("flight_no");
		airCargoManifestControl.setFlightNo(rs.wasNull() ? null : col12);

		java.sql.Timestamp col13 = rs.getTimestamp("flight_date");
		airCargoManifestControl.setFlightDate(rs.wasNull() ? null : new java.util.Date(col13.getTime()));


		return airCargoManifestControl;
	}  

		
	@Override
	public int insert(AirCargoManifestControl airCargoManifestControl) throws DaoException {
		if (airCargoManifestControl == null) {
			throw new DaoException("Cannot insert aman_control with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into aman_control(`id`,`id2`,`reference_number`,`received_control_number`,`port_of_loading`,`port_of_discharge`,`processing_indicator`,`message_function`,`registration_id`,`modified_date_time`,`type`,`flight_no`,`flight_date`) values(?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            AirCargoManifestControlDaoImpl.setPreparedStatementValues(ps, airCargoManifestControl);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT aman_control[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from aman_control");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT aman_control => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public AirCargoManifestControl findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`reference_number`,`received_control_number`,`port_of_loading`,`port_of_discharge`,`processing_indicator`,`message_function`,`registration_id`,`modified_date_time`,`type`,`flight_no`,`flight_date` from aman_control where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND aman_control[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            AirCargoManifestControl instance = null;
            if (rs.next()) {
                instance = AirCargoManifestControlDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(AirCargoManifestControl airCargoManifestControl) throws DaoException {
		if (airCargoManifestControl == null) {
			throw new DaoException("Cannot insert aman_control with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update aman_control set `id`=?,`id2`=?,`reference_number`=?,`received_control_number`=?,`port_of_loading`=?,`port_of_discharge`=?,`processing_indicator`=?,`message_function`=?,`registration_id`=?,`modified_date_time`=?,`type`=?,`flight_no`=?,`flight_date`=? where id=?");
            AirCargoManifestControlDaoImpl.setPreparedStatementValues(ps, airCargoManifestControl);
            ps.setInt(14, airCargoManifestControl.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE aman_control[id=" + airCargoManifestControl.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from aman_control where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE aman_control[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(AirCargoManifestControlExample airCargoManifestControlExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (AirCargoManifestControlExample.Criteria criteria : airCargoManifestControlExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (AirCargoManifestControlExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (airCargoManifestControlExample.getOrderByClause() != null && !airCargoManifestControlExample.getOrderByClause().isEmpty()) {
			clause += " order by " + airCargoManifestControlExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByAirCargoManifestControlExample(AirCargoManifestControlExample airCargoManifestControlExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = AirCargoManifestControlDaoImpl.buildClause(airCargoManifestControlExample);			
            ResultSet rs = stmt.executeQuery("select" + (airCargoManifestControlExample.isDistinct() ? " distinct " : " ") + "count(*) from aman_control" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT aman_control[distinct=" + airCargoManifestControlExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public AirCargoManifestControl findByAirCargoManifestControlExample(AirCargoManifestControlExample airCargoManifestControlExample) throws DaoException {
		List<AirCargoManifestControl> res = this.findAllByAirCargoManifestControlExample(airCargoManifestControlExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<AirCargoManifestControl> findAllByAirCargoManifestControlExample(AirCargoManifestControlExample airCargoManifestControlExample) throws DaoException {
    	return this.findAllByAirCargoManifestControlExample(airCargoManifestControlExample, 0, 2000);
    }
    
    @Override
    public List<AirCargoManifestControl> findAllByAirCargoManifestControlExample(AirCargoManifestControlExample airCargoManifestControlExample, int limit) throws DaoException {
    	return this.findAllByAirCargoManifestControlExample(airCargoManifestControlExample, 0, limit);
    }
    
    @Override
    public List<AirCargoManifestControl> findAllByAirCargoManifestControlExample(AirCargoManifestControlExample airCargoManifestControlExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = AirCargoManifestControlDaoImpl.buildClause(airCargoManifestControlExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND aman_control[distinct=" + airCargoManifestControlExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (airCargoManifestControlExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`reference_number`,`received_control_number`,`port_of_loading`,`port_of_discharge`,`processing_indicator`,`message_function`,`registration_id`,`modified_date_time`,`type`,`flight_no`,`flight_date` from aman_control" + clause);

            List<AirCargoManifestControl> list = new ArrayList<AirCargoManifestControl>();
            while (rs.next()) {
                list.add(AirCargoManifestControlDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
