package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.ShipmentMovementStatusHistoryDao;

import com.tti.accscms.domain.movement.ShipmentMovementStatusHistory;
import com.tti.accscms.domain.movement.ShipmentMovementStatusHistoryExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table shp_movement_status_his
 */
public class ShipmentMovementStatusHistoryDaoImpl implements ShipmentMovementStatusHistoryDao {

	private static final Logger logger = LoggerFactory.getLogger(ShipmentMovementStatusHistoryDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, ShipmentMovementStatusHistory shipmentMovementStatusHistory) throws SQLException {
		
		if (shipmentMovementStatusHistory.getId() != null) {
			ps.setInt(1, shipmentMovementStatusHistory.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (shipmentMovementStatusHistory.getId2() != null) {
			ps.setInt(2, shipmentMovementStatusHistory.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (shipmentMovementStatusHistory.getShpMovementStatusId() != null) {
			ps.setInt(3, shipmentMovementStatusHistory.getShpMovementStatusId());
		} else {
			ps.setNull(3, java.sql.Types.INTEGER);
		}

		if (shipmentMovementStatusHistory.getRequestNo() != null) {
			ps.setString(4, shipmentMovementStatusHistory.getRequestNo());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getDeclarationNo() != null) {
			ps.setString(5, shipmentMovementStatusHistory.getDeclarationNo());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getTransactionNo() != null) {
			ps.setString(6, shipmentMovementStatusHistory.getTransactionNo());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getMawb() != null) {
			ps.setString(7, shipmentMovementStatusHistory.getMawb());
		} else {
			ps.setNull(7, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getHawb() != null) {
			ps.setString(8, shipmentMovementStatusHistory.getHawb());
		} else {
			ps.setNull(8, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getFlightNo() != null) {
			ps.setString(9, shipmentMovementStatusHistory.getFlightNo());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getFlightDate() != null) {
			ps.setTimestamp(10, new java.sql.Timestamp(shipmentMovementStatusHistory.getFlightDate().getTime()));
		} else {
			ps.setNull(10, java.sql.Types.DATE);
		}

		if (shipmentMovementStatusHistory.getStatus() != null) {
			ps.setString(11, shipmentMovementStatusHistory.getStatus());
		} else {
			ps.setNull(11, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getRemark() != null) {
			ps.setString(12, shipmentMovementStatusHistory.getRemark());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getStatusDateTime() != null) {
			ps.setTimestamp(13, new java.sql.Timestamp(shipmentMovementStatusHistory.getStatusDateTime().getTime()));
		} else {
			ps.setNull(13, java.sql.Types.TIMESTAMP);
		}

		if (shipmentMovementStatusHistory.getNumberOfPackage() != null) {
			ps.setInt(14, shipmentMovementStatusHistory.getNumberOfPackage());
		} else {
			ps.setNull(14, java.sql.Types.INTEGER);
		}

		if (shipmentMovementStatusHistory.getNumberOfPackageUnit() != null) {
			ps.setString(15, shipmentMovementStatusHistory.getNumberOfPackageUnit());
		} else {
			ps.setNull(15, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getGrossWeight() != null) {
			ps.setDouble(16, shipmentMovementStatusHistory.getGrossWeight());
		} else {
			ps.setNull(16, java.sql.Types.DOUBLE);
		}

		if (shipmentMovementStatusHistory.getGrossWeightUnit() != null) {
			ps.setString(17, shipmentMovementStatusHistory.getGrossWeightUnit());
		} else {
			ps.setNull(17, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getRegistrationId() != null) {
			ps.setString(18, shipmentMovementStatusHistory.getRegistrationId());
		} else {
			ps.setNull(18, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getGroupDeclaration() != null) {
			ps.setInt(19, shipmentMovementStatusHistory.getGroupDeclaration());
		} else {
			ps.setNull(19, java.sql.Types.INTEGER);
		}

		if (shipmentMovementStatusHistory.getUser() != null) {
			ps.setString(20, shipmentMovementStatusHistory.getUser());
		} else {
			ps.setNull(20, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getType() != null) {
			ps.setInt(21, shipmentMovementStatusHistory.getType());
		} else {
			ps.setNull(21, java.sql.Types.INTEGER);
		}

		if (shipmentMovementStatusHistory.getNetWeight() != null) {
			ps.setDouble(22, shipmentMovementStatusHistory.getNetWeight());
		} else {
			ps.setNull(22, java.sql.Types.DOUBLE);
		}

		if (shipmentMovementStatusHistory.getNetWeightUnit() != null) {
			ps.setString(23, shipmentMovementStatusHistory.getNetWeightUnit());
		} else {
			ps.setNull(23, java.sql.Types.VARCHAR);
		}

		if (shipmentMovementStatusHistory.getQuantity() != null) {
			ps.setInt(24, shipmentMovementStatusHistory.getQuantity());
		} else {
			ps.setNull(24, java.sql.Types.INTEGER);
		}

		if (shipmentMovementStatusHistory.getQuantityUnit() != null) {
			ps.setString(25, shipmentMovementStatusHistory.getQuantityUnit());
		} else {
			ps.setNull(25, java.sql.Types.VARCHAR);
		}

	}

		
	private static ShipmentMovementStatusHistory createInstanceFromResultSet(ResultSet rs) throws SQLException {
		ShipmentMovementStatusHistory shipmentMovementStatusHistory = new ShipmentMovementStatusHistory();
		
		Integer col1 = rs.getInt("id");
		shipmentMovementStatusHistory.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		shipmentMovementStatusHistory.setId2(rs.wasNull() ? null : col2);

		Integer col3 = rs.getInt("shp_movement_status_id");
		shipmentMovementStatusHistory.setShpMovementStatusId(rs.wasNull() ? null : col3);

		String col4 = rs.getString("request_no");
		shipmentMovementStatusHistory.setRequestNo(rs.wasNull() ? null : col4);

		String col5 = rs.getString("declaration_no");
		shipmentMovementStatusHistory.setDeclarationNo(rs.wasNull() ? null : col5);

		String col6 = rs.getString("transaction_no");
		shipmentMovementStatusHistory.setTransactionNo(rs.wasNull() ? null : col6);

		String col7 = rs.getString("mawb");
		shipmentMovementStatusHistory.setMawb(rs.wasNull() ? null : col7);

		String col8 = rs.getString("hawb");
		shipmentMovementStatusHistory.setHawb(rs.wasNull() ? null : col8);

		String col9 = rs.getString("flight_no");
		shipmentMovementStatusHistory.setFlightNo(rs.wasNull() ? null : col9);

		java.sql.Timestamp col10 = rs.getTimestamp("flight_date");
		shipmentMovementStatusHistory.setFlightDate(rs.wasNull() ? null : new java.util.Date(col10.getTime()));

		String col11 = rs.getString("status");
		shipmentMovementStatusHistory.setStatus(rs.wasNull() ? null : col11);

		String col12 = rs.getString("remark");
		shipmentMovementStatusHistory.setRemark(rs.wasNull() ? null : col12);

		java.sql.Timestamp col13 = rs.getTimestamp("status_date_time");
		shipmentMovementStatusHistory.setStatusDateTime(rs.wasNull() ? null : new java.util.Date(col13.getTime()));

		Integer col14 = rs.getInt("number_of_package");
		shipmentMovementStatusHistory.setNumberOfPackage(rs.wasNull() ? null : col14);

		String col15 = rs.getString("number_of_package_unit");
		shipmentMovementStatusHistory.setNumberOfPackageUnit(rs.wasNull() ? null : col15);

		Double col16 = rs.getDouble("gross_weight");
		shipmentMovementStatusHistory.setGrossWeight(rs.wasNull() ? null : col16);

		String col17 = rs.getString("gross_weight_unit");
		shipmentMovementStatusHistory.setGrossWeightUnit(rs.wasNull() ? null : col17);

		String col18 = rs.getString("registration_id");
		shipmentMovementStatusHistory.setRegistrationId(rs.wasNull() ? null : col18);

		Integer col19 = rs.getInt("group_declaration");
		shipmentMovementStatusHistory.setGroupDeclaration(rs.wasNull() ? null : col19);

		String col20 = rs.getString("user");
		shipmentMovementStatusHistory.setUser(rs.wasNull() ? null : col20);

		Integer col21 = rs.getInt("type");
		shipmentMovementStatusHistory.setType(rs.wasNull() ? null : col21);

		Double col22 = rs.getDouble("net_weight");
		shipmentMovementStatusHistory.setNetWeight(rs.wasNull() ? null : col22);

		String col23 = rs.getString("net_weight_unit");
		shipmentMovementStatusHistory.setNetWeightUnit(rs.wasNull() ? null : col23);

		Integer col24 = rs.getInt("quantity");
		shipmentMovementStatusHistory.setQuantity(rs.wasNull() ? null : col24);

		String col25 = rs.getString("quantity_unit");
		shipmentMovementStatusHistory.setQuantityUnit(rs.wasNull() ? null : col25);


		return shipmentMovementStatusHistory;
	}  

		
	@Override
	public int insert(ShipmentMovementStatusHistory shipmentMovementStatusHistory) throws DaoException {
		if (shipmentMovementStatusHistory == null) {
			throw new DaoException("Cannot insert shp_movement_status_his with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into shp_movement_status_his(`id`,`id2`,`shp_movement_status_id`,`request_no`,`declaration_no`,`transaction_no`,`mawb`,`hawb`,`flight_no`,`flight_date`,`status`,`remark`,`status_date_time`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`registration_id`,`group_declaration`,`user`,`type`,`net_weight`,`net_weight_unit`,`quantity`,`quantity_unit`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            ShipmentMovementStatusHistoryDaoImpl.setPreparedStatementValues(ps, shipmentMovementStatusHistory);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT shp_movement_status_his[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from shp_movement_status_his");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT shp_movement_status_his => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public ShipmentMovementStatusHistory findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`shp_movement_status_id`,`request_no`,`declaration_no`,`transaction_no`,`mawb`,`hawb`,`flight_no`,`flight_date`,`status`,`remark`,`status_date_time`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`registration_id`,`group_declaration`,`user`,`type`,`net_weight`,`net_weight_unit`,`quantity`,`quantity_unit` from shp_movement_status_his where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND shp_movement_status_his[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            ShipmentMovementStatusHistory instance = null;
            if (rs.next()) {
                instance = ShipmentMovementStatusHistoryDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(ShipmentMovementStatusHistory shipmentMovementStatusHistory) throws DaoException {
		if (shipmentMovementStatusHistory == null) {
			throw new DaoException("Cannot insert shp_movement_status_his with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update shp_movement_status_his set `id`=?,`id2`=?,`shp_movement_status_id`=?,`request_no`=?,`declaration_no`=?,`transaction_no`=?,`mawb`=?,`hawb`=?,`flight_no`=?,`flight_date`=?,`status`=?,`remark`=?,`status_date_time`=?,`number_of_package`=?,`number_of_package_unit`=?,`gross_weight`=?,`gross_weight_unit`=?,`registration_id`=?,`group_declaration`=?,`user`=?,`type`=?,`net_weight`=?,`net_weight_unit`=?,`quantity`=?,`quantity_unit`=? where id=?");
            ShipmentMovementStatusHistoryDaoImpl.setPreparedStatementValues(ps, shipmentMovementStatusHistory);
            ps.setInt(26, shipmentMovementStatusHistory.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE shp_movement_status_his[id=" + shipmentMovementStatusHistory.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from shp_movement_status_his where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE shp_movement_status_his[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(ShipmentMovementStatusHistoryExample shipmentMovementStatusHistoryExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (ShipmentMovementStatusHistoryExample.Criteria criteria : shipmentMovementStatusHistoryExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (ShipmentMovementStatusHistoryExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (shipmentMovementStatusHistoryExample.getOrderByClause() != null && !shipmentMovementStatusHistoryExample.getOrderByClause().isEmpty()) {
			clause += " order by " + shipmentMovementStatusHistoryExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByShipmentMovementStatusHistoryExample(ShipmentMovementStatusHistoryExample shipmentMovementStatusHistoryExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = ShipmentMovementStatusHistoryDaoImpl.buildClause(shipmentMovementStatusHistoryExample);			
            ResultSet rs = stmt.executeQuery("select" + (shipmentMovementStatusHistoryExample.isDistinct() ? " distinct " : " ") + "count(*) from shp_movement_status_his" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT shp_movement_status_his[distinct=" + shipmentMovementStatusHistoryExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public ShipmentMovementStatusHistory findByShipmentMovementStatusHistoryExample(ShipmentMovementStatusHistoryExample shipmentMovementStatusHistoryExample) throws DaoException {
		List<ShipmentMovementStatusHistory> res = this.findAllByShipmentMovementStatusHistoryExample(shipmentMovementStatusHistoryExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<ShipmentMovementStatusHistory> findAllByShipmentMovementStatusHistoryExample(ShipmentMovementStatusHistoryExample shipmentMovementStatusHistoryExample) throws DaoException {
    	return this.findAllByShipmentMovementStatusHistoryExample(shipmentMovementStatusHistoryExample, 0, 2000);
    }
    
    @Override
    public List<ShipmentMovementStatusHistory> findAllByShipmentMovementStatusHistoryExample(ShipmentMovementStatusHistoryExample shipmentMovementStatusHistoryExample, int limit) throws DaoException {
    	return this.findAllByShipmentMovementStatusHistoryExample(shipmentMovementStatusHistoryExample, 0, limit);
    }
    
    @Override
    public List<ShipmentMovementStatusHistory> findAllByShipmentMovementStatusHistoryExample(ShipmentMovementStatusHistoryExample shipmentMovementStatusHistoryExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = ShipmentMovementStatusHistoryDaoImpl.buildClause(shipmentMovementStatusHistoryExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND shp_movement_status_his[distinct=" + shipmentMovementStatusHistoryExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (shipmentMovementStatusHistoryExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`shp_movement_status_id`,`request_no`,`declaration_no`,`transaction_no`,`mawb`,`hawb`,`flight_no`,`flight_date`,`status`,`remark`,`status_date_time`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`registration_id`,`group_declaration`,`user`,`type`,`net_weight`,`net_weight_unit`,`quantity`,`quantity_unit` from shp_movement_status_his" + clause);

            List<ShipmentMovementStatusHistory> list = new ArrayList<ShipmentMovementStatusHistory>();
            while (rs.next()) {
                list.add(ShipmentMovementStatusHistoryDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
