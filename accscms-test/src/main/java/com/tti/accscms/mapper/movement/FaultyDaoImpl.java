package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.FaultyDao;

import com.tti.accscms.domain.movement.Faulty;
import com.tti.accscms.domain.movement.FaultyExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table faulty
 */
public class FaultyDaoImpl implements FaultyDao {

	private static final Logger logger = LoggerFactory.getLogger(FaultyDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, Faulty faulty) throws SQLException {
		
		if (faulty.getId() != null) {
			ps.setInt(1, faulty.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (faulty.getId2() != null) {
			ps.setInt(2, faulty.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (faulty.getDeclarationNo() != null) {
			ps.setString(3, faulty.getDeclarationNo());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (faulty.getFaultyDateTime() != null) {
			ps.setTimestamp(4, new java.sql.Timestamp(faulty.getFaultyDateTime().getTime()));
		} else {
			ps.setNull(4, java.sql.Types.TIMESTAMP);
		}

		if (faulty.getUserFaulty() != null) {
			ps.setString(5, faulty.getUserFaulty());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (faulty.getUserUnfaulty() != null) {
			ps.setString(6, faulty.getUserUnfaulty());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (faulty.getStatus() != null) {
			ps.setString(7, faulty.getStatus());
		} else {
			ps.setNull(7, java.sql.Types.VARCHAR);
		}

		if (faulty.getCompanyType() != null) {
			ps.setString(8, faulty.getCompanyType());
		} else {
			ps.setNull(8, java.sql.Types.VARCHAR);
		}

		if (faulty.getCompanyCode() != null) {
			ps.setString(9, faulty.getCompanyCode());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (faulty.getShedNo() != null) {
			ps.setString(10, faulty.getShedNo());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (faulty.getTmoRemark() != null) {
			ps.setString(11, faulty.getTmoRemark());
		} else {
			ps.setNull(11, java.sql.Types.VARCHAR);
		}

		if (faulty.getTmoNumberOfPackage() != null) {
			ps.setInt(12, faulty.getTmoNumberOfPackage());
		} else {
			ps.setNull(12, java.sql.Types.INTEGER);
		}

		if (faulty.getTmoGrossWeight() != null) {
			ps.setDouble(13, faulty.getTmoGrossWeight());
		} else {
			ps.setNull(13, java.sql.Types.DOUBLE);
		}

		if (faulty.getCustomsNumberOfPackage() != null) {
			ps.setInt(14, faulty.getCustomsNumberOfPackage());
		} else {
			ps.setNull(14, java.sql.Types.INTEGER);
		}

		if (faulty.getCustomsGrossWeight() != null) {
			ps.setDouble(15, faulty.getCustomsGrossWeight());
		} else {
			ps.setNull(15, java.sql.Types.DOUBLE);
		}

		if (faulty.getCustomsUser() != null) {
			ps.setString(16, faulty.getCustomsUser());
		} else {
			ps.setNull(16, java.sql.Types.VARCHAR);
		}

		if (faulty.getCustomsRemark() != null) {
			ps.setString(17, faulty.getCustomsRemark());
		} else {
			ps.setNull(17, java.sql.Types.VARCHAR);
		}

		if (faulty.getCustomsNumberOfPackageUnit() != null) {
			ps.setString(18, faulty.getCustomsNumberOfPackageUnit());
		} else {
			ps.setNull(18, java.sql.Types.VARCHAR);
		}

		if (faulty.getCustomsGrossWeightUnit() != null) {
			ps.setString(19, faulty.getCustomsGrossWeightUnit());
		} else {
			ps.setNull(19, java.sql.Types.VARCHAR);
		}

		if (faulty.getTmoNumberOfPackageUnit() != null) {
			ps.setString(20, faulty.getTmoNumberOfPackageUnit());
		} else {
			ps.setNull(20, java.sql.Types.VARCHAR);
		}

		if (faulty.getTmoGrossWeightUnit() != null) {
			ps.setString(21, faulty.getTmoGrossWeightUnit());
		} else {
			ps.setNull(21, java.sql.Types.VARCHAR);
		}

		if (faulty.getModifiedDateTime() != null) {
			ps.setTimestamp(22, new java.sql.Timestamp(faulty.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(22, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (faulty.getUnfaultyDateTime() != null) {
			ps.setTimestamp(23, new java.sql.Timestamp(faulty.getUnfaultyDateTime().getTime()));
		} else {
			ps.setNull(23, java.sql.Types.TIMESTAMP);
		}

		if (faulty.getMawb() != null) {
			ps.setString(24, faulty.getMawb());
		} else {
			ps.setNull(24, java.sql.Types.VARCHAR);
		}

		if (faulty.getHawb() != null) {
			ps.setString(25, faulty.getHawb());
		} else {
			ps.setNull(25, java.sql.Types.VARCHAR);
		}

		if (faulty.getFlightNo() != null) {
			ps.setString(26, faulty.getFlightNo());
		} else {
			ps.setNull(26, java.sql.Types.VARCHAR);
		}

		if (faulty.getFlightDate() != null) {
			ps.setTimestamp(27, new java.sql.Timestamp(faulty.getFlightDate().getTime()));
		} else {
			ps.setNull(27, java.sql.Types.DATE);
		}

	}

		
	private static Faulty createInstanceFromResultSet(ResultSet rs) throws SQLException {
		Faulty faulty = new Faulty();
		
		Integer col1 = rs.getInt("id");
		faulty.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		faulty.setId2(rs.wasNull() ? null : col2);

		String col3 = rs.getString("declaration_no");
		faulty.setDeclarationNo(rs.wasNull() ? null : col3);

		java.sql.Timestamp col4 = rs.getTimestamp("faulty_date_time");
		faulty.setFaultyDateTime(rs.wasNull() ? null : new java.util.Date(col4.getTime()));

		String col5 = rs.getString("user_faulty");
		faulty.setUserFaulty(rs.wasNull() ? null : col5);

		String col6 = rs.getString("user_unfaulty");
		faulty.setUserUnfaulty(rs.wasNull() ? null : col6);

		String col7 = rs.getString("status");
		faulty.setStatus(rs.wasNull() ? null : col7);

		String col8 = rs.getString("company_type");
		faulty.setCompanyType(rs.wasNull() ? null : col8);

		String col9 = rs.getString("company_code");
		faulty.setCompanyCode(rs.wasNull() ? null : col9);

		String col10 = rs.getString("shed_no");
		faulty.setShedNo(rs.wasNull() ? null : col10);

		String col11 = rs.getString("tmo_remark");
		faulty.setTmoRemark(rs.wasNull() ? null : col11);

		Integer col12 = rs.getInt("tmo_number_of_package");
		faulty.setTmoNumberOfPackage(rs.wasNull() ? null : col12);

		Double col13 = rs.getDouble("tmo_gross_weight");
		faulty.setTmoGrossWeight(rs.wasNull() ? null : col13);

		Integer col14 = rs.getInt("customs_number_of_package");
		faulty.setCustomsNumberOfPackage(rs.wasNull() ? null : col14);

		Double col15 = rs.getDouble("customs_gross_weight");
		faulty.setCustomsGrossWeight(rs.wasNull() ? null : col15);

		String col16 = rs.getString("customs_user");
		faulty.setCustomsUser(rs.wasNull() ? null : col16);

		String col17 = rs.getString("customs_remark");
		faulty.setCustomsRemark(rs.wasNull() ? null : col17);

		String col18 = rs.getString("customs_number_of_package_unit");
		faulty.setCustomsNumberOfPackageUnit(rs.wasNull() ? null : col18);

		String col19 = rs.getString("customs_gross_weight_unit");
		faulty.setCustomsGrossWeightUnit(rs.wasNull() ? null : col19);

		String col20 = rs.getString("tmo_number_of_package_unit");
		faulty.setTmoNumberOfPackageUnit(rs.wasNull() ? null : col20);

		String col21 = rs.getString("tmo_gross_weight_unit");
		faulty.setTmoGrossWeightUnit(rs.wasNull() ? null : col21);

		java.sql.Timestamp col22 = rs.getTimestamp("modified_date_time");
		faulty.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col22.getTime()));

		java.sql.Timestamp col23 = rs.getTimestamp("unfaulty_date_time");
		faulty.setUnfaultyDateTime(rs.wasNull() ? null : new java.util.Date(col23.getTime()));

		String col24 = rs.getString("mawb");
		faulty.setMawb(rs.wasNull() ? null : col24);

		String col25 = rs.getString("hawb");
		faulty.setHawb(rs.wasNull() ? null : col25);

		String col26 = rs.getString("flight_no");
		faulty.setFlightNo(rs.wasNull() ? null : col26);

		java.sql.Timestamp col27 = rs.getTimestamp("flight_date");
		faulty.setFlightDate(rs.wasNull() ? null : new java.util.Date(col27.getTime()));


		return faulty;
	}  

		
	@Override
	public int insert(Faulty faulty) throws DaoException {
		if (faulty == null) {
			throw new DaoException("Cannot insert faulty with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into faulty(`id`,`id2`,`declaration_no`,`faulty_date_time`,`user_faulty`,`user_unfaulty`,`status`,`company_type`,`company_code`,`shed_no`,`tmo_remark`,`tmo_number_of_package`,`tmo_gross_weight`,`customs_number_of_package`,`customs_gross_weight`,`customs_user`,`customs_remark`,`customs_number_of_package_unit`,`customs_gross_weight_unit`,`tmo_number_of_package_unit`,`tmo_gross_weight_unit`,`modified_date_time`,`unfaulty_date_time`,`mawb`,`hawb`,`flight_no`,`flight_date`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            FaultyDaoImpl.setPreparedStatementValues(ps, faulty);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT faulty[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from faulty");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT faulty => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public Faulty findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`declaration_no`,`faulty_date_time`,`user_faulty`,`user_unfaulty`,`status`,`company_type`,`company_code`,`shed_no`,`tmo_remark`,`tmo_number_of_package`,`tmo_gross_weight`,`customs_number_of_package`,`customs_gross_weight`,`customs_user`,`customs_remark`,`customs_number_of_package_unit`,`customs_gross_weight_unit`,`tmo_number_of_package_unit`,`tmo_gross_weight_unit`,`modified_date_time`,`unfaulty_date_time`,`mawb`,`hawb`,`flight_no`,`flight_date` from faulty where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND faulty[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            Faulty instance = null;
            if (rs.next()) {
                instance = FaultyDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(Faulty faulty) throws DaoException {
		if (faulty == null) {
			throw new DaoException("Cannot insert faulty with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update faulty set `id`=?,`id2`=?,`declaration_no`=?,`faulty_date_time`=?,`user_faulty`=?,`user_unfaulty`=?,`status`=?,`company_type`=?,`company_code`=?,`shed_no`=?,`tmo_remark`=?,`tmo_number_of_package`=?,`tmo_gross_weight`=?,`customs_number_of_package`=?,`customs_gross_weight`=?,`customs_user`=?,`customs_remark`=?,`customs_number_of_package_unit`=?,`customs_gross_weight_unit`=?,`tmo_number_of_package_unit`=?,`tmo_gross_weight_unit`=?,`modified_date_time`=?,`unfaulty_date_time`=?,`mawb`=?,`hawb`=?,`flight_no`=?,`flight_date`=? where id=?");
            FaultyDaoImpl.setPreparedStatementValues(ps, faulty);
            ps.setInt(28, faulty.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE faulty[id=" + faulty.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from faulty where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE faulty[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(FaultyExample faultyExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (FaultyExample.Criteria criteria : faultyExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (FaultyExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (faultyExample.getOrderByClause() != null && !faultyExample.getOrderByClause().isEmpty()) {
			clause += " order by " + faultyExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByFaultyExample(FaultyExample faultyExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = FaultyDaoImpl.buildClause(faultyExample);			
            ResultSet rs = stmt.executeQuery("select" + (faultyExample.isDistinct() ? " distinct " : " ") + "count(*) from faulty" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT faulty[distinct=" + faultyExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public Faulty findByFaultyExample(FaultyExample faultyExample) throws DaoException {
		List<Faulty> res = this.findAllByFaultyExample(faultyExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<Faulty> findAllByFaultyExample(FaultyExample faultyExample) throws DaoException {
    	return this.findAllByFaultyExample(faultyExample, 0, 2000);
    }
    
    @Override
    public List<Faulty> findAllByFaultyExample(FaultyExample faultyExample, int limit) throws DaoException {
    	return this.findAllByFaultyExample(faultyExample, 0, limit);
    }
    
    @Override
    public List<Faulty> findAllByFaultyExample(FaultyExample faultyExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = FaultyDaoImpl.buildClause(faultyExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND faulty[distinct=" + faultyExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (faultyExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`declaration_no`,`faulty_date_time`,`user_faulty`,`user_unfaulty`,`status`,`company_type`,`company_code`,`shed_no`,`tmo_remark`,`tmo_number_of_package`,`tmo_gross_weight`,`customs_number_of_package`,`customs_gross_weight`,`customs_user`,`customs_remark`,`customs_number_of_package_unit`,`customs_gross_weight_unit`,`tmo_number_of_package_unit`,`tmo_gross_weight_unit`,`modified_date_time`,`unfaulty_date_time`,`mawb`,`hawb`,`flight_no`,`flight_date` from faulty" + clause);

            List<Faulty> list = new ArrayList<Faulty>();
            while (rs.next()) {
                list.add(FaultyDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
