package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.NormalCustomsPermitHistoryDao;

import com.tti.accscms.domain.movement.NormalCustomsPermitHistory;
import com.tti.accscms.domain.movement.NormalCustomsPermitHistoryExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table norm_customs_permit_his
 */
public class NormalCustomsPermitHistoryDaoImpl implements NormalCustomsPermitHistoryDao {

	private static final Logger logger = LoggerFactory.getLogger(NormalCustomsPermitHistoryDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, NormalCustomsPermitHistory normalCustomsPermitHistory) throws SQLException {
		
		if (normalCustomsPermitHistory.getId() != null) {
			ps.setInt(1, normalCustomsPermitHistory.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (normalCustomsPermitHistory.getId2() != null) {
			ps.setInt(2, normalCustomsPermitHistory.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (normalCustomsPermitHistory.getNormCustomsPermitId() != null) {
			ps.setInt(3, normalCustomsPermitHistory.getNormCustomsPermitId());
		} else {
			ps.setNull(3, java.sql.Types.INTEGER);
		}

		if (normalCustomsPermitHistory.getDeclarationNo() != null) {
			ps.setString(4, normalCustomsPermitHistory.getDeclarationNo());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getTransactionNo() != null) {
			ps.setString(5, normalCustomsPermitHistory.getTransactionNo());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getDocumentType() != null) {
			ps.setString(6, normalCustomsPermitHistory.getDocumentType());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getReceivedControlNumber() != null) {
			ps.setString(7, normalCustomsPermitHistory.getReceivedControlNumber());
		} else {
			ps.setNull(7, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getVesselName() != null) {
			ps.setString(8, normalCustomsPermitHistory.getVesselName());
		} else {
			ps.setNull(8, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getMawb() != null) {
			ps.setString(9, normalCustomsPermitHistory.getMawb());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getHawb() != null) {
			ps.setString(10, normalCustomsPermitHistory.getHawb());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getCallsign() != null) {
			ps.setString(11, normalCustomsPermitHistory.getCallsign());
		} else {
			ps.setNull(11, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getFlightNo() != null) {
			ps.setString(12, normalCustomsPermitHistory.getFlightNo());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getPortOfDischarge() != null) {
			ps.setString(13, normalCustomsPermitHistory.getPortOfDischarge());
		} else {
			ps.setNull(13, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getShedNo() != null) {
			ps.setString(14, normalCustomsPermitHistory.getShedNo());
		} else {
			ps.setNull(14, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getFlightDate() != null) {
			ps.setTimestamp(15, new java.sql.Timestamp(normalCustomsPermitHistory.getFlightDate().getTime()));
		} else {
			ps.setNull(15, java.sql.Types.DATE);
		}

		if (normalCustomsPermitHistory.getConsigneeName() != null) {
			ps.setString(16, normalCustomsPermitHistory.getConsigneeName());
		} else {
			ps.setNull(16, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getMarkAndNumber() != null) {
			ps.setString(17, normalCustomsPermitHistory.getMarkAndNumber());
		} else {
			ps.setNull(17, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getNumberOfPackage() != null) {
			ps.setInt(18, normalCustomsPermitHistory.getNumberOfPackage());
		} else {
			ps.setNull(18, java.sql.Types.INTEGER);
		}

		if (normalCustomsPermitHistory.getNumberOfPackageUnit() != null) {
			ps.setString(19, normalCustomsPermitHistory.getNumberOfPackageUnit());
		} else {
			ps.setNull(19, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getGrossWeight() != null) {
			ps.setDouble(20, normalCustomsPermitHistory.getGrossWeight());
		} else {
			ps.setNull(20, java.sql.Types.DOUBLE);
		}

		if (normalCustomsPermitHistory.getGrossWeightUnit() != null) {
			ps.setString(21, normalCustomsPermitHistory.getGrossWeightUnit());
		} else {
			ps.setNull(21, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getCargoClearanceDate() != null) {
			ps.setTimestamp(22, new java.sql.Timestamp(normalCustomsPermitHistory.getCargoClearanceDate().getTime()));
		} else {
			ps.setNull(22, java.sql.Types.DATE);
		}

		if (normalCustomsPermitHistory.getCargoClearanceTime() != null) {
			ps.setTimestamp(23, new java.sql.Timestamp(normalCustomsPermitHistory.getCargoClearanceTime().getTime()));
		} else {
			ps.setNull(23, java.sql.Types.TIME);
		}

		if (normalCustomsPermitHistory.getTransmitDate() != null) {
			ps.setTimestamp(24, new java.sql.Timestamp(normalCustomsPermitHistory.getTransmitDate().getTime()));
		} else {
			ps.setNull(24, java.sql.Types.DATE);
		}

		if (normalCustomsPermitHistory.getTransmitTime() != null) {
			ps.setTimestamp(25, new java.sql.Timestamp(normalCustomsPermitHistory.getTransmitTime().getTime()));
		} else {
			ps.setNull(25, java.sql.Types.TIME);
		}

		if (normalCustomsPermitHistory.getNumberOfContainer() != null) {
			ps.setInt(26, normalCustomsPermitHistory.getNumberOfContainer());
		} else {
			ps.setNull(26, java.sql.Types.INTEGER);
		}

		if (normalCustomsPermitHistory.getBalanced() != null) {
			ps.setByte(27, normalCustomsPermitHistory.getBalanced());
		} else {
			ps.setNull(27, java.sql.Types.TINYINT);
		}

		if (normalCustomsPermitHistory.getBalancedDateTime() != null) {
			ps.setTimestamp(28, new java.sql.Timestamp(normalCustomsPermitHistory.getBalancedDateTime().getTime()));
		} else {
			ps.setNull(28, java.sql.Types.TIMESTAMP);
		}

		if (normalCustomsPermitHistory.getModifiedDateTime() != null) {
			ps.setTimestamp(29, new java.sql.Timestamp(normalCustomsPermitHistory.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(29, new java.sql.Timestamp(System.currentTimeMillis()));
		}

		if (normalCustomsPermitHistory.getAbilGoodsDescription() != null) {
			ps.setString(30, normalCustomsPermitHistory.getAbilGoodsDescription());
		} else {
			ps.setNull(30, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getStatus() != null) {
			ps.setString(31, normalCustomsPermitHistory.getStatus());
		} else {
			ps.setNull(31, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getStatusBy() != null) {
			ps.setString(32, normalCustomsPermitHistory.getStatusBy());
		} else {
			ps.setNull(32, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getStatusDateTime() != null) {
			ps.setTimestamp(33, new java.sql.Timestamp(normalCustomsPermitHistory.getStatusDateTime().getTime()));
		} else {
			ps.setNull(33, java.sql.Types.TIMESTAMP);
		}

		if (normalCustomsPermitHistory.getRemark() != null) {
			ps.setString(34, normalCustomsPermitHistory.getRemark());
		} else {
			ps.setNull(34, java.sql.Types.VARCHAR);
		}

		if (normalCustomsPermitHistory.getIsEditManual() != null) {
			ps.setInt(35, normalCustomsPermitHistory.getIsEditManual());
		} else {
			ps.setNull(35, java.sql.Types.INTEGER);
		}

		if (normalCustomsPermitHistory.getDestination() != null) {
			ps.setString(36, normalCustomsPermitHistory.getDestination());
		} else {
			ps.setNull(36, java.sql.Types.VARCHAR);
		}

	}

		
	private static NormalCustomsPermitHistory createInstanceFromResultSet(ResultSet rs) throws SQLException {
		NormalCustomsPermitHistory normalCustomsPermitHistory = new NormalCustomsPermitHistory();
		
		Integer col1 = rs.getInt("id");
		normalCustomsPermitHistory.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		normalCustomsPermitHistory.setId2(rs.wasNull() ? null : col2);

		Integer col3 = rs.getInt("norm_customs_permit_id");
		normalCustomsPermitHistory.setNormCustomsPermitId(rs.wasNull() ? null : col3);

		String col4 = rs.getString("declaration_no");
		normalCustomsPermitHistory.setDeclarationNo(rs.wasNull() ? null : col4);

		String col5 = rs.getString("transaction_no");
		normalCustomsPermitHistory.setTransactionNo(rs.wasNull() ? null : col5);

		String col6 = rs.getString("document_type");
		normalCustomsPermitHistory.setDocumentType(rs.wasNull() ? null : col6);

		String col7 = rs.getString("received_control_number");
		normalCustomsPermitHistory.setReceivedControlNumber(rs.wasNull() ? null : col7);

		String col8 = rs.getString("vessel_name");
		normalCustomsPermitHistory.setVesselName(rs.wasNull() ? null : col8);

		String col9 = rs.getString("mawb");
		normalCustomsPermitHistory.setMawb(rs.wasNull() ? null : col9);

		String col10 = rs.getString("hawb");
		normalCustomsPermitHistory.setHawb(rs.wasNull() ? null : col10);

		String col11 = rs.getString("callsign");
		normalCustomsPermitHistory.setCallsign(rs.wasNull() ? null : col11);

		String col12 = rs.getString("flight_no");
		normalCustomsPermitHistory.setFlightNo(rs.wasNull() ? null : col12);

		String col13 = rs.getString("port_of_discharge");
		normalCustomsPermitHistory.setPortOfDischarge(rs.wasNull() ? null : col13);

		String col14 = rs.getString("shed_no");
		normalCustomsPermitHistory.setShedNo(rs.wasNull() ? null : col14);

		java.sql.Timestamp col15 = rs.getTimestamp("flight_date");
		normalCustomsPermitHistory.setFlightDate(rs.wasNull() ? null : new java.util.Date(col15.getTime()));

		String col16 = rs.getString("consignee_name");
		normalCustomsPermitHistory.setConsigneeName(rs.wasNull() ? null : col16);

		String col17 = rs.getString("mark_and_number");
		normalCustomsPermitHistory.setMarkAndNumber(rs.wasNull() ? null : col17);

		Integer col18 = rs.getInt("number_of_package");
		normalCustomsPermitHistory.setNumberOfPackage(rs.wasNull() ? null : col18);

		String col19 = rs.getString("number_of_package_unit");
		normalCustomsPermitHistory.setNumberOfPackageUnit(rs.wasNull() ? null : col19);

		Double col20 = rs.getDouble("gross_weight");
		normalCustomsPermitHistory.setGrossWeight(rs.wasNull() ? null : col20);

		String col21 = rs.getString("gross_weight_unit");
		normalCustomsPermitHistory.setGrossWeightUnit(rs.wasNull() ? null : col21);

		java.sql.Timestamp col22 = rs.getTimestamp("cargo_clearance_date");
		normalCustomsPermitHistory.setCargoClearanceDate(rs.wasNull() ? null : new java.util.Date(col22.getTime()));

		java.sql.Timestamp col23 = rs.getTimestamp("cargo_clearance_time");
		normalCustomsPermitHistory.setCargoClearanceTime(rs.wasNull() ? null : new java.util.Date(col23.getTime()));

		java.sql.Timestamp col24 = rs.getTimestamp("transmit_date");
		normalCustomsPermitHistory.setTransmitDate(rs.wasNull() ? null : new java.util.Date(col24.getTime()));

		java.sql.Timestamp col25 = rs.getTimestamp("transmit_time");
		normalCustomsPermitHistory.setTransmitTime(rs.wasNull() ? null : new java.util.Date(col25.getTime()));

		Integer col26 = rs.getInt("number_of_container");
		normalCustomsPermitHistory.setNumberOfContainer(rs.wasNull() ? null : col26);

		Byte col27 = rs.getByte("balanced");
		normalCustomsPermitHistory.setBalanced(rs.wasNull() ? null : col27);

		java.sql.Timestamp col28 = rs.getTimestamp("balanced_date_time");
		normalCustomsPermitHistory.setBalancedDateTime(rs.wasNull() ? null : new java.util.Date(col28.getTime()));

		java.sql.Timestamp col29 = rs.getTimestamp("modified_date_time");
		normalCustomsPermitHistory.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col29.getTime()));

		String col30 = rs.getString("abil_goods_description");
		normalCustomsPermitHistory.setAbilGoodsDescription(rs.wasNull() ? null : col30);

		String col31 = rs.getString("status");
		normalCustomsPermitHistory.setStatus(rs.wasNull() ? null : col31);

		String col32 = rs.getString("status_by");
		normalCustomsPermitHistory.setStatusBy(rs.wasNull() ? null : col32);

		java.sql.Timestamp col33 = rs.getTimestamp("status_date_time");
		normalCustomsPermitHistory.setStatusDateTime(rs.wasNull() ? null : new java.util.Date(col33.getTime()));

		String col34 = rs.getString("remark");
		normalCustomsPermitHistory.setRemark(rs.wasNull() ? null : col34);

		Integer col35 = rs.getInt("is_edit_manual");
		normalCustomsPermitHistory.setIsEditManual(rs.wasNull() ? null : col35);

		String col36 = rs.getString("destination");
		normalCustomsPermitHistory.setDestination(rs.wasNull() ? null : col36);


		return normalCustomsPermitHistory;
	}  

		
	@Override
	public int insert(NormalCustomsPermitHistory normalCustomsPermitHistory) throws DaoException {
		if (normalCustomsPermitHistory == null) {
			throw new DaoException("Cannot insert norm_customs_permit_his with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into norm_customs_permit_his(`id`,`id2`,`norm_customs_permit_id`,`declaration_no`,`transaction_no`,`document_type`,`received_control_number`,`vessel_name`,`mawb`,`hawb`,`callsign`,`flight_no`,`port_of_discharge`,`shed_no`,`flight_date`,`consignee_name`,`mark_and_number`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`cargo_clearance_date`,`cargo_clearance_time`,`transmit_date`,`transmit_time`,`number_of_container`,`balanced`,`balanced_date_time`,`modified_date_time`,`abil_goods_description`,`status`,`status_by`,`status_date_time`,`remark`,`is_edit_manual`,`destination`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            NormalCustomsPermitHistoryDaoImpl.setPreparedStatementValues(ps, normalCustomsPermitHistory);
			ps.setNull(1, java.sql.Types.INTEGER);
            ps.execute();
			int id = -1;
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			logger.info("DB:INSERT norm_customs_permit_his[id=" + id + "]");

			return id;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from norm_customs_permit_his");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT norm_customs_permit_his => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public NormalCustomsPermitHistory findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`norm_customs_permit_id`,`declaration_no`,`transaction_no`,`document_type`,`received_control_number`,`vessel_name`,`mawb`,`hawb`,`callsign`,`flight_no`,`port_of_discharge`,`shed_no`,`flight_date`,`consignee_name`,`mark_and_number`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`cargo_clearance_date`,`cargo_clearance_time`,`transmit_date`,`transmit_time`,`number_of_container`,`balanced`,`balanced_date_time`,`modified_date_time`,`abil_goods_description`,`status`,`status_by`,`status_date_time`,`remark`,`is_edit_manual`,`destination` from norm_customs_permit_his where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND norm_customs_permit_his[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            NormalCustomsPermitHistory instance = null;
            if (rs.next()) {
                instance = NormalCustomsPermitHistoryDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(NormalCustomsPermitHistory normalCustomsPermitHistory) throws DaoException {
		if (normalCustomsPermitHistory == null) {
			throw new DaoException("Cannot insert norm_customs_permit_his with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update norm_customs_permit_his set `id`=?,`id2`=?,`norm_customs_permit_id`=?,`declaration_no`=?,`transaction_no`=?,`document_type`=?,`received_control_number`=?,`vessel_name`=?,`mawb`=?,`hawb`=?,`callsign`=?,`flight_no`=?,`port_of_discharge`=?,`shed_no`=?,`flight_date`=?,`consignee_name`=?,`mark_and_number`=?,`number_of_package`=?,`number_of_package_unit`=?,`gross_weight`=?,`gross_weight_unit`=?,`cargo_clearance_date`=?,`cargo_clearance_time`=?,`transmit_date`=?,`transmit_time`=?,`number_of_container`=?,`balanced`=?,`balanced_date_time`=?,`modified_date_time`=?,`abil_goods_description`=?,`status`=?,`status_by`=?,`status_date_time`=?,`remark`=?,`is_edit_manual`=?,`destination`=? where id=?");
            NormalCustomsPermitHistoryDaoImpl.setPreparedStatementValues(ps, normalCustomsPermitHistory);
            ps.setInt(37, normalCustomsPermitHistory.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE norm_customs_permit_his[id=" + normalCustomsPermitHistory.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from norm_customs_permit_his where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE norm_customs_permit_his[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(NormalCustomsPermitHistoryExample normalCustomsPermitHistoryExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (NormalCustomsPermitHistoryExample.Criteria criteria : normalCustomsPermitHistoryExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (NormalCustomsPermitHistoryExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (normalCustomsPermitHistoryExample.getOrderByClause() != null && !normalCustomsPermitHistoryExample.getOrderByClause().isEmpty()) {
			clause += " order by " + normalCustomsPermitHistoryExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByNormalCustomsPermitHistoryExample(NormalCustomsPermitHistoryExample normalCustomsPermitHistoryExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = NormalCustomsPermitHistoryDaoImpl.buildClause(normalCustomsPermitHistoryExample);			
            ResultSet rs = stmt.executeQuery("select" + (normalCustomsPermitHistoryExample.isDistinct() ? " distinct " : " ") + "count(*) from norm_customs_permit_his" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT norm_customs_permit_his[distinct=" + normalCustomsPermitHistoryExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public NormalCustomsPermitHistory findByNormalCustomsPermitHistoryExample(NormalCustomsPermitHistoryExample normalCustomsPermitHistoryExample) throws DaoException {
		List<NormalCustomsPermitHistory> res = this.findAllByNormalCustomsPermitHistoryExample(normalCustomsPermitHistoryExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<NormalCustomsPermitHistory> findAllByNormalCustomsPermitHistoryExample(NormalCustomsPermitHistoryExample normalCustomsPermitHistoryExample) throws DaoException {
    	return this.findAllByNormalCustomsPermitHistoryExample(normalCustomsPermitHistoryExample, 0, 2000);
    }
    
    @Override
    public List<NormalCustomsPermitHistory> findAllByNormalCustomsPermitHistoryExample(NormalCustomsPermitHistoryExample normalCustomsPermitHistoryExample, int limit) throws DaoException {
    	return this.findAllByNormalCustomsPermitHistoryExample(normalCustomsPermitHistoryExample, 0, limit);
    }
    
    @Override
    public List<NormalCustomsPermitHistory> findAllByNormalCustomsPermitHistoryExample(NormalCustomsPermitHistoryExample normalCustomsPermitHistoryExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = NormalCustomsPermitHistoryDaoImpl.buildClause(normalCustomsPermitHistoryExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND norm_customs_permit_his[distinct=" + normalCustomsPermitHistoryExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (normalCustomsPermitHistoryExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`norm_customs_permit_id`,`declaration_no`,`transaction_no`,`document_type`,`received_control_number`,`vessel_name`,`mawb`,`hawb`,`callsign`,`flight_no`,`port_of_discharge`,`shed_no`,`flight_date`,`consignee_name`,`mark_and_number`,`number_of_package`,`number_of_package_unit`,`gross_weight`,`gross_weight_unit`,`cargo_clearance_date`,`cargo_clearance_time`,`transmit_date`,`transmit_time`,`number_of_container`,`balanced`,`balanced_date_time`,`modified_date_time`,`abil_goods_description`,`status`,`status_by`,`status_date_time`,`remark`,`is_edit_manual`,`destination` from norm_customs_permit_his" + clause);

            List<NormalCustomsPermitHistory> list = new ArrayList<NormalCustomsPermitHistory>();
            while (rs.next()) {
                list.add(NormalCustomsPermitHistoryDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
