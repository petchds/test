package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.ShipmentSearchCondition2Dao;

import com.tti.accscms.domain.movement.ShipmentSearchCondition2;
import com.tti.accscms.domain.movement.ShipmentSearchCondition2Example;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table shipment_search_condition_2
 */
public class ShipmentSearchCondition2DaoImpl implements ShipmentSearchCondition2Dao {

	private static final Logger logger = LoggerFactory.getLogger(ShipmentSearchCondition2DaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, ShipmentSearchCondition2 shipmentSearchCondition2) throws SQLException {
		
		if (shipmentSearchCondition2.getId() != null) {
			ps.setInt(1, shipmentSearchCondition2.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (shipmentSearchCondition2.getStatus() != null) {
			ps.setString(2, shipmentSearchCondition2.getStatus());
		} else {
			ps.setNull(2, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition2.getFlightNo() != null) {
			ps.setString(3, shipmentSearchCondition2.getFlightNo());
		} else {
			ps.setNull(3, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition2.getFlightDate() != null) {
			ps.setTimestamp(4, new java.sql.Timestamp(shipmentSearchCondition2.getFlightDate().getTime()));
		} else {
			ps.setNull(4, java.sql.Types.DATE);
		}

		if (shipmentSearchCondition2.getMawb() != null) {
			ps.setString(5, shipmentSearchCondition2.getMawb());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition2.getHawb() != null) {
			ps.setString(6, shipmentSearchCondition2.getHawb());
		} else {
			ps.setNull(6, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition2.getBlockDateTime() != null) {
			ps.setTimestamp(7, new java.sql.Timestamp(shipmentSearchCondition2.getBlockDateTime().getTime()));
		} else {
			ps.setNull(7, java.sql.Types.TIMESTAMP);
		}

		if (shipmentSearchCondition2.getUnblockDateTime() != null) {
			ps.setTimestamp(8, new java.sql.Timestamp(shipmentSearchCondition2.getUnblockDateTime().getTime()));
		} else {
			ps.setNull(8, java.sql.Types.TIMESTAMP);
		}

		if (shipmentSearchCondition2.getUserBlock() != null) {
			ps.setString(9, shipmentSearchCondition2.getUserBlock());
		} else {
			ps.setNull(9, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition2.getUserUnblock() != null) {
			ps.setString(10, shipmentSearchCondition2.getUserUnblock());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition2.getShedNo() != null) {
			ps.setInt(11, shipmentSearchCondition2.getShedNo());
		} else {
			ps.setNull(11, java.sql.Types.INTEGER);
		}

		if (shipmentSearchCondition2.getGoodsDescription() != null) {
			ps.setString(12, shipmentSearchCondition2.getGoodsDescription());
		} else {
			ps.setNull(12, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition2.getTotalGrossWeight() != null) {
			ps.setDouble(13, shipmentSearchCondition2.getTotalGrossWeight());
		} else {
			ps.setNull(13, java.sql.Types.DOUBLE);
		}

		if (shipmentSearchCondition2.getTotalGrossWeightUnit() != null) {
			ps.setString(14, shipmentSearchCondition2.getTotalGrossWeightUnit());
		} else {
			ps.setNull(14, java.sql.Types.VARCHAR);
		}

		if (shipmentSearchCondition2.getTotalNumberOfPackage() != null) {
			ps.setInt(15, shipmentSearchCondition2.getTotalNumberOfPackage());
		} else {
			ps.setNull(15, java.sql.Types.INTEGER);
		}

		if (shipmentSearchCondition2.getTotalNumberOfPackageUnit() != null) {
			ps.setString(16, shipmentSearchCondition2.getTotalNumberOfPackageUnit());
		} else {
			ps.setNull(16, java.sql.Types.VARCHAR);
		}

	}

		
	private static ShipmentSearchCondition2 createInstanceFromResultSet(ResultSet rs) throws SQLException {
		ShipmentSearchCondition2 shipmentSearchCondition2 = new ShipmentSearchCondition2();
		
		Integer col1 = rs.getInt("id");
		shipmentSearchCondition2.setId(rs.wasNull() ? null : col1);

		String col2 = rs.getString("status");
		shipmentSearchCondition2.setStatus(rs.wasNull() ? null : col2);

		String col3 = rs.getString("flight_no");
		shipmentSearchCondition2.setFlightNo(rs.wasNull() ? null : col3);

		java.sql.Timestamp col4 = rs.getTimestamp("flight_date");
		shipmentSearchCondition2.setFlightDate(rs.wasNull() ? null : new java.util.Date(col4.getTime()));

		String col5 = rs.getString("mawb");
		shipmentSearchCondition2.setMawb(rs.wasNull() ? null : col5);

		String col6 = rs.getString("hawb");
		shipmentSearchCondition2.setHawb(rs.wasNull() ? null : col6);

		java.sql.Timestamp col7 = rs.getTimestamp("block_date_time");
		shipmentSearchCondition2.setBlockDateTime(rs.wasNull() ? null : new java.util.Date(col7.getTime()));

		java.sql.Timestamp col8 = rs.getTimestamp("unblock_date_time");
		shipmentSearchCondition2.setUnblockDateTime(rs.wasNull() ? null : new java.util.Date(col8.getTime()));

		String col9 = rs.getString("user_block");
		shipmentSearchCondition2.setUserBlock(rs.wasNull() ? null : col9);

		String col10 = rs.getString("user_unblock");
		shipmentSearchCondition2.setUserUnblock(rs.wasNull() ? null : col10);

		Integer col11 = rs.getInt("shed_no");
		shipmentSearchCondition2.setShedNo(rs.wasNull() ? null : col11);

		String col12 = rs.getString("goods_description");
		shipmentSearchCondition2.setGoodsDescription(rs.wasNull() ? null : col12);

		Double col13 = rs.getDouble("total_gross_weight");
		shipmentSearchCondition2.setTotalGrossWeight(rs.wasNull() ? null : col13);

		String col14 = rs.getString("total_gross_weight_unit");
		shipmentSearchCondition2.setTotalGrossWeightUnit(rs.wasNull() ? null : col14);

		Integer col15 = rs.getInt("total_number_of_package");
		shipmentSearchCondition2.setTotalNumberOfPackage(rs.wasNull() ? null : col15);

		String col16 = rs.getString("total_number_of_package_unit");
		shipmentSearchCondition2.setTotalNumberOfPackageUnit(rs.wasNull() ? null : col16);


		return shipmentSearchCondition2;
	}  

		
	@Override
	public int insert(ShipmentSearchCondition2 shipmentSearchCondition2) throws DaoException {
		if (shipmentSearchCondition2 == null) {
			throw new DaoException("Cannot insert shipment_search_condition_2 with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into shipment_search_condition_2(`id`,`status`,`flight_no`,`flight_date`,`mawb`,`hawb`,`block_date_time`,`unblock_date_time`,`user_block`,`user_unblock`,`shed_no`,`goods_description`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit`) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            ShipmentSearchCondition2DaoImpl.setPreparedStatementValues(ps, shipmentSearchCondition2);
            ps.execute();
			ps.close();

			logger.info("DB:INSERT shipment_search_condition_2[id=" + shipmentSearchCondition2.getId() + "]");

			return shipmentSearchCondition2.getId();
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from shipment_search_condition_2");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT shipment_search_condition_2 => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public ShipmentSearchCondition2 findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`status`,`flight_no`,`flight_date`,`mawb`,`hawb`,`block_date_time`,`unblock_date_time`,`user_block`,`user_unblock`,`shed_no`,`goods_description`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit` from shipment_search_condition_2 where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND shipment_search_condition_2[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            ShipmentSearchCondition2 instance = null;
            if (rs.next()) {
                instance = ShipmentSearchCondition2DaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(ShipmentSearchCondition2 shipmentSearchCondition2) throws DaoException {
		if (shipmentSearchCondition2 == null) {
			throw new DaoException("Cannot insert shipment_search_condition_2 with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update shipment_search_condition_2 set `id`=?,`status`=?,`flight_no`=?,`flight_date`=?,`mawb`=?,`hawb`=?,`block_date_time`=?,`unblock_date_time`=?,`user_block`=?,`user_unblock`=?,`shed_no`=?,`goods_description`=?,`total_gross_weight`=?,`total_gross_weight_unit`=?,`total_number_of_package`=?,`total_number_of_package_unit`=? where id=?");
            ShipmentSearchCondition2DaoImpl.setPreparedStatementValues(ps, shipmentSearchCondition2);
            ps.setInt(17, shipmentSearchCondition2.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE shipment_search_condition_2[id=" + shipmentSearchCondition2.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from shipment_search_condition_2 where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE shipment_search_condition_2[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(ShipmentSearchCondition2Example shipmentSearchCondition2Example) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (ShipmentSearchCondition2Example.Criteria criteria : shipmentSearchCondition2Example.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (ShipmentSearchCondition2Example.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (shipmentSearchCondition2Example.getOrderByClause() != null && !shipmentSearchCondition2Example.getOrderByClause().isEmpty()) {
			clause += " order by " + shipmentSearchCondition2Example.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByShipmentSearchCondition2Example(ShipmentSearchCondition2Example shipmentSearchCondition2Example) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = ShipmentSearchCondition2DaoImpl.buildClause(shipmentSearchCondition2Example);			
            ResultSet rs = stmt.executeQuery("select" + (shipmentSearchCondition2Example.isDistinct() ? " distinct " : " ") + "count(*) from shipment_search_condition_2" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT shipment_search_condition_2[distinct=" + shipmentSearchCondition2Example.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public ShipmentSearchCondition2 findByShipmentSearchCondition2Example(ShipmentSearchCondition2Example shipmentSearchCondition2Example) throws DaoException {
		List<ShipmentSearchCondition2> res = this.findAllByShipmentSearchCondition2Example(shipmentSearchCondition2Example, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<ShipmentSearchCondition2> findAllByShipmentSearchCondition2Example(ShipmentSearchCondition2Example shipmentSearchCondition2Example) throws DaoException {
    	return this.findAllByShipmentSearchCondition2Example(shipmentSearchCondition2Example, 0, 2000);
    }
    
    @Override
    public List<ShipmentSearchCondition2> findAllByShipmentSearchCondition2Example(ShipmentSearchCondition2Example shipmentSearchCondition2Example, int limit) throws DaoException {
    	return this.findAllByShipmentSearchCondition2Example(shipmentSearchCondition2Example, 0, limit);
    }
    
    @Override
    public List<ShipmentSearchCondition2> findAllByShipmentSearchCondition2Example(ShipmentSearchCondition2Example shipmentSearchCondition2Example, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = ShipmentSearchCondition2DaoImpl.buildClause(shipmentSearchCondition2Example) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND shipment_search_condition_2[distinct=" + shipmentSearchCondition2Example.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (shipmentSearchCondition2Example.isDistinct() ? " distinct " : " ") + "`id`,`status`,`flight_no`,`flight_date`,`mawb`,`hawb`,`block_date_time`,`unblock_date_time`,`user_block`,`user_unblock`,`shed_no`,`goods_description`,`total_gross_weight`,`total_gross_weight_unit`,`total_number_of_package`,`total_number_of_package_unit` from shipment_search_condition_2" + clause);

            List<ShipmentSearchCondition2> list = new ArrayList<ShipmentSearchCondition2>();
            while (rs.next()) {
                list.add(ShipmentSearchCondition2DaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
