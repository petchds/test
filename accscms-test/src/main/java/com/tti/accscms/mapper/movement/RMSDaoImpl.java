package com.tti.accscms.mapper.movement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import com.tti.accscms.dao.DaoException;
import com.tti.accscms.dao.movement.RMSDao;

import com.tti.accscms.domain.movement.RMS;
import com.tti.accscms.domain.movement.RMSExample;

/**
 * This class was generated by Generator.
 * This class corresponds to the database table rms
 */
public class RMSDaoImpl implements RMSDao {

	private static final Logger logger = LoggerFactory.getLogger(RMSDaoImpl.class);
	
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
    private DataSource dataSource;
    
    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    }
		
	private static void setPreparedStatementValues(PreparedStatement ps, RMS rMS) throws SQLException {
		
		if (rMS.getId() != null) {
			ps.setInt(1, rMS.getId());
		} else {
			ps.setNull(1, java.sql.Types.INTEGER);
		}

		if (rMS.getId2() != null) {
			ps.setInt(2, rMS.getId2());
		} else {
			ps.setNull(2, java.sql.Types.INTEGER);
		}

		if (rMS.getRmsNo() != null) {
			ps.setInt(3, rMS.getRmsNo());
		} else {
			ps.setNull(3, java.sql.Types.INTEGER);
		}

		if (rMS.getLabel() != null) {
			ps.setString(4, rMS.getLabel());
		} else {
			ps.setNull(4, java.sql.Types.VARCHAR);
		}

		if (rMS.getDesc() != null) {
			ps.setString(5, rMS.getDesc());
		} else {
			ps.setNull(5, java.sql.Types.VARCHAR);
		}

		if (rMS.getMonth() != null) {
			ps.setInt(6, rMS.getMonth());
		} else {
			ps.setNull(6, java.sql.Types.INTEGER);
		}

		if (rMS.getDay() != null) {
			ps.setInt(7, rMS.getDay());
		} else {
			ps.setNull(7, java.sql.Types.INTEGER);
		}

		if (rMS.getHour() != null) {
			ps.setInt(8, rMS.getHour());
		} else {
			ps.setNull(8, java.sql.Types.INTEGER);
		}

		if (rMS.getMinute() != null) {
			ps.setInt(9, rMS.getMinute());
		} else {
			ps.setNull(9, java.sql.Types.INTEGER);
		}

		if (rMS.getType() != null) {
			ps.setString(10, rMS.getType());
		} else {
			ps.setNull(10, java.sql.Types.VARCHAR);
		}

		if (rMS.getModifiedDateTime() != null) {
			ps.setTimestamp(11, new java.sql.Timestamp(rMS.getModifiedDateTime().getTime()));
		} else {
			ps.setTimestamp(11, new java.sql.Timestamp(System.currentTimeMillis()));
		}

	}

		
	private static RMS createInstanceFromResultSet(ResultSet rs) throws SQLException {
		RMS rMS = new RMS();
		
		Integer col1 = rs.getInt("id");
		rMS.setId(rs.wasNull() ? null : col1);

		Integer col2 = rs.getInt("id2");
		rMS.setId2(rs.wasNull() ? null : col2);

		Integer col3 = rs.getInt("rms_no");
		rMS.setRmsNo(rs.wasNull() ? null : col3);

		String col4 = rs.getString("label");
		rMS.setLabel(rs.wasNull() ? null : col4);

		String col5 = rs.getString("desc");
		rMS.setDesc(rs.wasNull() ? null : col5);

		Integer col6 = rs.getInt("month");
		rMS.setMonth(rs.wasNull() ? null : col6);

		Integer col7 = rs.getInt("day");
		rMS.setDay(rs.wasNull() ? null : col7);

		Integer col8 = rs.getInt("hour");
		rMS.setHour(rs.wasNull() ? null : col8);

		Integer col9 = rs.getInt("minute");
		rMS.setMinute(rs.wasNull() ? null : col9);

		String col10 = rs.getString("type");
		rMS.setType(rs.wasNull() ? null : col10);

		java.sql.Timestamp col11 = rs.getTimestamp("modified_date_time");
		rMS.setModifiedDateTime(rs.wasNull() ? null : new java.util.Date(col11.getTime()));


		return rMS;
	}  

		
	@Override
	public int insert(RMS rMS) throws DaoException {
		if (rMS == null) {
			throw new DaoException("Cannot insert rms with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("insert into rms(`id`,`id2`,`rms_no`,`label`,`desc`,`month`,`day`,`hour`,`minute`,`type`,`modified_date_time`) values(?,?,?,?,?,?,?,?,?,?,?)");
            RMSDaoImpl.setPreparedStatementValues(ps, rMS);
            ps.execute();
			ps.close();

			logger.info("DB:INSERT rms[id=" + rMS.getId() + "]");

			return rMS.getId();
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int count() throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select count(*) from rms");
			
			int count = -1;
			if (rs.next()) { 
				count = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			
			logger.debug("DB:COUNT rms => " + count);
			
			return count;
		} catch (SQLException e) {
			throw new DaoException(e);
		}
	}

	@Override
	public RMS findById(Integer id) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("select `id`,`id2`,`rms_no`,`label`,`desc`,`month`,`day`,`hour`,`minute`,`type`,`modified_date_time` from rms where id=?");
            ps.setInt(1, id);
            
            logger.debug("DB:FIND rms[id=" + id + "]");

            ResultSet rs = ps.executeQuery();
            RMS instance = null;
            if (rs.next()) {
                instance = RMSDaoImpl.createInstanceFromResultSet(rs);
            }
            rs.close();
            ps.close();

            return instance;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int update(RMS rMS) throws DaoException {
		if (rMS == null) {
			throw new DaoException("Cannot insert rms with null value.");
		}
		
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("update rms set `id`=?,`id2`=?,`rms_no`=?,`label`=?,`desc`=?,`month`=?,`day`=?,`hour`=?,`minute`=?,`type`=?,`modified_date_time`=? where id=?");
            RMSDaoImpl.setPreparedStatementValues(ps, rMS);
            ps.setInt(12, rMS.getId());
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:UPDATE rms[id=" + rMS.getId() + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public int deleteById(Integer id) throws DaoException {
		 try {
		 	Connection conn = DataSourceUtils.doGetConnection(dataSource);
            PreparedStatement ps = conn.prepareStatement("delete from rms where id=?");
            ps.setInt(1, id);
            int count = ps.executeUpdate();
            ps.close();
            
            logger.info("DB:DELETE rms[id=" + id + "] => " + count);

            return count;
        } catch (SQLException e) {
            throw new DaoException(e);
        }
	}

	
		
	private static String buildClause(RMSExample rMSExample) {
		StringBuilder builder = new StringBuilder();
		boolean firstO = true;
		for (RMSExample.Criteria criteria : rMSExample.getOredCriteria()) {
			if (firstO) {
				firstO = false;
			} else {
				builder.append(" or ");
			}
			
			if (criteria.isValid()) {
				builder.append('(');
				boolean first = true;
				for (RMSExample.Criterion criterion : criteria.getAllCriteria()) {
					if (first) {
						first = false;
					} else {
						builder.append(" and ");
					}
					
					if (criterion.isNoValue()) {
						builder.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isBetweenValue()) {
						builder.append(criterion.getCondition());
						builder.append(' ');
						
						builder.append("'");
						if (criterion.getValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getValue()));
						} else {
							builder.append(criterion.getValue().toString().replace("'", "\'"));
						}
						builder.append("'");
						
						builder.append(" and ");
						builder.append("'");
						if (criterion.getSecondValue() instanceof java.util.Date) {
							builder.append(dateFormat.format(criterion.getSecondValue()));
						} else {
							builder.append(criterion.getSecondValue().toString().replace("'", "\'"));
						}
						builder.append("'");
					} else if (criterion.isListValue()) {
						builder.append(criterion.getCondition());
						builder.append('(');
						List<?> items = (List<?>) criterion.getValue();
						boolean firstC = true;
						for (Object item : items) {
							if (firstC) {
								firstC = false;
							} else {
								builder.append(", ");
							}
							builder.append("'");
							if (item instanceof java.util.Date) {
								builder.append(dateFormat.format(item));
							} else {
								builder.append(item.toString().replace("'", "\'"));
							}
							builder.append("'");
						}
						builder.append(')');
					}
				}
				builder.append(')');
			}
		}
		
		String clause = firstO ? "" : " where " + builder.toString();
		
		if (rMSExample.getOrderByClause() != null && !rMSExample.getOrderByClause().isEmpty()) {
			clause += " order by " + rMSExample.getOrderByClause();
		}
		
		return clause;
	}
	
	@Override
	public int countByRMSExample(RMSExample rMSExample) throws DaoException {
		try {
			Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();

			String clause = RMSDaoImpl.buildClause(rMSExample);			
            ResultSet rs = stmt.executeQuery("select" + (rMSExample.isDistinct() ? " distinct " : " ") + "count(*) from rms" + clause);
            int count = -1;
            if (rs.next()) {
            	count = rs.getInt(1);
           	}
            rs.close();
            stmt.close();
            
            logger.debug("DB:COUNT rms[distinct=" + rMSExample.isDistinct() + ",clause=" + clause + "] => " + count);

            return count;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}
	
	@Override
	public RMS findByRMSExample(RMSExample rMSExample) throws DaoException {
		List<RMS> res = this.findAllByRMSExample(rMSExample, 0, 1);
		if (res.size() > 0) {
			return res.get(0);
		} else {
			return null;
		}
	}
	
	@Override
    public List<RMS> findAllByRMSExample(RMSExample rMSExample) throws DaoException {
    	return this.findAllByRMSExample(rMSExample, 0, 2000);
    }
    
    @Override
    public List<RMS> findAllByRMSExample(RMSExample rMSExample, int limit) throws DaoException {
    	return this.findAllByRMSExample(rMSExample, 0, limit);
    }
    
    @Override
    public List<RMS> findAllByRMSExample(RMSExample rMSExample, int offset, int limit) throws DaoException {
    	try {
    		Connection conn = DataSourceUtils.doGetConnection(dataSource);
            Statement stmt = conn.createStatement();
            String clause = RMSDaoImpl.buildClause(rMSExample) + " limit " + offset + "," + limit;
            
            logger.debug("DB:FIND rms[distinct=" + rMSExample.isDistinct() + ",clause=" + clause + "]");
            
            ResultSet rs = stmt.executeQuery("select" + (rMSExample.isDistinct() ? " distinct " : " ") + "`id`,`id2`,`rms_no`,`label`,`desc`,`month`,`day`,`hour`,`minute`,`type`,`modified_date_time` from rms" + clause);

            List<RMS> list = new ArrayList<RMS>();
            while (rs.next()) {
                list.add(RMSDaoImpl.createInstanceFromResultSet(rs));
            }
            rs.close();
            stmt.close();

            return list;
        } catch (Exception e) {
            throw new DaoException(e);
        }
	}

}
